{==============================================================================
    ___ _____  _____ _    ___ ™
   | _ \_ _\ \/ / __| |  / __|
   |  _/| | >  <| _|| |__\__ \
   |_| |___/_/\_\___|____|___/
 Advanced Delphi 2D Game Library

 Copyright © 2025-present tinyBigGAMES™ LLC
 All Rights Reserved.

 https://github.com/tinyBigGAMES/PIXELS

 BSD 3-Clause License

 Copyright (c) 2025-present, tinyBigGAMES LLC

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
==============================================================================}

unit PIXELS.Deps;

{$I PIXELS.Defines.inc}

interface

uses
  System.SysUtils,
  System.IOUtils,
  System.Classes,
  WinApi.Windows;

const
  ALLEGRO_PLATFORM_STR = 'MSVC';
  ALLEGRO_EXTRA_HEADER = 'allegro5/platform/alwin.h';
  ALLEGRO_INTERNAL_HEADER = 'allegro5/platform/aintwin.h';
  ALLEGRO_INTERNAL_THREAD_HEADER = 'allegro5/platform/aintwthr.h';
  INT32_MIN = (-2147483647-1);
  _ALLEGRO_UNSTABLE_BIT_SET = INT32_MIN;
  ALLEGRO_VERSION = 5;
  ALLEGRO_SUB_VERSION = 2;
  ALLEGRO_WIP_VERSION = 11;
  ALLEGRO_UNSTABLE_BIT = _ALLEGRO_UNSTABLE_BIT_SET;
  ALLEGRO_RELEASE_NUMBER = 0;
  ALLEGRO_VERSION_STR = '5.2.11 (GIT)';
  ALLEGRO_DATE_STR = '2024';
  ALLEGRO_DATE = 20241126;
  ALLEGRO_VERSION_INT = ((ALLEGRO_VERSION shl 24) or (ALLEGRO_SUB_VERSION shl 16) or (ALLEGRO_WIP_VERSION shl 8) or ALLEGRO_RELEASE_NUMBER or ALLEGRO_UNSTABLE_BIT);
  ALLEGRO_PI = 3.14159265358979323846;
  ALLEGRO_NATIVE_PATH_SEP = '\';
  ALLEGRO_NATIVE_DRIVE_SEP = ':';
  ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE = 255;
  EOF = (-1);
  _AL_MAX_JOYSTICK_AXES = 5;
  _AL_MAX_JOYSTICK_STICKS = 16;
  _AL_MAX_JOYSTICK_BUTTONS = 32;
  ALLEGRO_MOUSE_MAX_EXTRA_AXES = 4;
  ALLEGRO_TOUCH_INPUT_MAX_TOUCH_COUNT = 16;
  ALLEGRO_SHADER_VAR_COLOR = 'al_color';
  ALLEGRO_SHADER_VAR_POS = 'al_pos';
  ALLEGRO_SHADER_VAR_PROJVIEW_MATRIX = 'al_projview_matrix';
  ALLEGRO_SHADER_VAR_TEX = 'al_tex';
  ALLEGRO_SHADER_VAR_TEXCOORD = 'al_texcoord';
  ALLEGRO_SHADER_VAR_TEX_MATRIX = 'al_tex_matrix';
  ALLEGRO_SHADER_VAR_USER_ATTR = 'al_user_attr_';
  ALLEGRO_SHADER_VAR_USE_TEX = 'al_use_tex';
  ALLEGRO_SHADER_VAR_USE_TEX_MATRIX = 'al_use_tex_matrix';
  ALLEGRO_SHADER_VAR_ALPHA_TEST = 'al_alpha_test';
  ALLEGRO_SHADER_VAR_ALPHA_FUNCTION = 'al_alpha_func';
  ALLEGRO_SHADER_VAR_ALPHA_TEST_VALUE = 'al_alpha_test_val';
  ALLEGRO_MAX_CHANNELS = 8;
  ALLEGRO_AUDIO_PAN_NONE = (-1000.0);
  ALLEGRO_VERTEX_CACHE_SIZE = 256;
  ALLEGRO_PRIM_QUALITY = 10;
  ALLEGRO_TTF_NO_KERNING = 1;
  ALLEGRO_TTF_MONOCHROME = 2;
  ALLEGRO_TTF_NO_AUTOHINT = 4;
  PHYSFS_VER_MAJOR = 3;
  PHYSFS_VER_MINOR = 0;
  PHYSFS_VER_PATCH = 2;
  Z_ERRNO = -1;
  Z_OK = 0;
  Z_DEFLATED = 8;
  Z_DEFAULT_STRATEGY = 0;
  ZIP_OK = (0);
  ZIP_EOF = (0);
  ZIP_ERRNO = (Z_ERRNO);
  ZIP_PARAMERROR = (-102);
  ZIP_BADZIPFILE = (-103);
  ZIP_INTERNALERROR = (-104);
  UNZ_OK = (0);
  UNZ_END_OF_LIST_OF_FILE = (-100);
  UNZ_ERRNO = (Z_ERRNO);
  UNZ_EOF = (0);
  UNZ_PARAMERROR = (-102);
  UNZ_BADZIPFILE = (-103);
  UNZ_INTERNALERROR = (-104);
  UNZ_CRCERROR = (-105);
  APPEND_STATUS_CREATE = (0);
  APPEND_STATUS_CREATEAFTER = (1);
  APPEND_STATUS_ADDINZIP = (2);

type
  ALLEGRO_PIXEL_FORMAT = Integer;
  PALLEGRO_PIXEL_FORMAT = ^ALLEGRO_PIXEL_FORMAT;

const
  ALLEGRO_PIXEL_FORMAT_ANY = 0;
  ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA = 1;
  ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA = 2;
  ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA = 3;
  ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA = 4;
  ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA = 5;
  ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA = 6;
  ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA = 7;
  ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA = 8;
  ALLEGRO_PIXEL_FORMAT_ARGB_8888 = 9;
  ALLEGRO_PIXEL_FORMAT_RGBA_8888 = 10;
  ALLEGRO_PIXEL_FORMAT_ARGB_4444 = 11;
  ALLEGRO_PIXEL_FORMAT_RGB_888 = 12;
  ALLEGRO_PIXEL_FORMAT_RGB_565 = 13;
  ALLEGRO_PIXEL_FORMAT_RGB_555 = 14;
  ALLEGRO_PIXEL_FORMAT_RGBA_5551 = 15;
  ALLEGRO_PIXEL_FORMAT_ARGB_1555 = 16;
  ALLEGRO_PIXEL_FORMAT_ABGR_8888 = 17;
  ALLEGRO_PIXEL_FORMAT_XBGR_8888 = 18;
  ALLEGRO_PIXEL_FORMAT_BGR_888 = 19;
  ALLEGRO_PIXEL_FORMAT_BGR_565 = 20;
  ALLEGRO_PIXEL_FORMAT_BGR_555 = 21;
  ALLEGRO_PIXEL_FORMAT_RGBX_8888 = 22;
  ALLEGRO_PIXEL_FORMAT_XRGB_8888 = 23;
  ALLEGRO_PIXEL_FORMAT_ABGR_F32 = 24;
  ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE = 25;
  ALLEGRO_PIXEL_FORMAT_RGBA_4444 = 26;
  ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8 = 27;
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1 = 28;
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3 = 29;
  ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5 = 30;
  ALLEGRO_NUM_PIXEL_FORMATS = 31;

type
  ALLEGRO_BITMAP_WRAP = Integer;
  PALLEGRO_BITMAP_WRAP = ^ALLEGRO_BITMAP_WRAP;

const
  ALLEGRO_BITMAP_WRAP_DEFAULT = 0;
  ALLEGRO_BITMAP_WRAP_REPEAT = 1;
  ALLEGRO_BITMAP_WRAP_CLAMP = 2;
  ALLEGRO_BITMAP_WRAP_MIRROR = 3;

const
  ALLEGRO_MEMORY_BITMAP = 1;
  _ALLEGRO_KEEP_BITMAP_FORMAT = 2;
  ALLEGRO_FORCE_LOCKING = 4;
  ALLEGRO_NO_PRESERVE_TEXTURE = 8;
  _ALLEGRO_ALPHA_TEST = 16;
  _ALLEGRO_INTERNAL_OPENGL = 32;
  ALLEGRO_MIN_LINEAR = 64;
  ALLEGRO_MAG_LINEAR = 128;
  ALLEGRO_MIPMAP = 256;
  _ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512;
  ALLEGRO_VIDEO_BITMAP = 1024;
  ALLEGRO_CONVERT_BITMAP = 4096;

const
  ALLEGRO_FLIP_HORIZONTAL = 1;
  ALLEGRO_FLIP_VERTICAL = 2;

type
  ALLEGRO_SEEK = Integer;
  PALLEGRO_SEEK = ^ALLEGRO_SEEK;

const
  ALLEGRO_SEEK_SET = 0;
  ALLEGRO_SEEK_CUR = 1;
  ALLEGRO_SEEK_END = 2;

const
  ALLEGRO_KEEP_BITMAP_FORMAT = 2;
  ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512;
  ALLEGRO_KEEP_INDEX = 2048;

const
  ALLEGRO_LOCK_READWRITE = 0;
  ALLEGRO_LOCK_READONLY = 1;
  ALLEGRO_LOCK_WRITEONLY = 2;

type
  ALLEGRO_BLEND_MODE = Integer;
  PALLEGRO_BLEND_MODE = ^ALLEGRO_BLEND_MODE;

const
  ALLEGRO_ZERO = 0;
  ALLEGRO_ONE = 1;
  ALLEGRO_ALPHA = 2;
  ALLEGRO_INVERSE_ALPHA = 3;
  ALLEGRO_SRC_COLOR = 4;
  ALLEGRO_DEST_COLOR = 5;
  ALLEGRO_INVERSE_SRC_COLOR = 6;
  ALLEGRO_INVERSE_DEST_COLOR = 7;
  ALLEGRO_CONST_COLOR = 8;
  ALLEGRO_INVERSE_CONST_COLOR = 9;
  ALLEGRO_NUM_BLEND_MODES = 10;

type
  ALLEGRO_BLEND_OPERATIONS = Integer;
  PALLEGRO_BLEND_OPERATIONS = ^ALLEGRO_BLEND_OPERATIONS;

const
  ALLEGRO_ADD = 0;
  ALLEGRO_SRC_MINUS_DEST = 1;
  ALLEGRO_DEST_MINUS_SRC = 2;
  ALLEGRO_NUM_BLEND_OPERATIONS = 3;

const
  ALLEGRO_EVENT_JOYSTICK_AXIS = 1;
  ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN = 2;
  ALLEGRO_EVENT_JOYSTICK_BUTTON_UP = 3;
  ALLEGRO_EVENT_JOYSTICK_CONFIGURATION = 4;
  ALLEGRO_EVENT_KEY_DOWN = 10;
  ALLEGRO_EVENT_KEY_CHAR = 11;
  ALLEGRO_EVENT_KEY_UP = 12;
  ALLEGRO_EVENT_MOUSE_AXES = 20;
  ALLEGRO_EVENT_MOUSE_BUTTON_DOWN = 21;
  ALLEGRO_EVENT_MOUSE_BUTTON_UP = 22;
  ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY = 23;
  ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY = 24;
  ALLEGRO_EVENT_MOUSE_WARPED = 25;
  ALLEGRO_EVENT_TIMER = 30;
  ALLEGRO_EVENT_DISPLAY_EXPOSE = 40;
  ALLEGRO_EVENT_DISPLAY_RESIZE = 41;
  ALLEGRO_EVENT_DISPLAY_CLOSE = 42;
  ALLEGRO_EVENT_DISPLAY_LOST = 43;
  ALLEGRO_EVENT_DISPLAY_FOUND = 44;
  ALLEGRO_EVENT_DISPLAY_SWITCH_IN = 45;
  ALLEGRO_EVENT_DISPLAY_SWITCH_OUT = 46;
  ALLEGRO_EVENT_DISPLAY_ORIENTATION = 47;
  ALLEGRO_EVENT_DISPLAY_HALT_DRAWING = 48;
  ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING = 49;
  ALLEGRO_EVENT_TOUCH_BEGIN = 50;
  ALLEGRO_EVENT_TOUCH_END = 51;
  ALLEGRO_EVENT_TOUCH_MOVE = 52;
  ALLEGRO_EVENT_TOUCH_CANCEL = 53;
  ALLEGRO_EVENT_DISPLAY_CONNECTED = 60;
  ALLEGRO_EVENT_DISPLAY_DISCONNECTED = 61;
  ALLEGRO_EVENT_DROP = 62;

const
  ALLEGRO_WINDOWED = 1;
  ALLEGRO_FULLSCREEN = 2;
  ALLEGRO_OPENGL = 4;
  ALLEGRO_DIRECT3D_INTERNAL = 8;
  ALLEGRO_RESIZABLE = 16;
  ALLEGRO_FRAMELESS = 32;
  ALLEGRO_NOFRAME = 32;
  ALLEGRO_GENERATE_EXPOSE_EVENTS = 64;
  ALLEGRO_OPENGL_3_0 = 128;
  ALLEGRO_OPENGL_FORWARD_COMPATIBLE = 256;
  ALLEGRO_FULLSCREEN_WINDOW = 512;
  ALLEGRO_MINIMIZED = 1024;
  ALLEGRO_PROGRAMMABLE_PIPELINE = 2048;
  ALLEGRO_GTK_TOPLEVEL_INTERNAL = 4096;
  ALLEGRO_MAXIMIZED = 8192;
  ALLEGRO_OPENGL_ES_PROFILE = 16384;
  ALLEGRO_OPENGL_CORE_PROFILE = 32768;
  ALLEGRO_DRAG_AND_DROP = 65536;

type
  ALLEGRO_DISPLAY_OPTIONS = Integer;
  PALLEGRO_DISPLAY_OPTIONS = ^ALLEGRO_DISPLAY_OPTIONS;

const
  ALLEGRO_RED_SIZE = 0;
  ALLEGRO_GREEN_SIZE = 1;
  ALLEGRO_BLUE_SIZE = 2;
  ALLEGRO_ALPHA_SIZE = 3;
  ALLEGRO_RED_SHIFT = 4;
  ALLEGRO_GREEN_SHIFT = 5;
  ALLEGRO_BLUE_SHIFT = 6;
  ALLEGRO_ALPHA_SHIFT = 7;
  ALLEGRO_ACC_RED_SIZE = 8;
  ALLEGRO_ACC_GREEN_SIZE = 9;
  ALLEGRO_ACC_BLUE_SIZE = 10;
  ALLEGRO_ACC_ALPHA_SIZE = 11;
  ALLEGRO_STEREO = 12;
  ALLEGRO_AUX_BUFFERS = 13;
  ALLEGRO_COLOR_SIZE = 14;
  ALLEGRO_DEPTH_SIZE = 15;
  ALLEGRO_STENCIL_SIZE = 16;
  ALLEGRO_SAMPLE_BUFFERS = 17;
  ALLEGRO_SAMPLES = 18;
  ALLEGRO_RENDER_METHOD = 19;
  ALLEGRO_FLOAT_COLOR = 20;
  ALLEGRO_FLOAT_DEPTH = 21;
  ALLEGRO_SINGLE_BUFFER = 22;
  ALLEGRO_SWAP_METHOD = 23;
  ALLEGRO_COMPATIBLE_DISPLAY = 24;
  ALLEGRO_UPDATE_DISPLAY_REGION = 25;
  ALLEGRO_VSYNC = 26;
  ALLEGRO_MAX_BITMAP_SIZE = 27;
  ALLEGRO_SUPPORT_NPOT_BITMAP = 28;
  ALLEGRO_CAN_DRAW_INTO_BITMAP = 29;
  ALLEGRO_SUPPORT_SEPARATE_ALPHA = 30;
  ALLEGRO_AUTO_CONVERT_BITMAPS = 31;
  ALLEGRO_SUPPORTED_ORIENTATIONS = 32;
  ALLEGRO_OPENGL_MAJOR_VERSION = 33;
  ALLEGRO_OPENGL_MINOR_VERSION = 34;
  ALLEGRO_DEFAULT_SHADER_PLATFORM = 35;
  ALLEGRO_DISPLAY_OPTIONS_COUNT = 36;

const
  ALLEGRO_DONTCARE = 0;
  ALLEGRO_REQUIRE = 1;
  ALLEGRO_SUGGEST = 2;

type
  ALLEGRO_DISPLAY_ORIENTATION = Integer;
  PALLEGRO_DISPLAY_ORIENTATION = ^ALLEGRO_DISPLAY_ORIENTATION;

const
  ALLEGRO_DISPLAY_ORIENTATION_UNKNOWN = 0;
  ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES = 1;
  ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES = 2;
  ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES = 4;
  ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES = 8;
  ALLEGRO_DISPLAY_ORIENTATION_PORTRAIT = 5;
  ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE = 10;
  ALLEGRO_DISPLAY_ORIENTATION_ALL = 15;
  ALLEGRO_DISPLAY_ORIENTATION_FACE_UP = 16;
  ALLEGRO_DISPLAY_ORIENTATION_FACE_DOWN = 32;

const
  _ALLEGRO_PRIM_MAX_USER_ATTR = 10;

type
  ALLEGRO_FILE_MODE = Integer;
  PALLEGRO_FILE_MODE = ^ALLEGRO_FILE_MODE;

const
  ALLEGRO_FILEMODE_READ = 1;
  ALLEGRO_FILEMODE_WRITE = 2;
  ALLEGRO_FILEMODE_EXECUTE = 4;
  ALLEGRO_FILEMODE_HIDDEN = 8;
  ALLEGRO_FILEMODE_ISFILE = 16;
  ALLEGRO_FILEMODE_ISDIR = 32;

type
  ALLEGRO_FOR_EACH_FS_ENTRY_RESULT = Integer;
  PALLEGRO_FOR_EACH_FS_ENTRY_RESULT = ^ALLEGRO_FOR_EACH_FS_ENTRY_RESULT;

const
  ALLEGRO_FOR_EACH_FS_ENTRY_ERROR = -1;
  ALLEGRO_FOR_EACH_FS_ENTRY_OK = 0;
  ALLEGRO_FOR_EACH_FS_ENTRY_SKIP = 1;
  ALLEGRO_FOR_EACH_FS_ENTRY_STOP = 2;

type
  ALLEGRO_JOYFLAGS = Integer;
  PALLEGRO_JOYFLAGS = ^ALLEGRO_JOYFLAGS;

const
  ALLEGRO_JOYFLAG_DIGITAL = 1;
  ALLEGRO_JOYFLAG_ANALOGUE = 2;

type
  ALLEGRO_GAMEPAD_BUTTON = Integer;
  PALLEGRO_GAMEPAD_BUTTON = ^ALLEGRO_GAMEPAD_BUTTON;

const
  ALLEGRO_GAMEPAD_BUTTON_A = 0;
  ALLEGRO_GAMEPAD_BUTTON_B = 1;
  ALLEGRO_GAMEPAD_BUTTON_X = 2;
  ALLEGRO_GAMEPAD_BUTTON_Y = 3;
  ALLEGRO_GAMEPAD_BUTTON_LEFT_SHOULDER = 4;
  ALLEGRO_GAMEPAD_BUTTON_RIGHT_SHOULDER = 5;
  ALLEGRO_GAMEPAD_BUTTON_BACK = 6;
  ALLEGRO_GAMEPAD_BUTTON_START = 7;
  ALLEGRO_GAMEPAD_BUTTON_GUIDE = 8;
  ALLEGRO_GAMEPAD_BUTTON_LEFT_THUMB = 9;
  ALLEGRO_GAMEPAD_BUTTON_RIGHT_THUMB = 10;

type
  ALLEGRO_GAMEPAD_STICK = Integer;
  PALLEGRO_GAMEPAD_STICK = ^ALLEGRO_GAMEPAD_STICK;

const
  ALLEGRO_GAMEPAD_STICK_DPAD = 0;
  ALLEGRO_GAMEPAD_STICK_LEFT_THUMB = 1;
  ALLEGRO_GAMEPAD_STICK_RIGHT_THUMB = 2;
  ALLEGRO_GAMEPAD_STICK_LEFT_TRIGGER = 3;
  ALLEGRO_GAMEPAD_STICK_RIGHT_TRIGGER = 4;

type
  ALLEGRO_JOYSTICK_TYPE = Integer;
  PALLEGRO_JOYSTICK_TYPE = ^ALLEGRO_JOYSTICK_TYPE;

const
  ALLEGRO_JOYSTICK_TYPE_UNKNOWN = 0;
  ALLEGRO_JOYSTICK_TYPE_GAMEPAD = 1;

const
  ALLEGRO_KEY_A = 1;
  ALLEGRO_KEY_B = 2;
  ALLEGRO_KEY_C = 3;
  ALLEGRO_KEY_D = 4;
  ALLEGRO_KEY_E = 5;
  ALLEGRO_KEY_F = 6;
  ALLEGRO_KEY_G = 7;
  ALLEGRO_KEY_H = 8;
  ALLEGRO_KEY_I = 9;
  ALLEGRO_KEY_J = 10;
  ALLEGRO_KEY_K = 11;
  ALLEGRO_KEY_L = 12;
  ALLEGRO_KEY_M = 13;
  ALLEGRO_KEY_N = 14;
  ALLEGRO_KEY_O = 15;
  ALLEGRO_KEY_P = 16;
  ALLEGRO_KEY_Q = 17;
  ALLEGRO_KEY_R = 18;
  ALLEGRO_KEY_S = 19;
  ALLEGRO_KEY_T = 20;
  ALLEGRO_KEY_U = 21;
  ALLEGRO_KEY_V = 22;
  ALLEGRO_KEY_W = 23;
  ALLEGRO_KEY_X = 24;
  ALLEGRO_KEY_Y = 25;
  ALLEGRO_KEY_Z = 26;
  ALLEGRO_KEY_0 = 27;
  ALLEGRO_KEY_1 = 28;
  ALLEGRO_KEY_2 = 29;
  ALLEGRO_KEY_3 = 30;
  ALLEGRO_KEY_4 = 31;
  ALLEGRO_KEY_5 = 32;
  ALLEGRO_KEY_6 = 33;
  ALLEGRO_KEY_7 = 34;
  ALLEGRO_KEY_8 = 35;
  ALLEGRO_KEY_9 = 36;
  ALLEGRO_KEY_PAD_0 = 37;
  ALLEGRO_KEY_PAD_1 = 38;
  ALLEGRO_KEY_PAD_2 = 39;
  ALLEGRO_KEY_PAD_3 = 40;
  ALLEGRO_KEY_PAD_4 = 41;
  ALLEGRO_KEY_PAD_5 = 42;
  ALLEGRO_KEY_PAD_6 = 43;
  ALLEGRO_KEY_PAD_7 = 44;
  ALLEGRO_KEY_PAD_8 = 45;
  ALLEGRO_KEY_PAD_9 = 46;
  ALLEGRO_KEY_F1 = 47;
  ALLEGRO_KEY_F2 = 48;
  ALLEGRO_KEY_F3 = 49;
  ALLEGRO_KEY_F4 = 50;
  ALLEGRO_KEY_F5 = 51;
  ALLEGRO_KEY_F6 = 52;
  ALLEGRO_KEY_F7 = 53;
  ALLEGRO_KEY_F8 = 54;
  ALLEGRO_KEY_F9 = 55;
  ALLEGRO_KEY_F10 = 56;
  ALLEGRO_KEY_F11 = 57;
  ALLEGRO_KEY_F12 = 58;
  ALLEGRO_KEY_ESCAPE = 59;
  ALLEGRO_KEY_TILDE = 60;
  ALLEGRO_KEY_MINUS = 61;
  ALLEGRO_KEY_EQUALS = 62;
  ALLEGRO_KEY_BACKSPACE = 63;
  ALLEGRO_KEY_TAB = 64;
  ALLEGRO_KEY_OPENBRACE = 65;
  ALLEGRO_KEY_CLOSEBRACE = 66;
  ALLEGRO_KEY_ENTER = 67;
  ALLEGRO_KEY_SEMICOLON = 68;
  ALLEGRO_KEY_QUOTE = 69;
  ALLEGRO_KEY_BACKSLASH = 70;
  ALLEGRO_KEY_BACKSLASH2 = 71;
  ALLEGRO_KEY_COMMA = 72;
  ALLEGRO_KEY_FULLSTOP = 73;
  ALLEGRO_KEY_SLASH = 74;
  ALLEGRO_KEY_SPACE = 75;
  ALLEGRO_KEY_INSERT = 76;
  ALLEGRO_KEY_DELETE = 77;
  ALLEGRO_KEY_HOME = 78;
  ALLEGRO_KEY_END = 79;
  ALLEGRO_KEY_PGUP = 80;
  ALLEGRO_KEY_PGDN = 81;
  ALLEGRO_KEY_LEFT = 82;
  ALLEGRO_KEY_RIGHT = 83;
  ALLEGRO_KEY_UP = 84;
  ALLEGRO_KEY_DOWN = 85;
  ALLEGRO_KEY_PAD_SLASH = 86;
  ALLEGRO_KEY_PAD_ASTERISK = 87;
  ALLEGRO_KEY_PAD_MINUS = 88;
  ALLEGRO_KEY_PAD_PLUS = 89;
  ALLEGRO_KEY_PAD_DELETE = 90;
  ALLEGRO_KEY_PAD_ENTER = 91;
  ALLEGRO_KEY_PRINTSCREEN = 92;
  ALLEGRO_KEY_PAUSE = 93;
  ALLEGRO_KEY_ABNT_C1 = 94;
  ALLEGRO_KEY_YEN = 95;
  ALLEGRO_KEY_KANA = 96;
  ALLEGRO_KEY_CONVERT = 97;
  ALLEGRO_KEY_NOCONVERT = 98;
  ALLEGRO_KEY_AT = 99;
  ALLEGRO_KEY_CIRCUMFLEX = 100;
  ALLEGRO_KEY_COLON2 = 101;
  ALLEGRO_KEY_KANJI = 102;
  ALLEGRO_KEY_PAD_EQUALS = 103;
  ALLEGRO_KEY_BACKQUOTE = 104;
  ALLEGRO_KEY_SEMICOLON2 = 105;
  ALLEGRO_KEY_COMMAND = 106;
  ALLEGRO_KEY_BACK = 107;
  ALLEGRO_KEY_VOLUME_UP = 108;
  ALLEGRO_KEY_VOLUME_DOWN = 109;
  ALLEGRO_KEY_SEARCH = 110;
  ALLEGRO_KEY_DPAD_CENTER = 111;
  ALLEGRO_KEY_BUTTON_X = 112;
  ALLEGRO_KEY_BUTTON_Y = 113;
  ALLEGRO_KEY_DPAD_UP = 114;
  ALLEGRO_KEY_DPAD_DOWN = 115;
  ALLEGRO_KEY_DPAD_LEFT = 116;
  ALLEGRO_KEY_DPAD_RIGHT = 117;
  ALLEGRO_KEY_SELECT = 118;
  ALLEGRO_KEY_START = 119;
  ALLEGRO_KEY_BUTTON_L1 = 120;
  ALLEGRO_KEY_BUTTON_R1 = 121;
  ALLEGRO_KEY_BUTTON_L2 = 122;
  ALLEGRO_KEY_BUTTON_R2 = 123;
  ALLEGRO_KEY_BUTTON_A = 124;
  ALLEGRO_KEY_BUTTON_B = 125;
  ALLEGRO_KEY_THUMBL = 126;
  ALLEGRO_KEY_THUMBR = 127;
  ALLEGRO_KEY_UNKNOWN = 128;
  ALLEGRO_KEY_MODIFIERS = 215;
  ALLEGRO_KEY_LSHIFT = 215;
  ALLEGRO_KEY_RSHIFT = 216;
  ALLEGRO_KEY_LCTRL = 217;
  ALLEGRO_KEY_RCTRL = 218;
  ALLEGRO_KEY_ALT = 219;
  ALLEGRO_KEY_ALTGR = 220;
  ALLEGRO_KEY_LWIN = 221;
  ALLEGRO_KEY_RWIN = 222;
  ALLEGRO_KEY_MENU = 223;
  ALLEGRO_KEY_SCROLLLOCK = 224;
  ALLEGRO_KEY_NUMLOCK = 225;
  ALLEGRO_KEY_CAPSLOCK = 226;
  ALLEGRO_KEY_MAX = 227;

const
  ALLEGRO_KEYMOD_SHIFT = 1;
  ALLEGRO_KEYMOD_CTRL = 2;
  ALLEGRO_KEYMOD_ALT = 4;
  ALLEGRO_KEYMOD_LWIN = 8;
  ALLEGRO_KEYMOD_RWIN = 16;
  ALLEGRO_KEYMOD_MENU = 32;
  ALLEGRO_KEYMOD_ALTGR = 64;
  ALLEGRO_KEYMOD_COMMAND = 128;
  ALLEGRO_KEYMOD_SCROLLLOCK = 256;
  ALLEGRO_KEYMOD_NUMLOCK = 512;
  ALLEGRO_KEYMOD_CAPSLOCK = 1024;
  ALLEGRO_KEYMOD_INALTSEQ = 2048;
  ALLEGRO_KEYMOD_ACCENT1 = 4096;
  ALLEGRO_KEYMOD_ACCENT2 = 8192;
  ALLEGRO_KEYMOD_ACCENT3 = 16384;
  ALLEGRO_KEYMOD_ACCENT4 = 32768;

type
  ALLEGRO_MOUSE_BUTTON = Integer;
  PALLEGRO_MOUSE_BUTTON = ^ALLEGRO_MOUSE_BUTTON;

const
  ALLEGRO_MOUSE_BUTTON_LEFT = 1;
  ALLEGRO_MOUSE_BUTTON_RIGHT = 2;
  ALLEGRO_MOUSE_BUTTON_MIDDLE = 3;

type
  ALLEGRO_MOUSE_EMULATION_MODE = Integer;
  PALLEGRO_MOUSE_EMULATION_MODE = ^ALLEGRO_MOUSE_EMULATION_MODE;

const
  ALLEGRO_MOUSE_EMULATION_NONE = 0;
  ALLEGRO_MOUSE_EMULATION_TRANSPARENT = 1;
  ALLEGRO_MOUSE_EMULATION_INCLUSIVE = 2;
  ALLEGRO_MOUSE_EMULATION_EXCLUSIVE = 3;
  ALLEGRO_MOUSE_EMULATION_5_0_x = 4;

type
  ALLEGRO_HAPTIC_CONSTANTS = Integer;
  PALLEGRO_HAPTIC_CONSTANTS = ^ALLEGRO_HAPTIC_CONSTANTS;

const
  ALLEGRO_HAPTIC_RUMBLE = 1;
  ALLEGRO_HAPTIC_PERIODIC = 2;
  ALLEGRO_HAPTIC_CONSTANT = 4;
  ALLEGRO_HAPTIC_SPRING = 8;
  ALLEGRO_HAPTIC_FRICTION = 16;
  ALLEGRO_HAPTIC_DAMPER = 32;
  ALLEGRO_HAPTIC_INERTIA = 64;
  ALLEGRO_HAPTIC_RAMP = 128;
  ALLEGRO_HAPTIC_SQUARE = 256;
  ALLEGRO_HAPTIC_TRIANGLE = 512;
  ALLEGRO_HAPTIC_SINE = 1024;
  ALLEGRO_HAPTIC_SAW_UP = 2048;
  ALLEGRO_HAPTIC_SAW_DOWN = 4096;
  ALLEGRO_HAPTIC_CUSTOM = 8192;
  ALLEGRO_HAPTIC_GAIN = 16384;
  ALLEGRO_HAPTIC_ANGLE = 32768;
  ALLEGRO_HAPTIC_RADIUS = 65536;
  ALLEGRO_HAPTIC_AZIMUTH = 131072;
  ALLEGRO_HAPTIC_AUTOCENTER = 262144;

const
  ALLEGRO_DEFAULT_DISPLAY_ADAPTER = -1;

type
  ALLEGRO_SYSTEM_MOUSE_CURSOR = Integer;
  PALLEGRO_SYSTEM_MOUSE_CURSOR = ^ALLEGRO_SYSTEM_MOUSE_CURSOR;

const
  ALLEGRO_SYSTEM_MOUSE_CURSOR_NONE = 0;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT = 1;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW = 2;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY = 3;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION = 4;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT = 5;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE = 6;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N = 7;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W = 8;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S = 9;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E = 10;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW = 11;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW = 12;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE = 13;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE = 14;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS = 15;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION = 16;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK = 17;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT = 18;
  ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE = 19;
  ALLEGRO_NUM_SYSTEM_MOUSE_CURSORS = 20;

type
  ALLEGRO_RENDER_STATE = Integer;
  PALLEGRO_RENDER_STATE = ^ALLEGRO_RENDER_STATE;

const
  ALLEGRO_ALPHA_TEST = 16;
  ALLEGRO_WRITE_MASK = 17;
  ALLEGRO_DEPTH_TEST = 18;
  ALLEGRO_DEPTH_FUNCTION = 19;
  ALLEGRO_ALPHA_FUNCTION = 20;
  ALLEGRO_ALPHA_TEST_VALUE = 21;

type
  ALLEGRO_RENDER_FUNCTION = Integer;
  PALLEGRO_RENDER_FUNCTION = ^ALLEGRO_RENDER_FUNCTION;

const
  ALLEGRO_RENDER_NEVER = 0;
  ALLEGRO_RENDER_ALWAYS = 1;
  ALLEGRO_RENDER_LESS = 2;
  ALLEGRO_RENDER_EQUAL = 3;
  ALLEGRO_RENDER_LESS_EQUAL = 4;
  ALLEGRO_RENDER_GREATER = 5;
  ALLEGRO_RENDER_NOT_EQUAL = 6;
  ALLEGRO_RENDER_GREATER_EQUAL = 7;

type
  ALLEGRO_WRITE_MASK_FLAGS = Integer;
  PALLEGRO_WRITE_MASK_FLAGS = ^ALLEGRO_WRITE_MASK_FLAGS;

const
  ALLEGRO_MASK_RED = 1;
  ALLEGRO_MASK_GREEN = 2;
  ALLEGRO_MASK_BLUE = 4;
  ALLEGRO_MASK_ALPHA = 8;
  ALLEGRO_MASK_DEPTH = 16;
  ALLEGRO_MASK_RGB = 7;
  ALLEGRO_MASK_RGBA = 15;

type
  ALLEGRO_SHADER_TYPE = Integer;
  PALLEGRO_SHADER_TYPE = ^ALLEGRO_SHADER_TYPE;

const
  ALLEGRO_VERTEX_SHADER = 1;
  ALLEGRO_PIXEL_SHADER = 2;

type
  ALLEGRO_SHADER_PLATFORM = Integer;
  PALLEGRO_SHADER_PLATFORM = ^ALLEGRO_SHADER_PLATFORM;

const
  ALLEGRO_SHADER_AUTO = 0;
  ALLEGRO_SHADER_GLSL = 1;
  ALLEGRO_SHADER_HLSL = 2;
  ALLEGRO_SHADER_AUTO_MINIMAL = 3;
  ALLEGRO_SHADER_GLSL_MINIMAL = 4;
  ALLEGRO_SHADER_HLSL_MINIMAL = 5;
  ALLEGRO_SHADER_HLSL_SM_3_0 = 6;

type
  ALLEGRO_SYSTEM_ID = Integer;
  PALLEGRO_SYSTEM_ID = ^ALLEGRO_SYSTEM_ID;

const
  ALLEGRO_SYSTEM_ID_UNKNOWN = 0;
  ALLEGRO_SYSTEM_ID_XGLX = 1481067608;
  ALLEGRO_SYSTEM_ID_WINDOWS = 1464421956;
  ALLEGRO_SYSTEM_ID_MACOSX = 1330862112;
  ALLEGRO_SYSTEM_ID_ANDROID = 1095648338;
  ALLEGRO_SYSTEM_ID_IPHONE = 1229998159;
  ALLEGRO_SYSTEM_ID_GP2XWIZ = 1464424992;
  ALLEGRO_SYSTEM_ID_RASPBERRYPI = 1380012880;
  ALLEGRO_SYSTEM_ID_SDL = 1396984882;

const
  ALLEGRO_RESOURCES_PATH = 0;
  ALLEGRO_TEMP_PATH = 1;
  ALLEGRO_USER_DATA_PATH = 2;
  ALLEGRO_USER_HOME_PATH = 3;
  ALLEGRO_USER_SETTINGS_PATH = 4;
  ALLEGRO_USER_DOCUMENTS_PATH = 5;
  ALLEGRO_EXENAME_PATH = 6;
  ALLEGRO_LAST_PATH = 7;

type
  ALLEGRO_STATE_FLAGS = Integer;
  PALLEGRO_STATE_FLAGS = ^ALLEGRO_STATE_FLAGS;

const
  ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS = 1;
  ALLEGRO_STATE_NEW_BITMAP_PARAMETERS = 2;
  ALLEGRO_STATE_DISPLAY = 4;
  ALLEGRO_STATE_TARGET_BITMAP = 8;
  ALLEGRO_STATE_BLENDER = 16;
  ALLEGRO_STATE_NEW_FILE_INTERFACE = 32;
  ALLEGRO_STATE_TRANSFORM = 64;
  ALLEGRO_STATE_PROJECTION_TRANSFORM = 256;
  ALLEGRO_STATE_BITMAP = 10;
  ALLEGRO_STATE_ALL = 65535;

type
  ALLEGRO_AUDIO_EVENT_TYPE = Integer;
  PALLEGRO_AUDIO_EVENT_TYPE = ^ALLEGRO_AUDIO_EVENT_TYPE;

const
  _KCM_STREAM_FEEDER_QUIT_EVENT_TYPE = 512;
  ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT = 513;
  ALLEGRO_EVENT_AUDIO_STREAM_FINISHED = 514;
  ALLEGRO_EVENT_AUDIO_RECORDER_FRAGMENT = 515;

type
  ALLEGRO_AUDIO_DEPTH = Integer;
  PALLEGRO_AUDIO_DEPTH = ^ALLEGRO_AUDIO_DEPTH;

const
  ALLEGRO_AUDIO_DEPTH_INT8 = 0;
  ALLEGRO_AUDIO_DEPTH_INT16 = 1;
  ALLEGRO_AUDIO_DEPTH_INT24 = 2;
  ALLEGRO_AUDIO_DEPTH_FLOAT32 = 3;
  ALLEGRO_AUDIO_DEPTH_UNSIGNED = 8;
  ALLEGRO_AUDIO_DEPTH_UINT8 = 8;
  ALLEGRO_AUDIO_DEPTH_UINT16 = 9;
  ALLEGRO_AUDIO_DEPTH_UINT24 = 10;

type
  ALLEGRO_CHANNEL_CONF = Integer;
  PALLEGRO_CHANNEL_CONF = ^ALLEGRO_CHANNEL_CONF;

const
  ALLEGRO_CHANNEL_CONF_1 = 16;
  ALLEGRO_CHANNEL_CONF_2 = 32;
  ALLEGRO_CHANNEL_CONF_3 = 48;
  ALLEGRO_CHANNEL_CONF_4 = 64;
  ALLEGRO_CHANNEL_CONF_5_1 = 81;
  ALLEGRO_CHANNEL_CONF_6_1 = 97;
  ALLEGRO_CHANNEL_CONF_7_1 = 113;

type
  ALLEGRO_PLAYMODE = Integer;
  PALLEGRO_PLAYMODE = ^ALLEGRO_PLAYMODE;

const
  ALLEGRO_PLAYMODE_ONCE = 256;
  ALLEGRO_PLAYMODE_LOOP = 257;
  ALLEGRO_PLAYMODE_BIDIR = 258;
  _ALLEGRO_PLAYMODE_STREAM_ONCE = 259;
  _ALLEGRO_PLAYMODE_STREAM_ONEDIR = 260;
  ALLEGRO_PLAYMODE_LOOP_ONCE = 261;
  _ALLEGRO_PLAYMODE_STREAM_LOOP_ONCE = 262;

type
  ALLEGRO_MIXER_QUALITY = Integer;
  PALLEGRO_MIXER_QUALITY = ^ALLEGRO_MIXER_QUALITY;

const
  ALLEGRO_MIXER_QUALITY_POINT = 272;
  ALLEGRO_MIXER_QUALITY_LINEAR = 273;
  ALLEGRO_MIXER_QUALITY_CUBIC = 274;

const
  ALLEGRO_NO_KERNING = -1;
  ALLEGRO_ALIGN_LEFT = 0;
  ALLEGRO_ALIGN_CENTRE = 1;
  ALLEGRO_ALIGN_CENTER = 1;
  ALLEGRO_ALIGN_RIGHT = 2;
  ALLEGRO_ALIGN_INTEGER = 4;

const
  ALLEGRO_FILECHOOSER_FILE_MUST_EXIST = 1;
  ALLEGRO_FILECHOOSER_SAVE = 2;
  ALLEGRO_FILECHOOSER_FOLDER = 4;
  ALLEGRO_FILECHOOSER_PICTURES = 8;
  ALLEGRO_FILECHOOSER_SHOW_HIDDEN = 16;
  ALLEGRO_FILECHOOSER_MULTIPLE = 32;

const
  ALLEGRO_MESSAGEBOX_WARN = 1;
  ALLEGRO_MESSAGEBOX_ERROR = 2;
  ALLEGRO_MESSAGEBOX_OK_CANCEL = 4;
  ALLEGRO_MESSAGEBOX_YES_NO = 8;
  ALLEGRO_MESSAGEBOX_QUESTION = 16;

const
  ALLEGRO_TEXTLOG_NO_CLOSE = 1;
  ALLEGRO_TEXTLOG_MONOSPACE = 2;

const
  ALLEGRO_EVENT_NATIVE_DIALOG_CLOSE = 600;
  ALLEGRO_EVENT_MENU_CLICK = 601;

const
  ALLEGRO_MENU_ITEM_ENABLED = 0;
  ALLEGRO_MENU_ITEM_CHECKBOX = 1;
  ALLEGRO_MENU_ITEM_CHECKED = 2;
  ALLEGRO_MENU_ITEM_DISABLED = 4;

type
  ALLEGRO_PRIM_TYPE = Integer;
  PALLEGRO_PRIM_TYPE = ^ALLEGRO_PRIM_TYPE;

const
  ALLEGRO_PRIM_LINE_LIST = 0;
  ALLEGRO_PRIM_LINE_STRIP = 1;
  ALLEGRO_PRIM_LINE_LOOP = 2;
  ALLEGRO_PRIM_TRIANGLE_LIST = 3;
  ALLEGRO_PRIM_TRIANGLE_STRIP = 4;
  ALLEGRO_PRIM_TRIANGLE_FAN = 5;
  ALLEGRO_PRIM_POINT_LIST = 6;
  ALLEGRO_PRIM_NUM_TYPES = 7;

const
  ALLEGRO_PRIM_MAX_USER_ATTR = 10;

type
  ALLEGRO_PRIM_ATTR = Integer;
  PALLEGRO_PRIM_ATTR = ^ALLEGRO_PRIM_ATTR;

const
  ALLEGRO_PRIM_POSITION = 1;
  ALLEGRO_PRIM_COLOR_ATTR = 2;
  ALLEGRO_PRIM_TEX_COORD = 3;
  ALLEGRO_PRIM_TEX_COORD_PIXEL = 4;
  ALLEGRO_PRIM_USER_ATTR = 5;
  ALLEGRO_PRIM_ATTR_NUM = 15;

type
  ALLEGRO_PRIM_STORAGE = Integer;
  PALLEGRO_PRIM_STORAGE = ^ALLEGRO_PRIM_STORAGE;

const
  ALLEGRO_PRIM_FLOAT_2 = 0;
  ALLEGRO_PRIM_FLOAT_3 = 1;
  ALLEGRO_PRIM_SHORT_2 = 2;
  ALLEGRO_PRIM_FLOAT_1 = 3;
  ALLEGRO_PRIM_FLOAT_4 = 4;
  ALLEGRO_PRIM_UBYTE_4 = 5;
  ALLEGRO_PRIM_SHORT_4 = 6;
  ALLEGRO_PRIM_NORMALIZED_UBYTE_4 = 7;
  ALLEGRO_PRIM_NORMALIZED_SHORT_2 = 8;
  ALLEGRO_PRIM_NORMALIZED_SHORT_4 = 9;
  ALLEGRO_PRIM_NORMALIZED_USHORT_2 = 10;
  ALLEGRO_PRIM_NORMALIZED_USHORT_4 = 11;
  ALLEGRO_PRIM_HALF_FLOAT_2 = 12;
  ALLEGRO_PRIM_HALF_FLOAT_4 = 13;

type
  ALLEGRO_LINE_JOIN = Integer;
  PALLEGRO_LINE_JOIN = ^ALLEGRO_LINE_JOIN;

const
  ALLEGRO_LINE_JOIN_NONE = 0;
  ALLEGRO_LINE_JOIN_BEVEL = 1;
  ALLEGRO_LINE_JOIN_ROUND = 2;
  ALLEGRO_LINE_JOIN_MITER = 3;
  ALLEGRO_LINE_JOIN_MITRE = 3;

type
  ALLEGRO_LINE_CAP = Integer;
  PALLEGRO_LINE_CAP = ^ALLEGRO_LINE_CAP;

const
  ALLEGRO_LINE_CAP_NONE = 0;
  ALLEGRO_LINE_CAP_SQUARE = 1;
  ALLEGRO_LINE_CAP_ROUND = 2;
  ALLEGRO_LINE_CAP_TRIANGLE = 3;
  ALLEGRO_LINE_CAP_CLOSED = 4;

type
  ALLEGRO_PRIM_BUFFER_FLAGS = Integer;
  PALLEGRO_PRIM_BUFFER_FLAGS = ^ALLEGRO_PRIM_BUFFER_FLAGS;

const
  ALLEGRO_PRIM_BUFFER_STREAM = 1;
  ALLEGRO_PRIM_BUFFER_STATIC = 2;
  ALLEGRO_PRIM_BUFFER_DYNAMIC = 4;
  ALLEGRO_PRIM_BUFFER_READWRITE = 8;

type
  ALLEGRO_VIDEO_EVENT_TYPE = Integer;
  PALLEGRO_VIDEO_EVENT_TYPE = ^ALLEGRO_VIDEO_EVENT_TYPE;

const
  ALLEGRO_EVENT_VIDEO_FRAME_SHOW = 550;
  ALLEGRO_EVENT_VIDEO_FINISHED = 551;
  _ALLEGRO_EVENT_VIDEO_SEEK = 552;

type
  ALLEGRO_VIDEO_POSITION_TYPE = Integer;
  PALLEGRO_VIDEO_POSITION_TYPE = ^ALLEGRO_VIDEO_POSITION_TYPE;

const
  ALLEGRO_VIDEO_POSITION_ACTUAL = 0;
  ALLEGRO_VIDEO_POSITION_VIDEO_DECODE = 1;
  ALLEGRO_VIDEO_POSITION_AUDIO_DECODE = 2;

type
  PHYSFS_EnumerateCallbackResult = Integer;
  PPHYSFS_EnumerateCallbackResult = ^PHYSFS_EnumerateCallbackResult;

const
  PHYSFS_ENUM_ERROR = -1;
  PHYSFS_ENUM_STOP = 0;
  PHYSFS_ENUM_OK = 1;

type
  PHYSFS_FileType = Integer;
  PPHYSFS_FileType = ^PHYSFS_FileType;

const
  PHYSFS_FILETYPE_REGULAR = 0;
  PHYSFS_FILETYPE_DIRECTORY = 1;
  PHYSFS_FILETYPE_SYMLINK = 2;
  PHYSFS_FILETYPE_OTHER = 3;

type
  PHYSFS_ErrorCode = Integer;
  PPHYSFS_ErrorCode = ^PHYSFS_ErrorCode;

const
  PHYSFS_ERR_OK = 0;
  PHYSFS_ERR_OTHER_ERROR = 1;
  PHYSFS_ERR_OUT_OF_MEMORY = 2;
  PHYSFS_ERR_NOT_INITIALIZED = 3;
  PHYSFS_ERR_IS_INITIALIZED = 4;
  PHYSFS_ERR_ARGV0_IS_NULL = 5;
  PHYSFS_ERR_UNSUPPORTED = 6;
  PHYSFS_ERR_PAST_EOF = 7;
  PHYSFS_ERR_FILES_STILL_OPEN = 8;
  PHYSFS_ERR_INVALID_ARGUMENT = 9;
  PHYSFS_ERR_NOT_MOUNTED = 10;
  PHYSFS_ERR_NOT_FOUND = 11;
  PHYSFS_ERR_SYMLINK_FORBIDDEN = 12;
  PHYSFS_ERR_NO_WRITE_DIR = 13;
  PHYSFS_ERR_OPEN_FOR_READING = 14;
  PHYSFS_ERR_OPEN_FOR_WRITING = 15;
  PHYSFS_ERR_NOT_A_FILE = 16;
  PHYSFS_ERR_READ_ONLY = 17;
  PHYSFS_ERR_CORRUPT = 18;
  PHYSFS_ERR_SYMLINK_LOOP = 19;
  PHYSFS_ERR_IO = 20;
  PHYSFS_ERR_PERMISSION = 21;
  PHYSFS_ERR_NO_SPACE = 22;
  PHYSFS_ERR_BAD_FILENAME = 23;
  PHYSFS_ERR_BUSY = 24;
  PHYSFS_ERR_DIR_NOT_EMPTY = 25;
  PHYSFS_ERR_OS_ERROR = 26;
  PHYSFS_ERR_DUPLICATE = 27;
  PHYSFS_ERR_BAD_PASSWORD = 28;
  PHYSFS_ERR_APP_CALLBACK = 29;

type
  // Forward declarations
  PPUTF8Char = ^PUTF8Char;
  PUInt16 = ^UInt16;
  PALLEGRO_USER_EVENT_DESCRIPTOR = Pointer;
  PPALLEGRO_USER_EVENT_DESCRIPTOR = ^PALLEGRO_USER_EVENT_DESCRIPTOR;
  PALLEGRO_JOYSTICK_DRIVER = Pointer;
  PPALLEGRO_JOYSTICK_DRIVER = ^PALLEGRO_JOYSTICK_DRIVER;
  PALLEGRO_HAPTIC_DRIVER = Pointer;
  PPALLEGRO_HAPTIC_DRIVER = ^PALLEGRO_HAPTIC_DRIVER;
  PALLEGRO_TIMEOUT = ^ALLEGRO_TIMEOUT;
  PALLEGRO_COLOR = ^ALLEGRO_COLOR;
  P_al_tagbstring = ^_al_tagbstring;
  PALLEGRO_FILE_INTERFACE = ^ALLEGRO_FILE_INTERFACE;
  PALLEGRO_LOCKED_REGION = ^ALLEGRO_LOCKED_REGION;
  PALLEGRO_EVENT_SOURCE = ^ALLEGRO_EVENT_SOURCE;
  PALLEGRO_ANY_EVENT = ^ALLEGRO_ANY_EVENT;
  PALLEGRO_DISPLAY_EVENT = ^ALLEGRO_DISPLAY_EVENT;
  PALLEGRO_JOYSTICK_EVENT = ^ALLEGRO_JOYSTICK_EVENT;
  PALLEGRO_KEYBOARD_EVENT = ^ALLEGRO_KEYBOARD_EVENT;
  PALLEGRO_MOUSE_EVENT = ^ALLEGRO_MOUSE_EVENT;
  PALLEGRO_TIMER_EVENT = ^ALLEGRO_TIMER_EVENT;
  PALLEGRO_TOUCH_EVENT = ^ALLEGRO_TOUCH_EVENT;
  PALLEGRO_USER_EVENT = ^ALLEGRO_USER_EVENT;
  PALLEGRO_DROP_EVENT = ^ALLEGRO_DROP_EVENT;
  PALLEGRO_FS_ENTRY = ^ALLEGRO_FS_ENTRY;
  PALLEGRO_FS_INTERFACE = ^ALLEGRO_FS_INTERFACE;
  PALLEGRO_DISPLAY_MODE = ^ALLEGRO_DISPLAY_MODE;
  PALLEGRO_JOYSTICK_STATE = ^ALLEGRO_JOYSTICK_STATE;
  PALLEGRO_JOYSTICK_GUID = ^ALLEGRO_JOYSTICK_GUID;
  PALLEGRO_KEYBOARD_STATE = ^ALLEGRO_KEYBOARD_STATE;
  PALLEGRO_MOUSE_STATE = ^ALLEGRO_MOUSE_STATE;
  PALLEGRO_TOUCH_STATE = ^ALLEGRO_TOUCH_STATE;
  PALLEGRO_TOUCH_INPUT_STATE = ^ALLEGRO_TOUCH_INPUT_STATE;
  PALLEGRO_HAPTIC_DIRECTION = ^ALLEGRO_HAPTIC_DIRECTION;
  PALLEGRO_HAPTIC_REPLAY = ^ALLEGRO_HAPTIC_REPLAY;
  PALLEGRO_HAPTIC_ENVELOPE = ^ALLEGRO_HAPTIC_ENVELOPE;
  PALLEGRO_HAPTIC_CONSTANT_EFFECT = ^ALLEGRO_HAPTIC_CONSTANT_EFFECT;
  PALLEGRO_HAPTIC_RAMP_EFFECT = ^ALLEGRO_HAPTIC_RAMP_EFFECT;
  PALLEGRO_HAPTIC_CONDITION_EFFECT = ^ALLEGRO_HAPTIC_CONDITION_EFFECT;
  PALLEGRO_HAPTIC_PERIODIC_EFFECT = ^ALLEGRO_HAPTIC_PERIODIC_EFFECT;
  PALLEGRO_HAPTIC_RUMBLE_EFFECT = ^ALLEGRO_HAPTIC_RUMBLE_EFFECT;
  PALLEGRO_HAPTIC_EFFECT = ^ALLEGRO_HAPTIC_EFFECT;
  PALLEGRO_HAPTIC_EFFECT_ID = ^ALLEGRO_HAPTIC_EFFECT_ID;
  PALLEGRO_MEMORY_INTERFACE = ^ALLEGRO_MEMORY_INTERFACE;
  PALLEGRO_MONITOR_INFO = ^ALLEGRO_MONITOR_INFO;
  PALLEGRO_TRANSFORM = ^ALLEGRO_TRANSFORM;
  PALLEGRO_STATE = ^ALLEGRO_STATE;
  PALLEGRO_AUDIO_RECORDER_EVENT = ^ALLEGRO_AUDIO_RECORDER_EVENT;
  PALLEGRO_SAMPLE_ID = ^ALLEGRO_SAMPLE_ID;
  PALLEGRO_GLYPH = ^ALLEGRO_GLYPH;
  PALLEGRO_MENU_INFO = ^ALLEGRO_MENU_INFO;
  PALLEGRO_VERTEX_ELEMENT = ^ALLEGRO_VERTEX_ELEMENT;
  PALLEGRO_VERTEX = ^ALLEGRO_VERTEX;
  PPHYSFS_File = ^PHYSFS_File;
  PPHYSFS_ArchiveInfo = ^PHYSFS_ArchiveInfo;
  PPPHYSFS_ArchiveInfo = ^PPHYSFS_ArchiveInfo;
  PPHYSFS_Version = ^PHYSFS_Version;
  PPHYSFS_Allocator = ^PHYSFS_Allocator;
  PPHYSFS_Stat = ^PHYSFS_Stat;
  PPHYSFS_Io = ^PHYSFS_Io;
  PPHYSFS_Archiver = ^PHYSFS_Archiver;
  Ptm_zip_s = ^tm_zip_s;
  Pzip_fileinfo = ^zip_fileinfo;
  Ptm_unz_s = ^tm_unz_s;
  Punz_file_info64_s = ^unz_file_info64_s;

  ALLEGRO_TIMEOUT = record
    __pad1__: UInt64;
    __pad2__: UInt64;
  end;

  ALLEGRO_COLOR = record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;


  _al_tagbstring = record
    mlen: Integer;
    slen: Integer;
    data: PByte;
  end;
  PALLEGRO_BITMAP = Pointer;
  PPALLEGRO_BITMAP = ^PALLEGRO_BITMAP;
  ALLEGRO_USTR = _al_tagbstring;
  PALLEGRO_USTR = ^ALLEGRO_USTR;
  ALLEGRO_USTR_INFO = _al_tagbstring;
  PALLEGRO_USTR_INFO = ^ALLEGRO_USTR_INFO;
  off_t = Int64;

  PALLEGRO_PATH = Pointer;
  PPALLEGRO_PATH = ^PALLEGRO_PATH;
  PALLEGRO_FILE = Pointer;
  PPALLEGRO_FILE = ^PALLEGRO_FILE;

  ALLEGRO_FILE_INTERFACE = record
    fi_fopen: function(const path: PUTF8Char; const mode: PUTF8Char): Pointer; cdecl;
    fi_fclose: function(handle: PALLEGRO_FILE): Boolean; cdecl;
    fi_fread: function(f: PALLEGRO_FILE; ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
    fi_fwrite: function(f: PALLEGRO_FILE; const ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
    fi_fflush: function(f: PALLEGRO_FILE): Boolean; cdecl;
    fi_ftell: function(f: PALLEGRO_FILE): Int64; cdecl;
    fi_fseek: function(f: PALLEGRO_FILE; offset: Int64; whence: Integer): Boolean; cdecl;
    fi_feof: function(f: PALLEGRO_FILE): Boolean; cdecl;
    fi_ferror: function(f: PALLEGRO_FILE): Integer; cdecl;
    fi_ferrmsg: function(f: PALLEGRO_FILE): PUTF8Char; cdecl;
    fi_fclearerr: procedure(f: PALLEGRO_FILE); cdecl;
    fi_fungetc: function(f: PALLEGRO_FILE; c: Integer): Integer; cdecl;
    fi_fsize: function(f: PALLEGRO_FILE): off_t; cdecl;
  end;

  ALLEGRO_IIO_LOADER_FUNCTION = function(const filename: PUTF8Char; flags: Integer): PALLEGRO_BITMAP; cdecl;

  ALLEGRO_IIO_FS_LOADER_FUNCTION = function(fp: PALLEGRO_FILE; flags: Integer): PALLEGRO_BITMAP; cdecl;

  ALLEGRO_IIO_SAVER_FUNCTION = function(const filename: PUTF8Char; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;

  ALLEGRO_IIO_FS_SAVER_FUNCTION = function(fp: PALLEGRO_FILE; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;

  ALLEGRO_IIO_IDENTIFIER_FUNCTION = function(f: PALLEGRO_FILE): Boolean; cdecl;

  ALLEGRO_LOCKED_REGION = record
    data: Pointer;
    format: Integer;
    pitch: Integer;
    pixel_size: Integer;
  end;

  ALLEGRO_EVENT_TYPE = Cardinal;

  ALLEGRO_EVENT_SOURCE = record
    __pad: array [0..31] of Integer;
  end;

  ALLEGRO_ANY_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_EVENT_SOURCE;
    timestamp: Double;
  end;
  PALLEGRO_EVENT_QUEUE = Pointer;
  PPALLEGRO_EVENT_QUEUE = ^PALLEGRO_EVENT_QUEUE;
  PALLEGRO_DISPLAY = Pointer;
  PPALLEGRO_DISPLAY = ^PALLEGRO_DISPLAY;
  PALLEGRO_CONFIG = Pointer;
  PPALLEGRO_CONFIG = ^PALLEGRO_CONFIG;
  PALLEGRO_CONFIG_SECTION = Pointer;
  PPALLEGRO_CONFIG_SECTION = ^PALLEGRO_CONFIG_SECTION;
  PALLEGRO_CONFIG_ENTRY = Pointer;
  PPALLEGRO_CONFIG_ENTRY = ^PALLEGRO_CONFIG_ENTRY;
  PALLEGRO_JOYSTICK = Pointer;
  PPALLEGRO_JOYSTICK = ^PALLEGRO_JOYSTICK;
  PALLEGRO_KEYBOARD = Pointer;
  PPALLEGRO_KEYBOARD = ^PALLEGRO_KEYBOARD;
  PALLEGRO_MOUSE = Pointer;
  PPALLEGRO_MOUSE = ^PALLEGRO_MOUSE;
  PALLEGRO_TIMER = Pointer;
  PPALLEGRO_TIMER = ^PALLEGRO_TIMER;
  PALLEGRO_TOUCH_INPUT = Pointer;
  PPALLEGRO_TOUCH_INPUT = ^PALLEGRO_TOUCH_INPUT;
  PALLEGRO_AUDIO_RECORDER = Pointer;
  PPALLEGRO_AUDIO_RECORDER = ^PALLEGRO_AUDIO_RECORDER;

  ALLEGRO_DISPLAY_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_DISPLAY;
    timestamp: Double;
    x: Integer;
    y: Integer;
    width: Integer;
    height: Integer;
    orientation: Integer;
  end;

  ALLEGRO_JOYSTICK_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_JOYSTICK;
    timestamp: Double;
    id: PALLEGRO_JOYSTICK;
    stick: Integer;
    axis: Integer;
    pos: Single;
    button: Integer;
  end;

  ALLEGRO_KEYBOARD_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_KEYBOARD;
    timestamp: Double;
    display: PALLEGRO_DISPLAY;
    keycode: Integer;
    unichar: Integer;
    modifiers: Cardinal;
    &repeat: Boolean;
  end;

  ALLEGRO_MOUSE_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_MOUSE;
    timestamp: Double;
    display: PALLEGRO_DISPLAY;
    x: Integer;
    y: Integer;
    z: Integer;
    w: Integer;
    dx: Integer;
    dy: Integer;
    dz: Integer;
    dw: Integer;
    button: Cardinal;
    pressure: Single;
  end;

  ALLEGRO_TIMER_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_TIMER;
    timestamp: Double;
    count: Int64;
    error: Double;
  end;

  ALLEGRO_TOUCH_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_TOUCH_INPUT;
    timestamp: Double;
    display: PALLEGRO_DISPLAY;
    id: Integer;
    x: Single;
    y: Single;
    dx: Single;
    dy: Single;
    primary: Boolean;
  end;

  ALLEGRO_USER_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_EVENT_SOURCE;
    timestamp: Double;
    __internal__descr: PALLEGRO_USER_EVENT_DESCRIPTOR;
    data1: IntPtr;
    data2: IntPtr;
    data3: IntPtr;
    data4: IntPtr;
  end;

  ALLEGRO_DROP_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_DISPLAY;
    timestamp: Double;
    x: Integer;
    y: Integer;
    row: Integer;
    is_file: Boolean;
    text: PUTF8Char;
    is_complete: Boolean;
  end;

  PALLEGRO_EVENT = ^ALLEGRO_EVENT;
  ALLEGRO_EVENT = record
    case Integer of
      0: (&type: ALLEGRO_EVENT_TYPE);
      1: (any: ALLEGRO_ANY_EVENT);
      2: (display: ALLEGRO_DISPLAY_EVENT);
      3: (joystick: ALLEGRO_JOYSTICK_EVENT);
      4: (keyboard: ALLEGRO_KEYBOARD_EVENT);
      5: (mouse: ALLEGRO_MOUSE_EVENT);
      6: (timer: ALLEGRO_TIMER_EVENT);
      7: (touch: ALLEGRO_TOUCH_EVENT);
      8: (user: ALLEGRO_USER_EVENT);
      9: (drop: ALLEGRO_DROP_EVENT);
  end;

  al_fixed = Int32;

  ALLEGRO_FS_ENTRY = record
    vtable: PALLEGRO_FS_INTERFACE;
  end;

  ALLEGRO_FS_INTERFACE = record
    fs_create_entry: function(const path: PUTF8Char): PALLEGRO_FS_ENTRY; cdecl;
    fs_destroy_entry: procedure(e: PALLEGRO_FS_ENTRY); cdecl;
    fs_entry_name: function(e: PALLEGRO_FS_ENTRY): PUTF8Char; cdecl;
    fs_update_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_entry_mode: function(e: PALLEGRO_FS_ENTRY): UInt32; cdecl;
    fs_entry_atime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
    fs_entry_mtime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
    fs_entry_ctime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
    fs_entry_size: function(e: PALLEGRO_FS_ENTRY): off_t; cdecl;
    fs_entry_exists: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_remove_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_open_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_read_directory: function(e: PALLEGRO_FS_ENTRY): PALLEGRO_FS_ENTRY; cdecl;
    fs_close_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
    fs_filename_exists: function(const path: PUTF8Char): Boolean; cdecl;
    fs_remove_filename: function(const path: PUTF8Char): Boolean; cdecl;
    fs_get_current_directory: function(): PUTF8Char; cdecl;
    fs_change_directory: function(const path: PUTF8Char): Boolean; cdecl;
    fs_make_directory: function(const path: PUTF8Char): Boolean; cdecl;
    fs_open_file: function(e: PALLEGRO_FS_ENTRY; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  end;

  ALLEGRO_DISPLAY_MODE = record
    width: Integer;
    height: Integer;
    format: Integer;
    refresh_rate: Integer;
  end;


  P_anonymous_type_20 = ^_anonymous_type_20;
  _anonymous_type_20 = record
    axis: array [0..4] of Single;
  end;

  ALLEGRO_JOYSTICK_STATE = record
    stick: array [0..15] of _anonymous_type_20;
    button: array [0..31] of Integer;
  end;

  ALLEGRO_JOYSTICK_GUID = record
    val: array [0..15] of UInt8;
  end;


  ALLEGRO_KEYBOARD_STATE = record
    display: PALLEGRO_DISPLAY;
    __key_down__internal__: array [0..7] of Cardinal;
  end;


  ALLEGRO_MOUSE_STATE = record
    x: Integer;
    y: Integer;
    z: Integer;
    w: Integer;
    more_axes: array [0..3] of Integer;
    buttons: Integer;
    pressure: Single;
    display: PALLEGRO_DISPLAY;
  end;


  ALLEGRO_TOUCH_STATE = record
    id: Integer;
    x: Single;
    y: Single;
    dx: Single;
    dy: Single;
    primary: Boolean;
    display: PALLEGRO_DISPLAY;
  end;

  ALLEGRO_TOUCH_INPUT_STATE = record
    touches: array [0..15] of ALLEGRO_TOUCH_STATE;
  end;

  PALLEGRO_HAPTIC = Pointer;
  PPALLEGRO_HAPTIC = ^PALLEGRO_HAPTIC;

  ALLEGRO_HAPTIC_DIRECTION = record
    angle: Double;
    radius: Double;
    azimuth: Double;
  end;

  ALLEGRO_HAPTIC_REPLAY = record
    length: Double;
    delay: Double;
  end;

  ALLEGRO_HAPTIC_ENVELOPE = record
    attack_length: Double;
    attack_level: Double;
    fade_length: Double;
    fade_level: Double;
  end;

  ALLEGRO_HAPTIC_CONSTANT_EFFECT = record
    level: Double;
    envelope: ALLEGRO_HAPTIC_ENVELOPE;
  end;

  ALLEGRO_HAPTIC_RAMP_EFFECT = record
    start_level: Double;
    end_level: Double;
    envelope: ALLEGRO_HAPTIC_ENVELOPE;
  end;

  ALLEGRO_HAPTIC_CONDITION_EFFECT = record
    right_saturation: Double;
    left_saturation: Double;
    right_coeff: Double;
    left_coeff: Double;
    deadband: Double;
    center: Double;
  end;

  ALLEGRO_HAPTIC_PERIODIC_EFFECT = record
    waveform: Integer;
    period: Double;
    magnitude: Double;
    offset: Double;
    phase: Double;
    envelope: ALLEGRO_HAPTIC_ENVELOPE;
    custom_len: Integer;
    custom_data: PDouble;
  end;

  ALLEGRO_HAPTIC_RUMBLE_EFFECT = record
    strong_magnitude: Double;
    weak_magnitude: Double;
  end;

  ALLEGRO_HAPTIC_EFFECT_UNION = record
    case Integer of
      0: (constant: ALLEGRO_HAPTIC_CONSTANT_EFFECT);
      1: (ramp: ALLEGRO_HAPTIC_RAMP_EFFECT);
      2: (periodic: ALLEGRO_HAPTIC_PERIODIC_EFFECT);
      3: (condition: ALLEGRO_HAPTIC_CONDITION_EFFECT);
      4: (rumble: ALLEGRO_HAPTIC_RUMBLE_EFFECT);
  end;

  ALLEGRO_HAPTIC_EFFECT = record
    &type: Integer;
    direction: ALLEGRO_HAPTIC_DIRECTION;
    replay: ALLEGRO_HAPTIC_REPLAY;
    data: ALLEGRO_HAPTIC_EFFECT_UNION;
  end;

  ALLEGRO_HAPTIC_EFFECT_ID = record
    _haptic: PALLEGRO_HAPTIC;
    _id: Integer;
    _handle: Integer;
    _pointer: Pointer;
    _effect_duration: Double;
    _playing: Boolean;
    _start_time: Double;
    _end_time: Double;
    driver: Pointer;
  end;

  ALLEGRO_MEMORY_INTERFACE = record
    mi_malloc: function(n: NativeUInt; line: Integer; const &file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
    mi_free: procedure(ptr: Pointer; line: Integer; const &file: PUTF8Char; const func: PUTF8Char); cdecl;
    mi_realloc: function(ptr: Pointer; n: NativeUInt; line: Integer; const &file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
    mi_calloc: function(count: NativeUInt; n: NativeUInt; line: Integer; const &file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  end;

  ALLEGRO_MONITOR_INFO = record
    x1: Integer;
    y1: Integer;
    x2: Integer;
    y2: Integer;
  end;

  PALLEGRO_MOUSE_CURSOR = Pointer;
  PPALLEGRO_MOUSE_CURSOR = ^PALLEGRO_MOUSE_CURSOR;

  ALLEGRO_TRANSFORM = record
    m: array [0..3] of array [0..3] of Single;
  end;

  PALLEGRO_SHADER = Pointer;
  PPALLEGRO_SHADER = ^PALLEGRO_SHADER;
  PALLEGRO_SYSTEM = Pointer;
  PPALLEGRO_SYSTEM = ^PALLEGRO_SYSTEM;
  PALLEGRO_THREAD = Pointer;
  PPALLEGRO_THREAD = ^PALLEGRO_THREAD;
  PALLEGRO_MUTEX = Pointer;
  PPALLEGRO_MUTEX = ^PALLEGRO_MUTEX;
  PALLEGRO_COND = Pointer;
  PPALLEGRO_COND = ^PALLEGRO_COND;

  ALLEGRO_STATE = record
    _tls: array [0..1023] of UTF8Char;
  end;

  ALLEGRO_AUDIO_RECORDER_EVENT = record
    &type: ALLEGRO_EVENT_TYPE;
    source: PALLEGRO_AUDIO_RECORDER;
    timestamp: Double;
    __internal__descr: PALLEGRO_USER_EVENT_DESCRIPTOR;
    buffer: Pointer;
    samples: Cardinal;
  end;

  PALLEGRO_SAMPLE = Pointer;
  PPALLEGRO_SAMPLE = ^PALLEGRO_SAMPLE;

  ALLEGRO_SAMPLE_ID = record
    _index: Integer;
    _id: Integer;
  end;

  PALLEGRO_SAMPLE_INSTANCE = Pointer;
  PPALLEGRO_SAMPLE_INSTANCE = ^PALLEGRO_SAMPLE_INSTANCE;
  PALLEGRO_AUDIO_STREAM = Pointer;
  PPALLEGRO_AUDIO_STREAM = ^PALLEGRO_AUDIO_STREAM;
  PALLEGRO_MIXER = Pointer;
  PPALLEGRO_MIXER = ^PALLEGRO_MIXER;
  PALLEGRO_VOICE = Pointer;
  PPALLEGRO_VOICE = ^PALLEGRO_VOICE;
  PALLEGRO_AUDIO_DEVICE = Pointer;
  PPALLEGRO_AUDIO_DEVICE = ^PALLEGRO_AUDIO_DEVICE;
  PALLEGRO_FONT = Pointer;
  PPALLEGRO_FONT = ^PALLEGRO_FONT;

  ALLEGRO_GLYPH = record
    bitmap: PALLEGRO_BITMAP;
    x: Integer;
    y: Integer;
    w: Integer;
    h: Integer;
    kerning: Integer;
    offset_x: Integer;
    offset_y: Integer;
    advance: Integer;
  end;

  PALLEGRO_FILECHOOSER = Pointer;
  PPALLEGRO_FILECHOOSER = ^PALLEGRO_FILECHOOSER;
  PALLEGRO_TEXTLOG = Pointer;
  PPALLEGRO_TEXTLOG = ^PALLEGRO_TEXTLOG;
  PALLEGRO_MENU = Pointer;
  PPALLEGRO_MENU = ^PALLEGRO_MENU;

  ALLEGRO_MENU_INFO = record
    caption: PUTF8Char;
    id: UInt16;
    flags: Integer;
    icon: PALLEGRO_BITMAP;
  end;

  ALLEGRO_VERTEX_ELEMENT = record
    attribute: Integer;
    storage: Integer;
    offset: Integer;
  end;

  PALLEGRO_VERTEX_DECL = Pointer;
  PPALLEGRO_VERTEX_DECL = ^PALLEGRO_VERTEX_DECL;

  ALLEGRO_VERTEX = record
    x: Single;
    y: Single;
    z: Single;
    u: Single;
    v: Single;
    color: ALLEGRO_COLOR;
  end;

  PALLEGRO_VERTEX_BUFFER = Pointer;
  PPALLEGRO_VERTEX_BUFFER = ^PALLEGRO_VERTEX_BUFFER;
  PALLEGRO_INDEX_BUFFER = Pointer;
  PPALLEGRO_INDEX_BUFFER = ^PALLEGRO_INDEX_BUFFER;
  PALLEGRO_VIDEO = Pointer;
  PPALLEGRO_VIDEO = ^PALLEGRO_VIDEO;
  PHYSFS_uint8 = Byte;
  PHYSFS_sint8 = UTF8Char;
  PHYSFS_uint16 = Word;
  PPHYSFS_uint16 = ^PHYSFS_uint16;
  PHYSFS_sint16 = Smallint;
  PPHYSFS_sint16 = ^PHYSFS_sint16;
  PHYSFS_uint32 = Cardinal;
  PPHYSFS_uint32 = ^PHYSFS_uint32;
  PHYSFS_sint32 = Integer;
  PPHYSFS_sint32 = ^PHYSFS_sint32;
  PHYSFS_sint64 = Int64;
  PPHYSFS_sint64 = ^PHYSFS_sint64;
  PHYSFS_uint64 = UInt64;
  PPHYSFS_uint64 = ^PHYSFS_uint64;
  PHYSFS_compile_time_assert_uint8IsOneByte = array [0..0] of Integer;
  PHYSFS_compile_time_assert_sint8IsOneByte = array [0..0] of Integer;
  PHYSFS_compile_time_assert_uint16IsTwoBytes = array [0..0] of Integer;
  PHYSFS_compile_time_assert_sint16IsTwoBytes = array [0..0] of Integer;
  PHYSFS_compile_time_assert_uint32IsFourBytes = array [0..0] of Integer;
  PHYSFS_compile_time_assert_sint32IsFourBytes = array [0..0] of Integer;
  PHYSFS_compile_time_assert_uint64IsEightBytes = array [0..0] of Integer;
  PHYSFS_compile_time_assert_sint64IsEightBytes = array [0..0] of Integer;

  PHYSFS_File = record
    opaque: Pointer;
  end;

  PHYSFS_ArchiveInfo = record
    extension: PUTF8Char;
    description: PUTF8Char;
    author: PUTF8Char;
    url: PUTF8Char;
    supportsSymlinks: Integer;
  end;

  PHYSFS_Version = record
    major: PHYSFS_uint8;
    minor: PHYSFS_uint8;
    patch: PHYSFS_uint8;
  end;

  PHYSFS_Allocator = record
    Init: function(): Integer; cdecl;
    Deinit: procedure(); cdecl;
    Malloc: function(p1: PHYSFS_uint64): Pointer; cdecl;
    Realloc: function(p1: Pointer; p2: PHYSFS_uint64): Pointer; cdecl;
    Free: procedure(p1: Pointer); cdecl;
  end;

  PHYSFS_StringCallback = procedure(data: Pointer; const str: PUTF8Char); cdecl;

  PHYSFS_EnumFilesCallback = procedure(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char); cdecl;

  PHYSFS_EnumerateCallback = function(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char): PHYSFS_EnumerateCallbackResult; cdecl;

  PHYSFS_Stat = record
    filesize: PHYSFS_sint64;
    modtime: PHYSFS_sint64;
    createtime: PHYSFS_sint64;
    accesstime: PHYSFS_sint64;
    filetype: PHYSFS_FileType;
    readonly: Integer;
  end;

  PHYSFS_Io = record
    version: PHYSFS_uint32;
    opaque: Pointer;
    read: function(io: PPHYSFS_Io; buf: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    write: function(io: PPHYSFS_Io; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    seek: function(io: PPHYSFS_Io; offset: PHYSFS_uint64): Integer; cdecl;
    tell: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    length: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    duplicate: function(io: PPHYSFS_Io): PPHYSFS_Io; cdecl;
    flush: function(io: PPHYSFS_Io): Integer; cdecl;
    destroy: procedure(io: PPHYSFS_Io); cdecl;
  end;

  PHYSFS_Archiver = record
    version: PHYSFS_uint32;
    info: PHYSFS_ArchiveInfo;
    openArchive: function(io: PPHYSFS_Io; const name: PUTF8Char; forWrite: Integer; claimed: PInteger): Pointer; cdecl;
    enumerate: function(opaque: Pointer; const dirname: PUTF8Char; cb: PHYSFS_EnumerateCallback; const origdir: PUTF8Char; callbackdata: Pointer): PHYSFS_EnumerateCallbackResult; cdecl;
    openRead: function(opaque: Pointer; const fnm: PUTF8Char): PPHYSFS_Io; cdecl;
    openWrite: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    openAppend: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    remove: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    mkdir: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    stat: function(opaque: Pointer; const fn: PUTF8Char; stat: PPHYSFS_Stat): Integer; cdecl;
    closeArchive: procedure(opaque: Pointer); cdecl;
  end;

  voidp = Pointer;
  unzFile = voidp;
  zipFile = voidp;
  uInt = Cardinal;
  uLong = Longword;
  Bytef = &Byte;
  PBytef = ^Bytef;

  tm_zip_s = record
    tm_sec: Integer;
    tm_min: Integer;
    tm_hour: Integer;
    tm_mday: Integer;
    tm_mon: Integer;
    tm_year: Integer;
  end;

  tm_zip = tm_zip_s;

  zip_fileinfo = record
    tmz_date: tm_zip;
    dosDate: uLong;
    internal_fa: uLong;
    external_fa: uLong;
  end;

  tm_unz_s = record
    tm_sec: Integer;
    tm_min: Integer;
    tm_hour: Integer;
    tm_mday: Integer;
    tm_mon: Integer;
    tm_year: Integer;
  end;

  tm_unz = tm_unz_s;

  unz_file_info64_s = record
    version: uLong;
    version_needed: uLong;
    flag: uLong;
    compression_method: uLong;
    dosDate: uLong;
    crc: uLong;
    compressed_size: UInt64;
    uncompressed_size: UInt64;
    size_filename: uLong;
    size_file_extra: uLong;
    size_file_comment: uLong;
    disk_num_start: uLong;
    internal_fa: uLong;
    external_fa: uLong;
    tmu_date: tm_unz;
  end;

  unz_file_info64 = unz_file_info64_s;
  Punz_file_info64 = ^unz_file_info64;

type
  al_run_main_ = function(p1: Integer; p2: PPUTF8Char): Integer; cdecl;

type
  al_emit_user_event_dtor = procedure(p1: PALLEGRO_USER_EVENT); cdecl;

type
  al_register_assert_handler_handler = procedure(const expr: PUTF8Char; const &file: PUTF8Char; line: Integer; const func: PUTF8Char); cdecl;

type
  al_register_trace_handler_handler = procedure(const p1: PUTF8Char); cdecl;

type
  al_for_each_fs_entry_callback = function(entry: PALLEGRO_FS_ENTRY; extra: Pointer): Integer; cdecl;

type
  atexit_ptr_ = procedure; cdecl;
  al_install_system_atexit_ptr = function(p1: atexit_ptr_): Integer; cdecl;

type
  al_create_thread_proc = function(thread: PALLEGRO_THREAD; arg: Pointer): Pointer; cdecl;

type
  al_create_thread_with_stacksize_proc = function(thread: PALLEGRO_THREAD; arg: Pointer): Pointer; cdecl;

type
  al_run_detached_thread_proc = function(arg: Pointer): Pointer; cdecl;

type
  al_set_mixer_postprocess_callback_cb = procedure(buf: Pointer; samples: Cardinal; data: Pointer); cdecl;

type
  al_register_sample_loader_loader = function(const filename: PUTF8Char): PALLEGRO_SAMPLE; cdecl;

type
  al_register_sample_saver_saver = function(const filename: PUTF8Char; spl: PALLEGRO_SAMPLE): Boolean; cdecl;

type
  al_register_audio_stream_loader_stream_loader = function(const filename: PUTF8Char; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;

type
  al_register_sample_loader_f_loader = function(fp: PALLEGRO_FILE): PALLEGRO_SAMPLE; cdecl;

type
  al_register_sample_saver_f_saver = function(fp: PALLEGRO_FILE; spl: PALLEGRO_SAMPLE): Boolean; cdecl;

type
  al_register_audio_stream_loader_f_stream_loader = function(fp: PALLEGRO_FILE; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;

type
  al_register_sample_identifier_identifier = function(fp: PALLEGRO_FILE): Boolean; cdecl;

type
  al_register_font_loader_load = function(const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;

type
  al_do_multiline_text_cb = function(line_num: Integer; const line: PUTF8Char; size: Integer; extra: Pointer): Boolean; cdecl;

type
  al_do_multiline_ustr_cb = function(line_num: Integer; const line: PALLEGRO_USTR; extra: Pointer): Boolean; cdecl;

type
  al_triangulate_polygon_emit_triangle = procedure(p1: Integer; p2: Integer; p3: Integer; p4: Pointer); cdecl;

type
  al_draw_soft_triangle_init = procedure(p1: UIntPtr; p2: PALLEGRO_VERTEX; p3: PALLEGRO_VERTEX; p4: PALLEGRO_VERTEX); cdecl;

type
  al_draw_soft_triangle_first = procedure(p1: UIntPtr; p2: Integer; p3: Integer; p4: Integer; p5: Integer); cdecl;

type
  al_draw_soft_triangle_step = procedure(p1: UIntPtr; p2: Integer); cdecl;

type
  al_draw_soft_triangle_draw = procedure(p1: UIntPtr; p2: Integer; p3: Integer; p4: Integer); cdecl;

type
  al_draw_soft_line_first = procedure(p1: UIntPtr; p2: Integer; p3: Integer; p4: PALLEGRO_VERTEX; p5: PALLEGRO_VERTEX); cdecl;

type
  al_draw_soft_line_step = procedure(p1: UIntPtr; p2: Integer); cdecl;

type
  al_draw_soft_line_draw = procedure(p1: UIntPtr; p2: Integer; p3: Integer); cdecl;

type
  PLRESULT = ^LRESULT;
  al_win_add_window_callback_callback = function(display: PALLEGRO_DISPLAY; &message: UINT; wparam: WPARAM; lparam: LPARAM; result: PLRESULT; userdata: Pointer): Boolean; cdecl;

type
  al_win_remove_window_callback_callback = function(display: PALLEGRO_DISPLAY; &message: UINT; wparam: WPARAM; lparam: LPARAM; result: PLRESULT; userdata: Pointer): Boolean; cdecl;

type
  PHYSFS_mountMemory_del = procedure(p1: Pointer); cdecl;

var
  al_get_allegro_version: function(): UInt32; cdecl;
  al_run_main: function(argc: Integer; argv: PPUTF8Char; p3: al_run_main_): Integer; cdecl;
  al_get_time: function(): Double; cdecl;
  al_rest: procedure(seconds: Double); cdecl;
  al_init_timeout: procedure(timeout: PALLEGRO_TIMEOUT; seconds: Double); cdecl;
  al_map_rgb: function(r: Byte; g: Byte; b: Byte): ALLEGRO_COLOR; cdecl;
  al_map_rgba: function(r: Byte; g: Byte; b: Byte; a: Byte): ALLEGRO_COLOR; cdecl;
  al_map_rgb_f: function(r: Single; g: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_map_rgba_f: function(r: Single; g: Single; b: Single; a: Single): ALLEGRO_COLOR; cdecl;
  al_premul_rgba: function(r: Byte; g: Byte; b: Byte; a: Byte): ALLEGRO_COLOR; cdecl;
  al_premul_rgba_f: function(r: Single; g: Single; b: Single; a: Single): ALLEGRO_COLOR; cdecl;
  al_unmap_rgb: procedure(color: ALLEGRO_COLOR; r: PByte; g: PByte; b: PByte); cdecl;
  al_unmap_rgba: procedure(color: ALLEGRO_COLOR; r: PByte; g: PByte; b: PByte; a: PByte); cdecl;
  al_unmap_rgb_f: procedure(color: ALLEGRO_COLOR; r: PSingle; g: PSingle; b: PSingle); cdecl;
  al_unmap_rgba_f: procedure(color: ALLEGRO_COLOR; r: PSingle; g: PSingle; b: PSingle; a: PSingle); cdecl;
  al_get_pixel_size: function(format: Integer): Integer; cdecl;
  al_get_pixel_format_bits: function(format: Integer): Integer; cdecl;
  al_get_pixel_block_size: function(format: Integer): Integer; cdecl;
  al_get_pixel_block_width: function(format: Integer): Integer; cdecl;
  al_get_pixel_block_height: function(format: Integer): Integer; cdecl;
  al_set_new_bitmap_format: procedure(format: Integer); cdecl;
  al_set_new_bitmap_flags: procedure(flags: Integer); cdecl;
  al_get_new_bitmap_format: function(): Integer; cdecl;
  al_get_new_bitmap_flags: function(): Integer; cdecl;
  al_add_new_bitmap_flag: procedure(flag: Integer); cdecl;
  al_get_new_bitmap_depth: function(): Integer; cdecl;
  al_set_new_bitmap_depth: procedure(depth: Integer); cdecl;
  al_get_new_bitmap_samples: function(): Integer; cdecl;
  al_set_new_bitmap_samples: procedure(samples: Integer); cdecl;
  al_get_new_bitmap_wrap: procedure(u: PALLEGRO_BITMAP_WRAP; v: PALLEGRO_BITMAP_WRAP); cdecl;
  al_set_new_bitmap_wrap: procedure(u: ALLEGRO_BITMAP_WRAP; v: ALLEGRO_BITMAP_WRAP); cdecl;
  al_get_bitmap_width: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_height: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_format: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_flags: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_depth: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_samples: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_create_bitmap: function(w: Integer; h: Integer): PALLEGRO_BITMAP; cdecl;
  al_destroy_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_put_pixel: procedure(x: Integer; y: Integer; color: ALLEGRO_COLOR); cdecl;
  al_put_blended_pixel: procedure(x: Integer; y: Integer; color: ALLEGRO_COLOR); cdecl;
  al_get_pixel: function(bitmap: PALLEGRO_BITMAP; x: Integer; y: Integer): ALLEGRO_COLOR; cdecl;
  al_convert_mask_to_alpha: procedure(bitmap: PALLEGRO_BITMAP; mask_color: ALLEGRO_COLOR); cdecl;
  al_get_bitmap_blend_color: function(): ALLEGRO_COLOR; cdecl;
  al_get_bitmap_blender: procedure(op: PInteger; src: PInteger; dst: PInteger); cdecl;
  al_get_separate_bitmap_blender: procedure(op: PInteger; src: PInteger; dst: PInteger; alpha_op: PInteger; alpha_src: PInteger; alpha_dst: PInteger); cdecl;
  al_set_bitmap_blend_color: procedure(color: ALLEGRO_COLOR); cdecl;
  al_set_bitmap_blender: procedure(op: Integer; src: Integer; dst: Integer); cdecl;
  al_set_separate_bitmap_blender: procedure(op: Integer; src: Integer; dst: Integer; alpha_op: Integer; alpha_src: Integer; alpha_dst: Integer); cdecl;
  al_reset_bitmap_blender: procedure(); cdecl;
  al_set_clipping_rectangle: procedure(x: Integer; y: Integer; width: Integer; height: Integer); cdecl;
  al_reset_clipping_rectangle: procedure(); cdecl;
  al_get_clipping_rectangle: procedure(x: PInteger; y: PInteger; w: PInteger; h: PInteger); cdecl;
  al_create_sub_bitmap: function(parent: PALLEGRO_BITMAP; x: Integer; y: Integer; w: Integer; h: Integer): PALLEGRO_BITMAP; cdecl;
  al_is_sub_bitmap: function(bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_get_parent_bitmap: function(bitmap: PALLEGRO_BITMAP): PALLEGRO_BITMAP; cdecl;
  al_get_bitmap_x: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_get_bitmap_y: function(bitmap: PALLEGRO_BITMAP): Integer; cdecl;
  al_reparent_bitmap: procedure(bitmap: PALLEGRO_BITMAP; parent: PALLEGRO_BITMAP; x: Integer; y: Integer; w: Integer; h: Integer); cdecl;
  al_clone_bitmap: function(bitmap: PALLEGRO_BITMAP): PALLEGRO_BITMAP; cdecl;
  al_convert_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_convert_memory_bitmaps: procedure(); cdecl;
  al_backup_dirty_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_draw_bitmap: procedure(bitmap: PALLEGRO_BITMAP; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_bitmap_region: procedure(bitmap: PALLEGRO_BITMAP; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_scaled_bitmap: procedure(bitmap: PALLEGRO_BITMAP; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; dw: Single; dh: Single; flags: Integer); cdecl;
  al_draw_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; cx: Single; cy: Single; dx: Single; dy: Single; angle: Single; flags: Integer); cdecl;
  al_draw_scaled_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; cx: Single; cy: Single; dx: Single; dy: Single; xscale: Single; yscale: Single; angle: Single; flags: Integer); cdecl;
  al_draw_tinted_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_tinted_bitmap_region: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; flags: Integer); cdecl;
  al_draw_tinted_scaled_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; sx: Single; sy: Single; sw: Single; sh: Single; dx: Single; dy: Single; dw: Single; dh: Single; flags: Integer); cdecl;
  al_draw_tinted_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; cx: Single; cy: Single; dx: Single; dy: Single; angle: Single; flags: Integer); cdecl;
  al_draw_tinted_scaled_rotated_bitmap: procedure(bitmap: PALLEGRO_BITMAP; tint: ALLEGRO_COLOR; cx: Single; cy: Single; dx: Single; dy: Single; xscale: Single; yscale: Single; angle: Single; flags: Integer); cdecl;
  al_draw_tinted_scaled_rotated_bitmap_region: procedure(bitmap: PALLEGRO_BITMAP; sx: Single; sy: Single; sw: Single; sh: Single; tint: ALLEGRO_COLOR; cx: Single; cy: Single; dx: Single; dy: Single; xscale: Single; yscale: Single; angle: Single; flags: Integer); cdecl;
  al_ustr_new: function(const s: PUTF8Char): PALLEGRO_USTR; cdecl;
  al_ustr_new_from_buffer: function(const s: PUTF8Char; size: NativeUInt): PALLEGRO_USTR; cdecl;
  al_ustr_newf: function(const fmt: PUTF8Char): PALLEGRO_USTR varargs; cdecl;
  al_ustr_free: procedure(us: PALLEGRO_USTR); cdecl;
  al_cstr: function(const us: PALLEGRO_USTR): PUTF8Char; cdecl;
  al_ustr_to_buffer: procedure(const us: PALLEGRO_USTR; buffer: PUTF8Char; size: Integer); cdecl;
  al_cstr_dup: function(const us: PALLEGRO_USTR): PUTF8Char; cdecl;
  al_ustr_dup: function(const us: PALLEGRO_USTR): PALLEGRO_USTR; cdecl;
  al_ustr_dup_substr: function(const us: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): PALLEGRO_USTR; cdecl;
  al_ustr_empty_string: function(): PALLEGRO_USTR; cdecl;
  al_ref_cstr: function(info: PALLEGRO_USTR_INFO; const s: PUTF8Char): PALLEGRO_USTR; cdecl;
  al_ref_buffer: function(info: PALLEGRO_USTR_INFO; const s: PUTF8Char; size: NativeUInt): PALLEGRO_USTR; cdecl;
  al_ref_ustr: function(info: PALLEGRO_USTR_INFO; const us: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): PALLEGRO_USTR; cdecl;
  al_ref_info: function(const info: PALLEGRO_USTR_INFO): PALLEGRO_USTR; cdecl;
  al_ustr_size: function(const us: PALLEGRO_USTR): NativeUInt; cdecl;
  al_ustr_length: function(const us: PALLEGRO_USTR): NativeUInt; cdecl;
  al_ustr_offset: function(const us: PALLEGRO_USTR; index: Integer): Integer; cdecl;
  al_ustr_next: function(const us: PALLEGRO_USTR; pos: PInteger): Boolean; cdecl;
  al_ustr_prev: function(const us: PALLEGRO_USTR; pos: PInteger): Boolean; cdecl;
  al_ustr_get: function(const us: PALLEGRO_USTR; pos: Integer): Int32; cdecl;
  al_ustr_get_next: function(const us: PALLEGRO_USTR; pos: PInteger): Int32; cdecl;
  al_ustr_prev_get: function(const us: PALLEGRO_USTR; pos: PInteger): Int32; cdecl;
  al_ustr_insert: function(us1: PALLEGRO_USTR; pos: Integer; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_insert_cstr: function(us: PALLEGRO_USTR; pos: Integer; const us2: PUTF8Char): Boolean; cdecl;
  al_ustr_insert_chr: function(us: PALLEGRO_USTR; pos: Integer; c: Int32): NativeUInt; cdecl;
  al_ustr_append: function(us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_append_cstr: function(us: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_append_chr: function(us: PALLEGRO_USTR; c: Int32): NativeUInt; cdecl;
  al_ustr_appendf: function(us: PALLEGRO_USTR; const fmt: PUTF8Char): Boolean varargs; cdecl;
  al_ustr_vappendf: function(us: PALLEGRO_USTR; const fmt: PUTF8Char; ap: Pointer): Boolean; cdecl;
  al_ustr_remove_chr: function(us: PALLEGRO_USTR; pos: Integer): Boolean; cdecl;
  al_ustr_remove_range: function(us: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): Boolean; cdecl;
  al_ustr_truncate: function(us: PALLEGRO_USTR; start_pos: Integer): Boolean; cdecl;
  al_ustr_ltrim_ws: function(us: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_rtrim_ws: function(us: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_trim_ws: function(us: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_assign: function(us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_assign_substr: function(us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR; start_pos: Integer; end_pos: Integer): Boolean; cdecl;
  al_ustr_assign_cstr: function(us1: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_set_chr: function(us: PALLEGRO_USTR; pos: Integer; c: Int32): NativeUInt; cdecl;
  al_ustr_replace_range: function(us1: PALLEGRO_USTR; start_pos1: Integer; end_pos1: Integer; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_find_chr: function(const us: PALLEGRO_USTR; start_pos: Integer; c: Int32): Integer; cdecl;
  al_ustr_rfind_chr: function(const us: PALLEGRO_USTR; start_pos: Integer; c: Int32): Integer; cdecl;
  al_ustr_find_set: function(const us: PALLEGRO_USTR; start_pos: Integer; const accept: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_find_set_cstr: function(const us: PALLEGRO_USTR; start_pos: Integer; const accept: PUTF8Char): Integer; cdecl;
  al_ustr_find_cset: function(const us: PALLEGRO_USTR; start_pos: Integer; const reject: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_find_cset_cstr: function(const us: PALLEGRO_USTR; start_pos: Integer; const reject: PUTF8Char): Integer; cdecl;
  al_ustr_find_str: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_find_cstr: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PUTF8Char): Integer; cdecl;
  al_ustr_rfind_str: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_rfind_cstr: function(const haystack: PALLEGRO_USTR; start_pos: Integer; const needle: PUTF8Char): Integer; cdecl;
  al_ustr_find_replace: function(us: PALLEGRO_USTR; start_pos: Integer; const find: PALLEGRO_USTR; const replace: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_find_replace_cstr: function(us: PALLEGRO_USTR; start_pos: Integer; const find: PUTF8Char; const replace: PUTF8Char): Boolean; cdecl;
  al_ustr_equal: function(const us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_compare: function(const u: PALLEGRO_USTR; const v: PALLEGRO_USTR): Integer; cdecl;
  al_ustr_ncompare: function(const us1: PALLEGRO_USTR; const us2: PALLEGRO_USTR; n: Integer): Integer; cdecl;
  al_ustr_has_prefix: function(const u: PALLEGRO_USTR; const v: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_has_prefix_cstr: function(const u: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_ustr_has_suffix: function(const u: PALLEGRO_USTR; const v: PALLEGRO_USTR): Boolean; cdecl;
  al_ustr_has_suffix_cstr: function(const us1: PALLEGRO_USTR; const s: PUTF8Char): Boolean; cdecl;
  al_utf8_width: function(c: Int32): NativeUInt; cdecl;
  al_utf8_encode: function(s: PUTF8Char; c: Int32): NativeUInt; cdecl;
  al_ustr_new_from_utf16: function(const s: PUInt16): PALLEGRO_USTR; cdecl;
  al_ustr_size_utf16: function(const us: PALLEGRO_USTR): NativeUInt; cdecl;
  al_ustr_encode_utf16: function(const us: PALLEGRO_USTR; s: PUInt16; n: NativeUInt): NativeUInt; cdecl;
  al_utf16_width: function(c: Integer): NativeUInt; cdecl;
  al_utf16_encode: function(s: PUInt16; c: Int32): NativeUInt; cdecl;
  al_create_path: function(const str: PUTF8Char): PALLEGRO_PATH; cdecl;
  al_create_path_for_directory: function(const str: PUTF8Char): PALLEGRO_PATH; cdecl;
  al_clone_path: function(const path: PALLEGRO_PATH): PALLEGRO_PATH; cdecl;
  al_get_path_num_components: function(const path: PALLEGRO_PATH): Integer; cdecl;
  al_get_path_component: function(const path: PALLEGRO_PATH; i: Integer): PUTF8Char; cdecl;
  al_replace_path_component: procedure(path: PALLEGRO_PATH; i: Integer; const s: PUTF8Char); cdecl;
  al_remove_path_component: procedure(path: PALLEGRO_PATH; i: Integer); cdecl;
  al_insert_path_component: procedure(path: PALLEGRO_PATH; i: Integer; const s: PUTF8Char); cdecl;
  al_get_path_tail: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_drop_path_tail: procedure(path: PALLEGRO_PATH); cdecl;
  al_append_path_component: procedure(path: PALLEGRO_PATH; const s: PUTF8Char); cdecl;
  al_join_paths: function(path: PALLEGRO_PATH; const tail: PALLEGRO_PATH): Boolean; cdecl;
  al_rebase_path: function(const head: PALLEGRO_PATH; tail: PALLEGRO_PATH): Boolean; cdecl;
  al_path_cstr: function(const path: PALLEGRO_PATH; delim: UTF8Char): PUTF8Char; cdecl;
  al_path_ustr: function(const path: PALLEGRO_PATH; delim: UTF8Char): PALLEGRO_USTR; cdecl;
  al_destroy_path: procedure(path: PALLEGRO_PATH); cdecl;
  al_set_path_drive: procedure(path: PALLEGRO_PATH; const drive: PUTF8Char); cdecl;
  al_get_path_drive: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_set_path_filename: procedure(path: PALLEGRO_PATH; const filename: PUTF8Char); cdecl;
  al_get_path_filename: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_get_path_extension: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_set_path_extension: function(path: PALLEGRO_PATH; const extension: PUTF8Char): Boolean; cdecl;
  al_get_path_basename: function(const path: PALLEGRO_PATH): PUTF8Char; cdecl;
  al_make_path_canonical: function(path: PALLEGRO_PATH): Boolean; cdecl;
  al_fopen: function(const path: PUTF8Char; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_fopen_interface: function(const vt: PALLEGRO_FILE_INTERFACE; const path: PUTF8Char; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_create_file_handle: function(const vt: PALLEGRO_FILE_INTERFACE; userdata: Pointer): PALLEGRO_FILE; cdecl;
  al_fclose: function(f: PALLEGRO_FILE): Boolean; cdecl;
  al_fread: function(f: PALLEGRO_FILE; ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
  al_fwrite: function(f: PALLEGRO_FILE; const ptr: Pointer; size: NativeUInt): NativeUInt; cdecl;
  al_fflush: function(f: PALLEGRO_FILE): Boolean; cdecl;
  al_ftell: function(f: PALLEGRO_FILE): Int64; cdecl;
  al_fseek: function(f: PALLEGRO_FILE; offset: Int64; whence: Integer): Boolean; cdecl;
  al_feof: function(f: PALLEGRO_FILE): Boolean; cdecl;
  al_ferror: function(f: PALLEGRO_FILE): Integer; cdecl;
  al_ferrmsg: function(f: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_fclearerr: procedure(f: PALLEGRO_FILE); cdecl;
  al_fungetc: function(f: PALLEGRO_FILE; c: Integer): Integer; cdecl;
  al_fsize: function(f: PALLEGRO_FILE): Int64; cdecl;
  al_fgetc: function(f: PALLEGRO_FILE): Integer; cdecl;
  al_fputc: function(f: PALLEGRO_FILE; c: Integer): Integer; cdecl;
  al_fread16le: function(f: PALLEGRO_FILE): Int16; cdecl;
  al_fread16be: function(f: PALLEGRO_FILE): Int16; cdecl;
  al_fwrite16le: function(f: PALLEGRO_FILE; w: Int16): NativeUInt; cdecl;
  al_fwrite16be: function(f: PALLEGRO_FILE; w: Int16): NativeUInt; cdecl;
  al_fread32le: function(f: PALLEGRO_FILE): Int32; cdecl;
  al_fread32be: function(f: PALLEGRO_FILE): Int32; cdecl;
  al_fwrite32le: function(f: PALLEGRO_FILE; l: Int32): NativeUInt; cdecl;
  al_fwrite32be: function(f: PALLEGRO_FILE; l: Int32): NativeUInt; cdecl;
  al_fgets: function(f: PALLEGRO_FILE; const p: PUTF8Char; max: NativeUInt): PUTF8Char; cdecl;
  al_fget_ustr: function(f: PALLEGRO_FILE): PALLEGRO_USTR; cdecl;
  al_fputs: function(f: PALLEGRO_FILE; const p: PUTF8Char): Integer; cdecl;
  al_fprintf: function(f: PALLEGRO_FILE; const format: PUTF8Char): Integer varargs; cdecl;
  al_vfprintf: function(f: PALLEGRO_FILE; const format: PUTF8Char; args: Pointer): Integer; cdecl;
  al_fopen_fd: function(fd: Integer; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_make_temp_file: function(const tmpl: PUTF8Char; ret_path: PPALLEGRO_PATH): PALLEGRO_FILE; cdecl;
  al_fopen_slice: function(fp: PALLEGRO_FILE; initial_size: NativeUInt; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_get_new_file_interface: function(): PALLEGRO_FILE_INTERFACE; cdecl;
  al_set_new_file_interface: procedure(const file_interface: PALLEGRO_FILE_INTERFACE); cdecl;
  al_set_standard_file_interface: procedure(); cdecl;
  al_get_file_userdata: function(f: PALLEGRO_FILE): Pointer; cdecl;
  al_register_bitmap_loader: function(const ext: PUTF8Char; loader: ALLEGRO_IIO_LOADER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_saver: function(const ext: PUTF8Char; saver: ALLEGRO_IIO_SAVER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_loader_f: function(const ext: PUTF8Char; fs_loader: ALLEGRO_IIO_FS_LOADER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_saver_f: function(const ext: PUTF8Char; fs_saver: ALLEGRO_IIO_FS_SAVER_FUNCTION): Boolean; cdecl;
  al_register_bitmap_identifier: function(const ext: PUTF8Char; identifier: ALLEGRO_IIO_IDENTIFIER_FUNCTION): Boolean; cdecl;
  al_load_bitmap: function(const filename: PUTF8Char): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_flags: function(const filename: PUTF8Char; flags: Integer): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char): PALLEGRO_BITMAP; cdecl;
  al_load_bitmap_flags_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; flags: Integer): PALLEGRO_BITMAP; cdecl;
  al_save_bitmap: function(const filename: PUTF8Char; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_save_bitmap_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_identify_bitmap_f: function(fp: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_identify_bitmap: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  al_lock_bitmap: function(bitmap: PALLEGRO_BITMAP; format: Integer; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_bitmap_region: function(bitmap: PALLEGRO_BITMAP; x: Integer; y: Integer; width: Integer; height: Integer; format: Integer; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_bitmap_blocked: function(bitmap: PALLEGRO_BITMAP; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_lock_bitmap_region_blocked: function(bitmap: PALLEGRO_BITMAP; x_block: Integer; y_block: Integer; width_block: Integer; height_block: Integer; flags: Integer): PALLEGRO_LOCKED_REGION; cdecl;
  al_unlock_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_is_bitmap_locked: function(bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_set_blender: procedure(op: Integer; source: Integer; dest: Integer); cdecl;
  al_set_blend_color: procedure(color: ALLEGRO_COLOR); cdecl;
  al_get_blender: procedure(op: PInteger; source: PInteger; dest: PInteger); cdecl;
  al_get_blend_color: function(): ALLEGRO_COLOR; cdecl;
  al_set_separate_blender: procedure(op: Integer; source: Integer; dest: Integer; alpha_op: Integer; alpha_source: Integer; alpha_dest: Integer); cdecl;
  al_get_separate_blender: procedure(op: PInteger; source: PInteger; dest: PInteger; alpha_op: PInteger; alpha_src: PInteger; alpha_dest: PInteger); cdecl;
  al_init_user_event_source: procedure(p1: PALLEGRO_EVENT_SOURCE); cdecl;
  al_destroy_user_event_source: procedure(p1: PALLEGRO_EVENT_SOURCE); cdecl;
  al_emit_user_event: function(p1: PALLEGRO_EVENT_SOURCE; p2: PALLEGRO_EVENT; dtor: al_emit_user_event_dtor): Boolean; cdecl;
  al_unref_user_event: procedure(p1: PALLEGRO_USER_EVENT); cdecl;
  al_set_event_source_data: procedure(p1: PALLEGRO_EVENT_SOURCE; data: IntPtr); cdecl;
  al_get_event_source_data: function(const p1: PALLEGRO_EVENT_SOURCE): IntPtr; cdecl;
  al_create_event_queue: function(): PALLEGRO_EVENT_QUEUE; cdecl;
  al_destroy_event_queue: procedure(p1: PALLEGRO_EVENT_QUEUE); cdecl;
  al_is_event_source_registered: function(p1: PALLEGRO_EVENT_QUEUE; p2: PALLEGRO_EVENT_SOURCE): Boolean; cdecl;
  al_register_event_source: procedure(p1: PALLEGRO_EVENT_QUEUE; p2: PALLEGRO_EVENT_SOURCE); cdecl;
  al_unregister_event_source: procedure(p1: PALLEGRO_EVENT_QUEUE; p2: PALLEGRO_EVENT_SOURCE); cdecl;
  al_pause_event_queue: procedure(p1: PALLEGRO_EVENT_QUEUE; p2: Boolean); cdecl;
  al_is_event_queue_paused: function(const p1: PALLEGRO_EVENT_QUEUE): Boolean; cdecl;
  al_is_event_queue_empty: function(p1: PALLEGRO_EVENT_QUEUE): Boolean; cdecl;
  al_get_next_event: function(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT): Boolean; cdecl;
  al_peek_next_event: function(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT): Boolean; cdecl;
  al_drop_next_event: function(p1: PALLEGRO_EVENT_QUEUE): Boolean; cdecl;
  al_flush_event_queue: procedure(p1: PALLEGRO_EVENT_QUEUE); cdecl;
  al_wait_for_event: procedure(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT); cdecl;
  al_wait_for_event_timed: function(p1: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT; secs: Single): Boolean; cdecl;
  al_wait_for_event_until: function(queue: PALLEGRO_EVENT_QUEUE; ret_event: PALLEGRO_EVENT; timeout: PALLEGRO_TIMEOUT): Boolean; cdecl;
  al_set_new_display_refresh_rate: procedure(refresh_rate: Integer); cdecl;
  al_set_new_display_flags: procedure(flags: Integer); cdecl;
  al_get_new_display_refresh_rate: function(): Integer; cdecl;
  al_get_new_display_flags: function(): Integer; cdecl;
  al_set_new_window_title: procedure(const title: PUTF8Char); cdecl;
  al_get_new_window_title: function(): PUTF8Char; cdecl;
  al_get_display_width: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_height: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_format: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_refresh_rate: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_flags: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_get_display_orientation: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_set_display_flag: function(display: PALLEGRO_DISPLAY; flag: Integer; onoff: Boolean): Boolean; cdecl;
  al_create_display: function(w: Integer; h: Integer): PALLEGRO_DISPLAY; cdecl;
  al_destroy_display: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_get_current_display: function(): PALLEGRO_DISPLAY; cdecl;
  al_set_target_bitmap: procedure(bitmap: PALLEGRO_BITMAP); cdecl;
  al_set_target_backbuffer: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_get_backbuffer: function(display: PALLEGRO_DISPLAY): PALLEGRO_BITMAP; cdecl;
  al_get_target_bitmap: function(): PALLEGRO_BITMAP; cdecl;
  al_acknowledge_resize: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_resize_display: function(display: PALLEGRO_DISPLAY; width: Integer; height: Integer): Boolean; cdecl;
  al_flip_display: procedure(); cdecl;
  al_update_display_region: procedure(x: Integer; y: Integer; width: Integer; height: Integer); cdecl;
  al_is_compatible_bitmap: function(bitmap: PALLEGRO_BITMAP): Boolean; cdecl;
  al_wait_for_vsync: function(): Boolean; cdecl;
  al_get_display_event_source: function(display: PALLEGRO_DISPLAY): PALLEGRO_EVENT_SOURCE; cdecl;
  al_set_display_icon: procedure(display: PALLEGRO_DISPLAY; icon: PALLEGRO_BITMAP); cdecl;
  al_set_display_icons: procedure(display: PALLEGRO_DISPLAY; num_icons: Integer; icons: PPALLEGRO_BITMAP); cdecl;
  al_get_new_display_adapter: function(): Integer; cdecl;
  al_set_new_display_adapter: procedure(adapter: Integer); cdecl;
  al_get_display_adapter: function(display: PALLEGRO_DISPLAY): Integer; cdecl;
  al_set_new_window_position: procedure(x: Integer; y: Integer); cdecl;
  al_get_new_window_position: procedure(x: PInteger; y: PInteger); cdecl;
  al_set_window_position: procedure(display: PALLEGRO_DISPLAY; x: Integer; y: Integer); cdecl;
  al_get_window_position: procedure(display: PALLEGRO_DISPLAY; x: PInteger; y: PInteger); cdecl;
  al_get_window_borders: function(display: PALLEGRO_DISPLAY; left: PInteger; top: PInteger; right: PInteger; bottom: PInteger): Boolean; cdecl;
  al_set_window_constraints: function(display: PALLEGRO_DISPLAY; min_w: Integer; min_h: Integer; max_w: Integer; max_h: Integer): Boolean; cdecl;
  al_get_window_constraints: function(display: PALLEGRO_DISPLAY; min_w: PInteger; min_h: PInteger; max_w: PInteger; max_h: PInteger): Boolean; cdecl;
  al_apply_window_constraints: procedure(display: PALLEGRO_DISPLAY; onoff: Boolean); cdecl;
  al_set_window_title: procedure(display: PALLEGRO_DISPLAY; const title: PUTF8Char); cdecl;
  al_set_new_display_option: procedure(option: Integer; value: Integer; importance: Integer); cdecl;
  al_get_new_display_option: function(option: Integer; importance: PInteger): Integer; cdecl;
  al_reset_new_display_options: procedure(); cdecl;
  al_set_display_option: procedure(display: PALLEGRO_DISPLAY; option: Integer; value: Integer); cdecl;
  al_get_display_option: function(display: PALLEGRO_DISPLAY; option: Integer): Integer; cdecl;
  al_hold_bitmap_drawing: procedure(hold: Boolean); cdecl;
  al_is_bitmap_drawing_held: function(): Boolean; cdecl;
  al_acknowledge_drawing_halt: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_acknowledge_drawing_resume: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_backup_dirty_bitmaps: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_get_clipboard_text: function(display: PALLEGRO_DISPLAY): PUTF8Char; cdecl;
  al_set_clipboard_text: function(display: PALLEGRO_DISPLAY; const text: PUTF8Char): Boolean; cdecl;
  al_clipboard_has_text: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_create_config: function(): PALLEGRO_CONFIG; cdecl;
  al_add_config_section: procedure(config: PALLEGRO_CONFIG; const name: PUTF8Char); cdecl;
  al_set_config_value: procedure(config: PALLEGRO_CONFIG; const section: PUTF8Char; const key: PUTF8Char; const value: PUTF8Char); cdecl;
  al_add_config_comment: procedure(config: PALLEGRO_CONFIG; const section: PUTF8Char; const comment: PUTF8Char); cdecl;
  al_get_config_value: function(const config: PALLEGRO_CONFIG; const section: PUTF8Char; const key: PUTF8Char): PUTF8Char; cdecl;
  al_load_config_file: function(const filename: PUTF8Char): PALLEGRO_CONFIG; cdecl;
  al_load_config_file_f: function(filename: PALLEGRO_FILE): PALLEGRO_CONFIG; cdecl;
  al_save_config_file: function(const filename: PUTF8Char; const config: PALLEGRO_CONFIG): Boolean; cdecl;
  al_save_config_file_f: function(&file: PALLEGRO_FILE; const config: PALLEGRO_CONFIG): Boolean; cdecl;
  al_merge_config_into: procedure(master: PALLEGRO_CONFIG; const add: PALLEGRO_CONFIG); cdecl;
  al_merge_config: function(const cfg1: PALLEGRO_CONFIG; const cfg2: PALLEGRO_CONFIG): PALLEGRO_CONFIG; cdecl;
  al_destroy_config: procedure(config: PALLEGRO_CONFIG); cdecl;
  al_remove_config_section: function(config: PALLEGRO_CONFIG; const section: PUTF8Char): Boolean; cdecl;
  al_remove_config_key: function(config: PALLEGRO_CONFIG; const section: PUTF8Char; const key: PUTF8Char): Boolean; cdecl;
  al_get_first_config_section: function(const config: PALLEGRO_CONFIG; iterator: PPALLEGRO_CONFIG_SECTION): PUTF8Char; cdecl;
  al_get_next_config_section: function(iterator: PPALLEGRO_CONFIG_SECTION): PUTF8Char; cdecl;
  al_get_first_config_entry: function(const config: PALLEGRO_CONFIG; const section: PUTF8Char; iterator: PPALLEGRO_CONFIG_ENTRY): PUTF8Char; cdecl;
  al_get_next_config_entry: function(iterator: PPALLEGRO_CONFIG_ENTRY): PUTF8Char; cdecl;
  al_get_cpu_count: function(): Integer; cdecl;
  al_get_ram_size: function(): Integer; cdecl;
  al_register_assert_handler: procedure(handler: al_register_assert_handler_handler); cdecl;
  al_register_trace_handler: procedure(handler: al_register_trace_handler_handler); cdecl;
  al_clear_to_color: procedure(color: ALLEGRO_COLOR); cdecl;
  al_clear_depth_buffer: procedure(x: Single); cdecl;
  al_draw_pixel: procedure(x: Single; y: Single; color: ALLEGRO_COLOR); cdecl;
  al_get_errno: function(): Integer; cdecl;
  al_set_errno: procedure(errnum: Integer); cdecl;
  al_fixsqrt: function(x: al_fixed): al_fixed; cdecl;
  al_fixhypot: function(x: al_fixed; y: al_fixed): al_fixed; cdecl;
  al_fixatan: function(x: al_fixed): al_fixed; cdecl;
  al_fixatan2: function(y: al_fixed; x: al_fixed): al_fixed; cdecl;
  al_create_fs_entry: function(const path: PUTF8Char): PALLEGRO_FS_ENTRY; cdecl;
  al_destroy_fs_entry: procedure(e: PALLEGRO_FS_ENTRY); cdecl;
  al_get_fs_entry_name: function(e: PALLEGRO_FS_ENTRY): PUTF8Char; cdecl;
  al_update_fs_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_get_fs_entry_mode: function(e: PALLEGRO_FS_ENTRY): UInt32; cdecl;
  al_get_fs_entry_atime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
  al_get_fs_entry_mtime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
  al_get_fs_entry_ctime: function(e: PALLEGRO_FS_ENTRY): Longint; cdecl;
  al_get_fs_entry_size: function(e: PALLEGRO_FS_ENTRY): off_t; cdecl;
  al_fs_entry_exists: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_remove_fs_entry: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_open_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_read_directory: function(e: PALLEGRO_FS_ENTRY): PALLEGRO_FS_ENTRY; cdecl;
  al_close_directory: function(e: PALLEGRO_FS_ENTRY): Boolean; cdecl;
  al_filename_exists: function(const path: PUTF8Char): Boolean; cdecl;
  al_remove_filename: function(const path: PUTF8Char): Boolean; cdecl;
  al_get_current_directory: function(): PUTF8Char; cdecl;
  al_change_directory: function(const path: PUTF8Char): Boolean; cdecl;
  al_make_directory: function(const path: PUTF8Char): Boolean; cdecl;
  al_open_fs_entry: function(e: PALLEGRO_FS_ENTRY; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_for_each_fs_entry: function(dir: PALLEGRO_FS_ENTRY; callback: al_for_each_fs_entry_callback; extra: Pointer): Integer; cdecl;
  al_get_fs_interface: function(): PALLEGRO_FS_INTERFACE; cdecl;
  al_set_fs_interface: procedure(const vtable: PALLEGRO_FS_INTERFACE); cdecl;
  al_set_standard_fs_interface: procedure(); cdecl;
  al_get_num_display_modes: function(): Integer; cdecl;
  al_get_display_mode: function(index: Integer; mode: PALLEGRO_DISPLAY_MODE): PALLEGRO_DISPLAY_MODE; cdecl;
  al_install_joystick: function(): Boolean; cdecl;
  al_uninstall_joystick: procedure(); cdecl;
  al_is_joystick_installed: function(): Boolean; cdecl;
  al_reconfigure_joysticks: function(): Boolean; cdecl;
  al_get_num_joysticks: function(): Integer; cdecl;
  al_get_joystick: function(joyn: Integer): PALLEGRO_JOYSTICK; cdecl;
  al_release_joystick: procedure(p1: PALLEGRO_JOYSTICK); cdecl;
  al_get_joystick_active: function(p1: PALLEGRO_JOYSTICK): Boolean; cdecl;
  al_get_joystick_name: function(p1: PALLEGRO_JOYSTICK): PUTF8Char; cdecl;
  al_get_joystick_num_sticks: function(p1: PALLEGRO_JOYSTICK): Integer; cdecl;
  al_get_joystick_stick_flags: function(p1: PALLEGRO_JOYSTICK; stick: Integer): Integer; cdecl;
  al_get_joystick_stick_name: function(p1: PALLEGRO_JOYSTICK; stick: Integer): PUTF8Char; cdecl;
  al_get_joystick_num_axes: function(p1: PALLEGRO_JOYSTICK; stick: Integer): Integer; cdecl;
  al_get_joystick_axis_name: function(p1: PALLEGRO_JOYSTICK; stick: Integer; axis: Integer): PUTF8Char; cdecl;
  al_get_joystick_num_buttons: function(p1: PALLEGRO_JOYSTICK): Integer; cdecl;
  al_get_joystick_button_name: function(p1: PALLEGRO_JOYSTICK; buttonn: Integer): PUTF8Char; cdecl;
  al_get_joystick_state: procedure(p1: PALLEGRO_JOYSTICK; ret_state: PALLEGRO_JOYSTICK_STATE); cdecl;
  al_get_joystick_guid: function(p1: PALLEGRO_JOYSTICK): ALLEGRO_JOYSTICK_GUID; cdecl;
  al_get_joystick_type: function(p1: PALLEGRO_JOYSTICK): ALLEGRO_JOYSTICK_TYPE; cdecl;
  al_set_joystick_mappings: function(const filename: PUTF8Char): Boolean; cdecl;
  al_set_joystick_mappings_f: function(&file: PALLEGRO_FILE): Boolean; cdecl;
  al_get_joystick_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_is_keyboard_installed: function(): Boolean; cdecl;
  al_install_keyboard: function(): Boolean; cdecl;
  al_uninstall_keyboard: procedure(); cdecl;
  al_can_set_keyboard_leds: function(): Boolean; cdecl;
  al_set_keyboard_leds: function(leds: Integer): Boolean; cdecl;
  al_keycode_to_name: function(keycode: Integer): PUTF8Char; cdecl;
  al_get_keyboard_state: procedure(ret_state: PALLEGRO_KEYBOARD_STATE); cdecl;
  al_clear_keyboard_state: procedure(display: PALLEGRO_DISPLAY); cdecl;
  al_key_down: function(const p1: PALLEGRO_KEYBOARD_STATE; keycode: Integer): Boolean; cdecl;
  al_get_keyboard_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_is_mouse_installed: function(): Boolean; cdecl;
  al_install_mouse: function(): Boolean; cdecl;
  al_uninstall_mouse: procedure(); cdecl;
  al_get_mouse_num_buttons: function(): Cardinal; cdecl;
  al_get_mouse_num_axes: function(): Cardinal; cdecl;
  al_set_mouse_xy: function(display: PALLEGRO_DISPLAY; x: Integer; y: Integer): Boolean; cdecl;
  al_set_mouse_z: function(z: Integer): Boolean; cdecl;
  al_set_mouse_w: function(w: Integer): Boolean; cdecl;
  al_set_mouse_axis: function(axis: Integer; value: Integer): Boolean; cdecl;
  al_get_mouse_state: procedure(ret_state: PALLEGRO_MOUSE_STATE); cdecl;
  al_mouse_button_down: function(const state: PALLEGRO_MOUSE_STATE; button: Integer): Boolean; cdecl;
  al_get_mouse_state_axis: function(const state: PALLEGRO_MOUSE_STATE; axis: Integer): Integer; cdecl;
  al_can_get_mouse_cursor_position: function(): Boolean; cdecl;
  al_get_mouse_cursor_position: function(ret_x: PInteger; ret_y: PInteger): Boolean; cdecl;
  al_grab_mouse: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_ungrab_mouse: function(): Boolean; cdecl;
  al_set_mouse_wheel_precision: procedure(precision: Integer); cdecl;
  al_get_mouse_wheel_precision: function(): Integer; cdecl;
  al_get_mouse_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_is_touch_input_installed: function(): Boolean; cdecl;
  al_install_touch_input: function(): Boolean; cdecl;
  al_uninstall_touch_input: procedure(); cdecl;
  al_get_touch_input_state: procedure(ret_state: PALLEGRO_TOUCH_INPUT_STATE); cdecl;
  al_get_touch_input_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_set_mouse_emulation_mode: procedure(mode: Integer); cdecl;
  al_get_mouse_emulation_mode: function(): Integer; cdecl;
  al_get_touch_input_mouse_emulation_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_install_haptic: function(): Boolean; cdecl;
  al_uninstall_haptic: procedure(); cdecl;
  al_is_haptic_installed: function(): Boolean; cdecl;
  al_is_mouse_haptic: function(p1: PALLEGRO_MOUSE): Boolean; cdecl;
  al_is_joystick_haptic: function(p1: PALLEGRO_JOYSTICK): Boolean; cdecl;
  al_is_keyboard_haptic: function(p1: PALLEGRO_KEYBOARD): Boolean; cdecl;
  al_is_display_haptic: function(p1: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_is_touch_input_haptic: function(p1: PALLEGRO_TOUCH_INPUT): Boolean; cdecl;
  al_get_haptic_from_mouse: function(p1: PALLEGRO_MOUSE): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_joystick: function(p1: PALLEGRO_JOYSTICK): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_keyboard: function(p1: PALLEGRO_KEYBOARD): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_display: function(p1: PALLEGRO_DISPLAY): PALLEGRO_HAPTIC; cdecl;
  al_get_haptic_from_touch_input: function(p1: PALLEGRO_TOUCH_INPUT): PALLEGRO_HAPTIC; cdecl;
  al_release_haptic: function(p1: PALLEGRO_HAPTIC): Boolean; cdecl;
  al_is_haptic_active: function(p1: PALLEGRO_HAPTIC): Boolean; cdecl;
  al_get_haptic_capabilities: function(p1: PALLEGRO_HAPTIC): Integer; cdecl;
  al_is_haptic_capable: function(p1: PALLEGRO_HAPTIC; p2: Integer): Boolean; cdecl;
  al_set_haptic_gain: function(p1: PALLEGRO_HAPTIC; p2: Double): Boolean; cdecl;
  al_get_haptic_gain: function(p1: PALLEGRO_HAPTIC): Double; cdecl;
  al_set_haptic_autocenter: function(p1: PALLEGRO_HAPTIC; p2: Double): Boolean; cdecl;
  al_get_haptic_autocenter: function(p1: PALLEGRO_HAPTIC): Double; cdecl;
  al_get_max_haptic_effects: function(p1: PALLEGRO_HAPTIC): Integer; cdecl;
  al_is_haptic_effect_ok: function(p1: PALLEGRO_HAPTIC; p2: PALLEGRO_HAPTIC_EFFECT): Boolean; cdecl;
  al_upload_haptic_effect: function(p1: PALLEGRO_HAPTIC; p2: PALLEGRO_HAPTIC_EFFECT; p3: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_play_haptic_effect: function(p1: PALLEGRO_HAPTIC_EFFECT_ID; p2: Integer): Boolean; cdecl;
  al_upload_and_play_haptic_effect: function(p1: PALLEGRO_HAPTIC; p2: PALLEGRO_HAPTIC_EFFECT; p3: PALLEGRO_HAPTIC_EFFECT_ID; p4: Integer): Boolean; cdecl;
  al_stop_haptic_effect: function(p1: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_is_haptic_effect_playing: function(p1: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_release_haptic_effect: function(p1: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_get_haptic_effect_duration: function(p1: PALLEGRO_HAPTIC_EFFECT): Double; cdecl;
  al_rumble_haptic: function(p1: PALLEGRO_HAPTIC; p2: Double; p3: Double; p4: PALLEGRO_HAPTIC_EFFECT_ID): Boolean; cdecl;
  al_set_memory_interface: procedure(iface: PALLEGRO_MEMORY_INTERFACE); cdecl;
  al_malloc_with_context: function(n: NativeUInt; line: Integer; const &file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  al_free_with_context: procedure(ptr: Pointer; line: Integer; const &file: PUTF8Char; const func: PUTF8Char); cdecl;
  al_realloc_with_context: function(ptr: Pointer; n: NativeUInt; line: Integer; const &file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  al_calloc_with_context: function(count: NativeUInt; n: NativeUInt; line: Integer; const &file: PUTF8Char; const func: PUTF8Char): Pointer; cdecl;
  al_get_num_video_adapters: function(): Integer; cdecl;
  al_get_monitor_info: function(adapter: Integer; info: PALLEGRO_MONITOR_INFO): Boolean; cdecl;
  al_get_monitor_dpi: function(adapter: Integer): Integer; cdecl;
  al_get_monitor_refresh_rate: function(adapter: Integer): Integer; cdecl;
  al_create_mouse_cursor: function(sprite: PALLEGRO_BITMAP; xfocus: Integer; yfocus: Integer): PALLEGRO_MOUSE_CURSOR; cdecl;
  al_destroy_mouse_cursor: procedure(p1: PALLEGRO_MOUSE_CURSOR); cdecl;
  al_set_mouse_cursor: function(display: PALLEGRO_DISPLAY; cursor: PALLEGRO_MOUSE_CURSOR): Boolean; cdecl;
  al_set_system_mouse_cursor: function(display: PALLEGRO_DISPLAY; cursor_id: ALLEGRO_SYSTEM_MOUSE_CURSOR): Boolean; cdecl;
  al_show_mouse_cursor: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_hide_mouse_cursor: function(display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_get_render_state: function(state: ALLEGRO_RENDER_STATE): Integer; cdecl;
  al_set_render_state: procedure(state: ALLEGRO_RENDER_STATE; value: Integer); cdecl;
  al_use_transform: procedure(const trans: PALLEGRO_TRANSFORM); cdecl;
  al_use_projection_transform: procedure(const trans: PALLEGRO_TRANSFORM); cdecl;
  al_copy_transform: procedure(dest: PALLEGRO_TRANSFORM; const src: PALLEGRO_TRANSFORM); cdecl;
  al_identity_transform: procedure(trans: PALLEGRO_TRANSFORM); cdecl;
  al_build_transform: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single; sx: Single; sy: Single; theta: Single); cdecl;
  al_build_camera_transform: procedure(trans: PALLEGRO_TRANSFORM; position_x: Single; position_y: Single; position_z: Single; look_x: Single; look_y: Single; look_z: Single; up_x: Single; up_y: Single; up_z: Single); cdecl;
  al_translate_transform: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single); cdecl;
  al_translate_transform_3d: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single; z: Single); cdecl;
  al_rotate_transform: procedure(trans: PALLEGRO_TRANSFORM; theta: Single); cdecl;
  al_rotate_transform_3d: procedure(trans: PALLEGRO_TRANSFORM; x: Single; y: Single; z: Single; angle: Single); cdecl;
  al_scale_transform: procedure(trans: PALLEGRO_TRANSFORM; sx: Single; sy: Single); cdecl;
  al_scale_transform_3d: procedure(trans: PALLEGRO_TRANSFORM; sx: Single; sy: Single; sz: Single); cdecl;
  al_transform_coordinates: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle); cdecl;
  al_transform_coordinates_3d: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_transform_coordinates_4d: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle; z: PSingle; w: PSingle); cdecl;
  al_transform_coordinates_3d_projective: procedure(const trans: PALLEGRO_TRANSFORM; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_compose_transform: procedure(trans: PALLEGRO_TRANSFORM; const other: PALLEGRO_TRANSFORM); cdecl;
  al_get_current_transform: function(): PALLEGRO_TRANSFORM; cdecl;
  al_get_current_inverse_transform: function(): PALLEGRO_TRANSFORM; cdecl;
  al_get_current_projection_transform: function(): PALLEGRO_TRANSFORM; cdecl;
  al_invert_transform: procedure(trans: PALLEGRO_TRANSFORM); cdecl;
  al_transpose_transform: procedure(trans: PALLEGRO_TRANSFORM); cdecl;
  al_check_inverse: function(const trans: PALLEGRO_TRANSFORM; tol: Single): Integer; cdecl;
  al_orthographic_transform: procedure(trans: PALLEGRO_TRANSFORM; left: Single; top: Single; n: Single; right: Single; bottom: Single; f: Single); cdecl;
  al_perspective_transform: procedure(trans: PALLEGRO_TRANSFORM; left: Single; top: Single; n: Single; right: Single; bottom: Single; f: Single); cdecl;
  al_horizontal_shear_transform: procedure(trans: PALLEGRO_TRANSFORM; theta: Single); cdecl;
  al_vertical_shear_transform: procedure(trans: PALLEGRO_TRANSFORM; theta: Single); cdecl;
  al_create_shader: function(&platform: ALLEGRO_SHADER_PLATFORM): PALLEGRO_SHADER; cdecl;
  al_attach_shader_source: function(shader: PALLEGRO_SHADER; &type: ALLEGRO_SHADER_TYPE; const source: PUTF8Char): Boolean; cdecl;
  al_attach_shader_source_file: function(shader: PALLEGRO_SHADER; &type: ALLEGRO_SHADER_TYPE; const filename: PUTF8Char): Boolean; cdecl;
  al_build_shader: function(shader: PALLEGRO_SHADER): Boolean; cdecl;
  al_get_shader_log: function(shader: PALLEGRO_SHADER): PUTF8Char; cdecl;
  al_get_shader_platform: function(shader: PALLEGRO_SHADER): ALLEGRO_SHADER_PLATFORM; cdecl;
  al_use_shader: function(shader: PALLEGRO_SHADER): Boolean; cdecl;
  al_get_current_shader: function(): PALLEGRO_SHADER; cdecl;
  al_destroy_shader: procedure(shader: PALLEGRO_SHADER); cdecl;
  al_set_shader_sampler: function(const name: PUTF8Char; bitmap: PALLEGRO_BITMAP; &unit: Integer): Boolean; cdecl;
  al_set_shader_matrix: function(const name: PUTF8Char; const matrix: PALLEGRO_TRANSFORM): Boolean; cdecl;
  al_set_shader_int: function(const name: PUTF8Char; i: Integer): Boolean; cdecl;
  al_set_shader_float: function(const name: PUTF8Char; f: Single): Boolean; cdecl;
  al_set_shader_int_vector: function(const name: PUTF8Char; num_components: Integer; const i: PInteger; num_elems: Integer): Boolean; cdecl;
  al_set_shader_float_vector: function(const name: PUTF8Char; num_components: Integer; const f: PSingle; num_elems: Integer): Boolean; cdecl;
  al_set_shader_bool: function(const name: PUTF8Char; b: Boolean): Boolean; cdecl;
  al_get_default_shader_source: function(&platform: ALLEGRO_SHADER_PLATFORM; &type: ALLEGRO_SHADER_TYPE): PUTF8Char; cdecl;
  al_install_system: function(version: Integer; atexit_ptr: al_install_system_atexit_ptr): Boolean; cdecl;
  al_uninstall_system: procedure(); cdecl;
  al_is_system_installed: function(): Boolean; cdecl;
  al_get_system_driver: function(): PALLEGRO_SYSTEM; cdecl;
  al_get_system_config: function(): PALLEGRO_CONFIG; cdecl;
  al_get_system_id: function(): ALLEGRO_SYSTEM_ID; cdecl;
  al_get_standard_path: function(id: Integer): PALLEGRO_PATH; cdecl;
  al_set_exe_name: procedure(const path: PUTF8Char); cdecl;
  al_set_org_name: procedure(const org_name: PUTF8Char); cdecl;
  al_set_app_name: procedure(const app_name: PUTF8Char); cdecl;
  al_get_org_name: function(): PUTF8Char; cdecl;
  al_get_app_name: function(): PUTF8Char; cdecl;
  al_inhibit_screensaver: function(inhibit: Boolean): Boolean; cdecl;
  al_create_thread: function(proc: al_create_thread_proc; arg: Pointer): PALLEGRO_THREAD; cdecl;
  al_create_thread_with_stacksize: function(proc: al_create_thread_with_stacksize_proc; arg: Pointer; stacksize: NativeUInt): PALLEGRO_THREAD; cdecl;
  al_start_thread: procedure(outer: PALLEGRO_THREAD); cdecl;
  al_join_thread: procedure(outer: PALLEGRO_THREAD; ret_value: PPointer); cdecl;
  al_set_thread_should_stop: procedure(outer: PALLEGRO_THREAD); cdecl;
  al_get_thread_should_stop: function(outer: PALLEGRO_THREAD): Boolean; cdecl;
  al_destroy_thread: procedure(thread: PALLEGRO_THREAD); cdecl;
  al_run_detached_thread: procedure(proc: al_run_detached_thread_proc; arg: Pointer); cdecl;
  al_create_mutex: function(): PALLEGRO_MUTEX; cdecl;
  al_create_mutex_recursive: function(): PALLEGRO_MUTEX; cdecl;
  al_lock_mutex: procedure(mutex: PALLEGRO_MUTEX); cdecl;
  al_unlock_mutex: procedure(mutex: PALLEGRO_MUTEX); cdecl;
  al_destroy_mutex: procedure(mutex: PALLEGRO_MUTEX); cdecl;
  al_create_cond: function(): PALLEGRO_COND; cdecl;
  al_destroy_cond: procedure(cond: PALLEGRO_COND); cdecl;
  al_wait_cond: procedure(cond: PALLEGRO_COND; mutex: PALLEGRO_MUTEX); cdecl;
  al_wait_cond_until: function(cond: PALLEGRO_COND; mutex: PALLEGRO_MUTEX; const timeout: PALLEGRO_TIMEOUT): Integer; cdecl;
  al_broadcast_cond: procedure(cond: PALLEGRO_COND); cdecl;
  al_signal_cond: procedure(cond: PALLEGRO_COND); cdecl;
  al_create_timer: function(speed_secs: Double): PALLEGRO_TIMER; cdecl;
  al_destroy_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_start_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_stop_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_resume_timer: procedure(timer: PALLEGRO_TIMER); cdecl;
  al_get_timer_started: function(const timer: PALLEGRO_TIMER): Boolean; cdecl;
  al_get_timer_speed: function(const timer: PALLEGRO_TIMER): Double; cdecl;
  al_set_timer_speed: procedure(timer: PALLEGRO_TIMER; speed_secs: Double); cdecl;
  al_get_timer_count: function(const timer: PALLEGRO_TIMER): Int64; cdecl;
  al_set_timer_count: procedure(timer: PALLEGRO_TIMER; count: Int64); cdecl;
  al_add_timer_count: procedure(timer: PALLEGRO_TIMER; diff: Int64); cdecl;
  al_get_timer_event_source: function(timer: PALLEGRO_TIMER): PALLEGRO_EVENT_SOURCE; cdecl;
  al_store_state: procedure(state: PALLEGRO_STATE; flags: Integer); cdecl;
  al_restore_state: procedure(const state: PALLEGRO_STATE); cdecl;
  al_create_sample: function(buf: Pointer; samples: Cardinal; freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF; free_buf: Boolean): PALLEGRO_SAMPLE; cdecl;
  al_destroy_sample: procedure(spl: PALLEGRO_SAMPLE); cdecl;
  al_create_sample_instance: function(data: PALLEGRO_SAMPLE): PALLEGRO_SAMPLE_INSTANCE; cdecl;
  al_destroy_sample_instance: procedure(spl: PALLEGRO_SAMPLE_INSTANCE); cdecl;
  al_get_sample_frequency: function(const spl: PALLEGRO_SAMPLE): Cardinal; cdecl;
  al_get_sample_length: function(const spl: PALLEGRO_SAMPLE): Cardinal; cdecl;
  al_get_sample_depth: function(const spl: PALLEGRO_SAMPLE): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_sample_channels: function(const spl: PALLEGRO_SAMPLE): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_sample_data: function(const spl: PALLEGRO_SAMPLE): Pointer; cdecl;
  al_get_sample_instance_frequency: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Cardinal; cdecl;
  al_get_sample_instance_length: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Cardinal; cdecl;
  al_get_sample_instance_position: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Cardinal; cdecl;
  al_get_sample_instance_speed: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_gain: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_pan: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_time: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Single; cdecl;
  al_get_sample_instance_depth: function(const spl: PALLEGRO_SAMPLE_INSTANCE): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_sample_instance_channels: function(const spl: PALLEGRO_SAMPLE_INSTANCE): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_sample_instance_playmode: function(const spl: PALLEGRO_SAMPLE_INSTANCE): ALLEGRO_PLAYMODE; cdecl;
  al_get_sample_instance_playing: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_get_sample_instance_attached: function(const spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_set_sample_instance_position: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Cardinal): Boolean; cdecl;
  al_set_sample_instance_length: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Cardinal): Boolean; cdecl;
  al_set_sample_instance_speed: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Single): Boolean; cdecl;
  al_set_sample_instance_gain: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Single): Boolean; cdecl;
  al_set_sample_instance_pan: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Single): Boolean; cdecl;
  al_set_sample_instance_playmode: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: ALLEGRO_PLAYMODE): Boolean; cdecl;
  al_set_sample_instance_playing: function(spl: PALLEGRO_SAMPLE_INSTANCE; val: Boolean): Boolean; cdecl;
  al_detach_sample_instance: function(spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_set_sample: function(spl: PALLEGRO_SAMPLE_INSTANCE; data: PALLEGRO_SAMPLE): Boolean; cdecl;
  al_get_sample: function(spl: PALLEGRO_SAMPLE_INSTANCE): PALLEGRO_SAMPLE; cdecl;
  al_play_sample_instance: function(spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_stop_sample_instance: function(spl: PALLEGRO_SAMPLE_INSTANCE): Boolean; cdecl;
  al_set_sample_instance_channel_matrix: function(spl: PALLEGRO_SAMPLE_INSTANCE; const matrix: PSingle): Boolean; cdecl;
  al_create_audio_stream: function(buffer_count: NativeUInt; samples: Cardinal; freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_AUDIO_STREAM; cdecl;
  al_destroy_audio_stream: procedure(stream: PALLEGRO_AUDIO_STREAM); cdecl;
  al_drain_audio_stream: procedure(stream: PALLEGRO_AUDIO_STREAM); cdecl;
  al_get_audio_stream_frequency: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_audio_stream_length: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_audio_stream_fragments: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_available_audio_stream_fragments: function(const stream: PALLEGRO_AUDIO_STREAM): Cardinal; cdecl;
  al_get_audio_stream_speed: function(const stream: PALLEGRO_AUDIO_STREAM): Single; cdecl;
  al_get_audio_stream_gain: function(const stream: PALLEGRO_AUDIO_STREAM): Single; cdecl;
  al_get_audio_stream_pan: function(const stream: PALLEGRO_AUDIO_STREAM): Single; cdecl;
  al_get_audio_stream_channels: function(const stream: PALLEGRO_AUDIO_STREAM): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_audio_stream_depth: function(const stream: PALLEGRO_AUDIO_STREAM): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_audio_stream_playmode: function(const stream: PALLEGRO_AUDIO_STREAM): ALLEGRO_PLAYMODE; cdecl;
  al_get_audio_stream_playing: function(const spl: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_get_audio_stream_attached: function(const spl: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_get_audio_stream_played_samples: function(const stream: PALLEGRO_AUDIO_STREAM): UInt64; cdecl;
  al_get_audio_stream_fragment: function(const stream: PALLEGRO_AUDIO_STREAM): Pointer; cdecl;
  al_set_audio_stream_speed: function(stream: PALLEGRO_AUDIO_STREAM; val: Single): Boolean; cdecl;
  al_set_audio_stream_gain: function(stream: PALLEGRO_AUDIO_STREAM; val: Single): Boolean; cdecl;
  al_set_audio_stream_pan: function(stream: PALLEGRO_AUDIO_STREAM; val: Single): Boolean; cdecl;
  al_set_audio_stream_playmode: function(stream: PALLEGRO_AUDIO_STREAM; val: ALLEGRO_PLAYMODE): Boolean; cdecl;
  al_set_audio_stream_playing: function(stream: PALLEGRO_AUDIO_STREAM; val: Boolean): Boolean; cdecl;
  al_detach_audio_stream: function(stream: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_set_audio_stream_fragment: function(stream: PALLEGRO_AUDIO_STREAM; val: Pointer): Boolean; cdecl;
  al_rewind_audio_stream: function(stream: PALLEGRO_AUDIO_STREAM): Boolean; cdecl;
  al_seek_audio_stream_secs: function(stream: PALLEGRO_AUDIO_STREAM; time: Double): Boolean; cdecl;
  al_get_audio_stream_position_secs: function(stream: PALLEGRO_AUDIO_STREAM): Double; cdecl;
  al_get_audio_stream_length_secs: function(stream: PALLEGRO_AUDIO_STREAM): Double; cdecl;
  al_set_audio_stream_loop_secs: function(stream: PALLEGRO_AUDIO_STREAM; start: Double; &end: Double): Boolean; cdecl;
  al_get_audio_stream_event_source: function(stream: PALLEGRO_AUDIO_STREAM): PALLEGRO_EVENT_SOURCE; cdecl;
  al_set_audio_stream_channel_matrix: function(stream: PALLEGRO_AUDIO_STREAM; const matrix: PSingle): Boolean; cdecl;
  al_play_audio_stream: function(const filename: PUTF8Char): PALLEGRO_AUDIO_STREAM; cdecl;
  al_play_audio_stream_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char): PALLEGRO_AUDIO_STREAM; cdecl;
  al_create_mixer: function(freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_MIXER; cdecl;
  al_destroy_mixer: procedure(mixer: PALLEGRO_MIXER); cdecl;
  al_attach_sample_instance_to_mixer: function(stream: PALLEGRO_SAMPLE_INSTANCE; mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_attach_audio_stream_to_mixer: function(stream: PALLEGRO_AUDIO_STREAM; mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_attach_mixer_to_mixer: function(stream: PALLEGRO_MIXER; mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_set_mixer_postprocess_callback: function(mixer: PALLEGRO_MIXER; cb: al_set_mixer_postprocess_callback_cb; data: Pointer): Boolean; cdecl;
  al_get_mixer_frequency: function(const mixer: PALLEGRO_MIXER): Cardinal; cdecl;
  al_get_mixer_channels: function(const mixer: PALLEGRO_MIXER): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_mixer_depth: function(const mixer: PALLEGRO_MIXER): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_mixer_quality: function(const mixer: PALLEGRO_MIXER): ALLEGRO_MIXER_QUALITY; cdecl;
  al_get_mixer_gain: function(const mixer: PALLEGRO_MIXER): Single; cdecl;
  al_get_mixer_playing: function(const mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_get_mixer_attached: function(const mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_mixer_has_attachments: function(const mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_set_mixer_frequency: function(mixer: PALLEGRO_MIXER; val: Cardinal): Boolean; cdecl;
  al_set_mixer_quality: function(mixer: PALLEGRO_MIXER; val: ALLEGRO_MIXER_QUALITY): Boolean; cdecl;
  al_set_mixer_gain: function(mixer: PALLEGRO_MIXER; gain: Single): Boolean; cdecl;
  al_set_mixer_playing: function(mixer: PALLEGRO_MIXER; val: Boolean): Boolean; cdecl;
  al_detach_mixer: function(mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_create_voice: function(freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_VOICE; cdecl;
  al_destroy_voice: procedure(voice: PALLEGRO_VOICE); cdecl;
  al_attach_sample_instance_to_voice: function(stream: PALLEGRO_SAMPLE_INSTANCE; voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_attach_audio_stream_to_voice: function(stream: PALLEGRO_AUDIO_STREAM; voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_attach_mixer_to_voice: function(mixer: PALLEGRO_MIXER; voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_detach_voice: procedure(voice: PALLEGRO_VOICE); cdecl;
  al_get_voice_frequency: function(const voice: PALLEGRO_VOICE): Cardinal; cdecl;
  al_get_voice_position: function(const voice: PALLEGRO_VOICE): Cardinal; cdecl;
  al_get_voice_channels: function(const voice: PALLEGRO_VOICE): ALLEGRO_CHANNEL_CONF; cdecl;
  al_get_voice_depth: function(const voice: PALLEGRO_VOICE): ALLEGRO_AUDIO_DEPTH; cdecl;
  al_get_voice_playing: function(const voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_voice_has_attachments: function(const voice: PALLEGRO_VOICE): Boolean; cdecl;
  al_set_voice_position: function(voice: PALLEGRO_VOICE; val: Cardinal): Boolean; cdecl;
  al_set_voice_playing: function(voice: PALLEGRO_VOICE; val: Boolean): Boolean; cdecl;
  al_install_audio: function(): Boolean; cdecl;
  al_uninstall_audio: procedure(); cdecl;
  al_is_audio_installed: function(): Boolean; cdecl;
  al_get_allegro_audio_version: function(): UInt32; cdecl;
  al_get_channel_count: function(conf: ALLEGRO_CHANNEL_CONF): NativeUInt; cdecl;
  al_get_audio_depth_size: function(conf: ALLEGRO_AUDIO_DEPTH): NativeUInt; cdecl;
  al_fill_silence: procedure(buf: Pointer; samples: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF); cdecl;
  al_get_num_audio_output_devices: function(): Integer; cdecl;
  al_get_audio_output_device: function(index: Integer): PALLEGRO_AUDIO_DEVICE; cdecl;
  al_get_audio_device_name: function(const device: PALLEGRO_AUDIO_DEVICE): PUTF8Char; cdecl;
  al_reserve_samples: function(reserve_samples: Integer): Boolean; cdecl;
  al_get_default_mixer: function(): PALLEGRO_MIXER; cdecl;
  al_set_default_mixer: function(mixer: PALLEGRO_MIXER): Boolean; cdecl;
  al_restore_default_mixer: function(): Boolean; cdecl;
  al_play_sample: function(data: PALLEGRO_SAMPLE; gain: Single; pan: Single; speed: Single; loop: ALLEGRO_PLAYMODE; ret_id: PALLEGRO_SAMPLE_ID): Boolean; cdecl;
  al_stop_sample: procedure(spl_id: PALLEGRO_SAMPLE_ID); cdecl;
  al_stop_samples: procedure(); cdecl;
  al_get_default_voice: function(): PALLEGRO_VOICE; cdecl;
  al_set_default_voice: procedure(voice: PALLEGRO_VOICE); cdecl;
  al_lock_sample_id: function(spl_id: PALLEGRO_SAMPLE_ID): PALLEGRO_SAMPLE_INSTANCE; cdecl;
  al_unlock_sample_id: procedure(spl_id: PALLEGRO_SAMPLE_ID); cdecl;
  al_register_sample_loader: function(const ext: PUTF8Char; loader: al_register_sample_loader_loader): Boolean; cdecl;
  al_register_sample_saver: function(const ext: PUTF8Char; saver: al_register_sample_saver_saver): Boolean; cdecl;
  al_register_audio_stream_loader: function(const ext: PUTF8Char; stream_loader: al_register_audio_stream_loader_stream_loader): Boolean; cdecl;
  al_register_sample_loader_f: function(const ext: PUTF8Char; loader: al_register_sample_loader_f_loader): Boolean; cdecl;
  al_register_sample_saver_f: function(const ext: PUTF8Char; saver: al_register_sample_saver_f_saver): Boolean; cdecl;
  al_register_audio_stream_loader_f: function(const ext: PUTF8Char; stream_loader: al_register_audio_stream_loader_f_stream_loader): Boolean; cdecl;
  al_register_sample_identifier: function(const ext: PUTF8Char; identifier: al_register_sample_identifier_identifier): Boolean; cdecl;
  al_load_sample: function(const filename: PUTF8Char): PALLEGRO_SAMPLE; cdecl;
  al_save_sample: function(const filename: PUTF8Char; spl: PALLEGRO_SAMPLE): Boolean; cdecl;
  al_load_audio_stream: function(const filename: PUTF8Char; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;
  al_load_sample_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char): PALLEGRO_SAMPLE; cdecl;
  al_save_sample_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; spl: PALLEGRO_SAMPLE): Boolean; cdecl;
  al_load_audio_stream_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char; buffer_count: NativeUInt; samples: Cardinal): PALLEGRO_AUDIO_STREAM; cdecl;
  al_identify_sample_f: function(fp: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_identify_sample: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  al_create_audio_recorder: function(fragment_count: NativeUInt; samples: Cardinal; freq: Cardinal; depth: ALLEGRO_AUDIO_DEPTH; chan_conf: ALLEGRO_CHANNEL_CONF): PALLEGRO_AUDIO_RECORDER; cdecl;
  al_start_audio_recorder: function(r: PALLEGRO_AUDIO_RECORDER): Boolean; cdecl;
  al_stop_audio_recorder: procedure(r: PALLEGRO_AUDIO_RECORDER); cdecl;
  al_is_audio_recorder_recording: function(r: PALLEGRO_AUDIO_RECORDER): Boolean; cdecl;
  al_get_audio_recorder_event_source: function(r: PALLEGRO_AUDIO_RECORDER): PALLEGRO_EVENT_SOURCE; cdecl;
  al_get_audio_recorder_event: function(event: PALLEGRO_EVENT): PALLEGRO_AUDIO_RECORDER_EVENT; cdecl;
  al_destroy_audio_recorder: procedure(r: PALLEGRO_AUDIO_RECORDER); cdecl;
  al_init_acodec_addon: function(): Boolean; cdecl;
  al_is_acodec_addon_initialized: function(): Boolean; cdecl;
  al_get_allegro_acodec_version: function(): UInt32; cdecl;
  al_get_allegro_color_version: function(): UInt32; cdecl;
  al_color_hsv_to_rgb: procedure(hue: Single; saturation: Single; value: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_hsl: procedure(red: Single; green: Single; blue: Single; hue: PSingle; saturation: PSingle; lightness: PSingle); cdecl;
  al_color_rgb_to_hsv: procedure(red: Single; green: Single; blue: Single; hue: PSingle; saturation: PSingle; value: PSingle); cdecl;
  al_color_hsl_to_rgb: procedure(hue: Single; saturation: Single; lightness: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_name_to_rgb: function(const name: PUTF8Char; r: PSingle; g: PSingle; b: PSingle): Boolean; cdecl;
  al_color_rgb_to_name: function(r: Single; g: Single; b: Single): PUTF8Char; cdecl;
  al_color_cmyk_to_rgb: procedure(cyan: Single; magenta: Single; yellow: Single; key: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_cmyk: procedure(red: Single; green: Single; blue: Single; cyan: PSingle; magenta: PSingle; yellow: PSingle; key: PSingle); cdecl;
  al_color_yuv_to_rgb: procedure(y: Single; u: Single; v: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_yuv: procedure(red: Single; green: Single; blue: Single; y: PSingle; u: PSingle; v: PSingle); cdecl;
  al_color_rgb_to_html: procedure(red: Single; green: Single; blue: Single; &string: PUTF8Char); cdecl;
  al_color_html_to_rgb: function(const &string: PUTF8Char; red: PSingle; green: PSingle; blue: PSingle): Boolean; cdecl;
  al_color_yuv: function(y: Single; u: Single; v: Single): ALLEGRO_COLOR; cdecl;
  al_color_cmyk: function(c: Single; m: Single; y: Single; k: Single): ALLEGRO_COLOR; cdecl;
  al_color_hsl: function(h: Single; s: Single; l: Single): ALLEGRO_COLOR; cdecl;
  al_color_hsv: function(h: Single; s: Single; v: Single): ALLEGRO_COLOR; cdecl;
  al_color_name: function(const name: PUTF8Char): ALLEGRO_COLOR; cdecl;
  al_color_html: function(const &string: PUTF8Char): ALLEGRO_COLOR; cdecl;
  al_color_xyz_to_rgb: procedure(x: Single; y: Single; z: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_xyz: procedure(red: Single; green: Single; blue: Single; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_color_xyz: function(x: Single; y: Single; z: Single): ALLEGRO_COLOR; cdecl;
  al_color_lab_to_rgb: procedure(l: Single; a: Single; b: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_lab: procedure(red: Single; green: Single; blue: Single; l: PSingle; a: PSingle; b: PSingle); cdecl;
  al_color_lab: function(l: Single; a: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_color_xyy_to_rgb: procedure(x: Single; y: Single; y2: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_xyy: procedure(red: Single; green: Single; blue: Single; x: PSingle; y: PSingle; y2: PSingle); cdecl;
  al_color_xyy: function(x: Single; y: Single; y2: Single): ALLEGRO_COLOR; cdecl;
  al_color_distance_ciede2000: function(c1: ALLEGRO_COLOR; c2: ALLEGRO_COLOR): Double; cdecl;
  al_color_lch_to_rgb: procedure(l: Single; c: Single; h: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_lch: procedure(red: Single; green: Single; blue: Single; l: PSingle; c: PSingle; h: PSingle); cdecl;
  al_color_lch: function(l: Single; c: Single; h: Single): ALLEGRO_COLOR; cdecl;
  al_is_color_valid: function(color: ALLEGRO_COLOR): Boolean; cdecl;
  al_color_oklab_to_rgb: procedure(l: Single; a: Single; b: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_oklab: procedure(red: Single; green: Single; blue: Single; l: PSingle; a: PSingle; b: PSingle); cdecl;
  al_color_oklab: function(l: Single; a: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_color_linear_to_rgb: procedure(x: Single; y: Single; z: Single; red: PSingle; green: PSingle; blue: PSingle); cdecl;
  al_color_rgb_to_linear: procedure(red: Single; green: Single; blue: Single; x: PSingle; y: PSingle; z: PSingle); cdecl;
  al_color_linear: function(r: Single; g: Single; b: Single): ALLEGRO_COLOR; cdecl;
  al_register_font_loader: function(const ext: PUTF8Char; load: al_register_font_loader_load): Boolean; cdecl;
  al_load_bitmap_font: function(const filename: PUTF8Char): PALLEGRO_FONT; cdecl;
  al_load_bitmap_font_flags: function(const filename: PUTF8Char; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_font: function(const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_grab_font_from_bitmap: function(bmp: PALLEGRO_BITMAP; n: Integer; ranges: PInteger): PALLEGRO_FONT; cdecl;
  al_create_builtin_font: function(): PALLEGRO_FONT; cdecl;
  al_draw_ustr: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; flags: Integer; const ustr: PALLEGRO_USTR); cdecl;
  al_draw_text: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; flags: Integer; const text: PUTF8Char); cdecl;
  al_draw_justified_text: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x1: Single; x2: Single; y: Single; diff: Single; flags: Integer; const text: PUTF8Char); cdecl;
  al_draw_justified_ustr: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x1: Single; x2: Single; y: Single; diff: Single; flags: Integer; const text: PALLEGRO_USTR); cdecl;
  al_draw_textf: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; flags: Integer; const format: PUTF8Char) varargs; cdecl;
  al_draw_justified_textf: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x1: Single; x2: Single; y: Single; diff: Single; flags: Integer; const format: PUTF8Char) varargs; cdecl;
  al_get_text_width: function(const f: PALLEGRO_FONT; const str: PUTF8Char): Integer; cdecl;
  al_get_ustr_width: function(const f: PALLEGRO_FONT; const ustr: PALLEGRO_USTR): Integer; cdecl;
  al_get_font_line_height: function(const f: PALLEGRO_FONT): Integer; cdecl;
  al_get_font_ascent: function(const f: PALLEGRO_FONT): Integer; cdecl;
  al_get_font_descent: function(const f: PALLEGRO_FONT): Integer; cdecl;
  al_destroy_font: procedure(f: PALLEGRO_FONT); cdecl;
  al_get_ustr_dimensions: procedure(const f: PALLEGRO_FONT; const text: PALLEGRO_USTR; bbx: PInteger; bby: PInteger; bbw: PInteger; bbh: PInteger); cdecl;
  al_get_text_dimensions: procedure(const f: PALLEGRO_FONT; const text: PUTF8Char; bbx: PInteger; bby: PInteger; bbw: PInteger; bbh: PInteger); cdecl;
  al_init_font_addon: function(): Boolean; cdecl;
  al_is_font_addon_initialized: function(): Boolean; cdecl;
  al_shutdown_font_addon: procedure(); cdecl;
  al_get_allegro_font_version: function(): UInt32; cdecl;
  al_get_font_ranges: function(font: PALLEGRO_FONT; ranges_count: Integer; ranges: PInteger): Integer; cdecl;
  al_draw_glyph: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; codepoint: Integer); cdecl;
  al_get_glyph_width: function(const f: PALLEGRO_FONT; codepoint: Integer): Integer; cdecl;
  al_get_glyph_dimensions: function(const f: PALLEGRO_FONT; codepoint: Integer; bbx: PInteger; bby: PInteger; bbw: PInteger; bbh: PInteger): Boolean; cdecl;
  al_get_glyph_advance: function(const f: PALLEGRO_FONT; codepoint1: Integer; codepoint2: Integer): Integer; cdecl;
  al_get_glyph: function(const f: PALLEGRO_FONT; prev_codepoint: Integer; codepoint: Integer; glyph: PALLEGRO_GLYPH): Boolean; cdecl;
  al_draw_multiline_text: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; max_width: Single; line_height: Single; flags: Integer; const text: PUTF8Char); cdecl;
  al_draw_multiline_textf: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; max_width: Single; line_height: Single; flags: Integer; const format: PUTF8Char) varargs; cdecl;
  al_draw_multiline_ustr: procedure(const font: PALLEGRO_FONT; color: ALLEGRO_COLOR; x: Single; y: Single; max_width: Single; line_height: Single; flags: Integer; const text: PALLEGRO_USTR); cdecl;
  al_do_multiline_text: procedure(const font: PALLEGRO_FONT; max_width: Single; const text: PUTF8Char; cb: al_do_multiline_text_cb; extra: Pointer); cdecl;
  al_do_multiline_ustr: procedure(const font: PALLEGRO_FONT; max_width: Single; const ustr: PALLEGRO_USTR; cb: al_do_multiline_ustr_cb; extra: Pointer); cdecl;
  al_set_fallback_font: procedure(font: PALLEGRO_FONT; fallback: PALLEGRO_FONT); cdecl;
  al_get_fallback_font: function(font: PALLEGRO_FONT): PALLEGRO_FONT; cdecl;
  al_init_image_addon: function(): Boolean; cdecl;
  al_is_image_addon_initialized: function(): Boolean; cdecl;
  al_shutdown_image_addon: procedure(); cdecl;
  al_get_allegro_image_version: function(): UInt32; cdecl;
  al_open_memfile: function(mem: Pointer; size: Int64; const mode: PUTF8Char): PALLEGRO_FILE; cdecl;
  al_get_allegro_memfile_version: function(): UInt32; cdecl;
  al_init_native_dialog_addon: function(): Boolean; cdecl;
  al_is_native_dialog_addon_initialized: function(): Boolean; cdecl;
  al_shutdown_native_dialog_addon: procedure(); cdecl;
  al_create_native_file_dialog: function(const initial_path: PUTF8Char; const title: PUTF8Char; const patterns: PUTF8Char; mode: Integer): PALLEGRO_FILECHOOSER; cdecl;
  al_show_native_file_dialog: function(display: PALLEGRO_DISPLAY; dialog: PALLEGRO_FILECHOOSER): Boolean; cdecl;
  al_get_native_file_dialog_count: function(const dialog: PALLEGRO_FILECHOOSER): Integer; cdecl;
  al_get_native_file_dialog_path: function(const dialog: PALLEGRO_FILECHOOSER; index: NativeUInt): PUTF8Char; cdecl;
  al_destroy_native_file_dialog: procedure(dialog: PALLEGRO_FILECHOOSER); cdecl;
  al_show_native_message_box: function(display: PALLEGRO_DISPLAY; const title: PUTF8Char; const heading: PUTF8Char; const text: PUTF8Char; const buttons: PUTF8Char; flags: Integer): Integer; cdecl;
  al_open_native_text_log: function(const title: PUTF8Char; flags: Integer): PALLEGRO_TEXTLOG; cdecl;
  al_close_native_text_log: procedure(textlog: PALLEGRO_TEXTLOG); cdecl;
  al_append_native_text_log: procedure(textlog: PALLEGRO_TEXTLOG; const format: PUTF8Char) varargs; cdecl;
  al_get_native_text_log_event_source: function(textlog: PALLEGRO_TEXTLOG): PALLEGRO_EVENT_SOURCE; cdecl;
  al_create_menu: function(): PALLEGRO_MENU; cdecl;
  al_create_popup_menu: function(): PALLEGRO_MENU; cdecl;
  al_build_menu: function(info: PALLEGRO_MENU_INFO): PALLEGRO_MENU; cdecl;
  al_append_menu_item: function(parent: PALLEGRO_MENU; const title: PUTF8Char; id: UInt16; flags: Integer; icon: PALLEGRO_BITMAP; submenu: PALLEGRO_MENU): Integer; cdecl;
  al_insert_menu_item: function(parent: PALLEGRO_MENU; pos: Integer; const title: PUTF8Char; id: UInt16; flags: Integer; icon: PALLEGRO_BITMAP; submenu: PALLEGRO_MENU): Integer; cdecl;
  al_remove_menu_item: function(menu: PALLEGRO_MENU; pos: Integer): Boolean; cdecl;
  al_clone_menu: function(menu: PALLEGRO_MENU): PALLEGRO_MENU; cdecl;
  al_clone_menu_for_popup: function(menu: PALLEGRO_MENU): PALLEGRO_MENU; cdecl;
  al_destroy_menu: procedure(menu: PALLEGRO_MENU); cdecl;
  al_get_menu_item_caption: function(menu: PALLEGRO_MENU; pos: Integer): PUTF8Char; cdecl;
  al_set_menu_item_caption: procedure(menu: PALLEGRO_MENU; pos: Integer; const caption: PUTF8Char); cdecl;
  al_get_menu_item_flags: function(menu: PALLEGRO_MENU; pos: Integer): Integer; cdecl;
  al_set_menu_item_flags: procedure(menu: PALLEGRO_MENU; pos: Integer; flags: Integer); cdecl;
  al_get_menu_item_icon: function(menu: PALLEGRO_MENU; pos: Integer): PALLEGRO_BITMAP; cdecl;
  al_set_menu_item_icon: procedure(menu: PALLEGRO_MENU; pos: Integer; icon: PALLEGRO_BITMAP); cdecl;
  al_toggle_menu_item_flags: function(menu: PALLEGRO_MENU; pos: Integer; flags: Integer): Integer; cdecl;
  al_find_menu: function(haystack: PALLEGRO_MENU; id: UInt16): PALLEGRO_MENU; cdecl;
  al_find_menu_item: function(haystack: PALLEGRO_MENU; id: UInt16; menu: PPALLEGRO_MENU; index: PInteger): Boolean; cdecl;
  al_get_default_menu_event_source: function(): PALLEGRO_EVENT_SOURCE; cdecl;
  al_enable_menu_event_source: function(menu: PALLEGRO_MENU): PALLEGRO_EVENT_SOURCE; cdecl;
  al_disable_menu_event_source: procedure(menu: PALLEGRO_MENU); cdecl;
  al_get_display_menu: function(display: PALLEGRO_DISPLAY): PALLEGRO_MENU; cdecl;
  al_set_display_menu: function(display: PALLEGRO_DISPLAY; menu: PALLEGRO_MENU): Boolean; cdecl;
  al_popup_menu: function(popup: PALLEGRO_MENU; display: PALLEGRO_DISPLAY): Boolean; cdecl;
  al_remove_display_menu: function(display: PALLEGRO_DISPLAY): PALLEGRO_MENU; cdecl;
  al_get_allegro_native_dialog_version: function(): UInt32; cdecl;
  al_set_physfs_file_interface: procedure(); cdecl;
  al_get_allegro_physfs_version: function(): UInt32; cdecl;
  al_get_allegro_primitives_version: function(): UInt32; cdecl;
  al_init_primitives_addon: function(): Boolean; cdecl;
  al_is_primitives_addon_initialized: function(): Boolean; cdecl;
  al_shutdown_primitives_addon: procedure(); cdecl;
  al_draw_prim: function(const vtxs: Pointer; const decl: PALLEGRO_VERTEX_DECL; texture: PALLEGRO_BITMAP; start: Integer; &end: Integer; &type: Integer): Integer; cdecl;
  al_draw_indexed_prim: function(const vtxs: Pointer; const decl: PALLEGRO_VERTEX_DECL; texture: PALLEGRO_BITMAP; const indices: PInteger; num_vtx: Integer; &type: Integer): Integer; cdecl;
  al_draw_vertex_buffer: function(vertex_buffer: PALLEGRO_VERTEX_BUFFER; texture: PALLEGRO_BITMAP; start: Integer; &end: Integer; &type: Integer): Integer; cdecl;
  al_draw_indexed_buffer: function(vertex_buffer: PALLEGRO_VERTEX_BUFFER; texture: PALLEGRO_BITMAP; index_buffer: PALLEGRO_INDEX_BUFFER; start: Integer; &end: Integer; &type: Integer): Integer; cdecl;
  al_create_vertex_decl: function(const elements: PALLEGRO_VERTEX_ELEMENT; stride: Integer): PALLEGRO_VERTEX_DECL; cdecl;
  al_destroy_vertex_decl: procedure(decl: PALLEGRO_VERTEX_DECL); cdecl;
  al_create_vertex_buffer: function(decl: PALLEGRO_VERTEX_DECL; const initial_data: Pointer; num_vertices: Integer; flags: Integer): PALLEGRO_VERTEX_BUFFER; cdecl;
  al_destroy_vertex_buffer: procedure(buffer: PALLEGRO_VERTEX_BUFFER); cdecl;
  al_lock_vertex_buffer: function(buffer: PALLEGRO_VERTEX_BUFFER; offset: Integer; length: Integer; flags: Integer): Pointer; cdecl;
  al_unlock_vertex_buffer: procedure(buffer: PALLEGRO_VERTEX_BUFFER); cdecl;
  al_get_vertex_buffer_size: function(buffer: PALLEGRO_VERTEX_BUFFER): Integer; cdecl;
  al_create_index_buffer: function(index_size: Integer; const initial_data: Pointer; num_indices: Integer; flags: Integer): PALLEGRO_INDEX_BUFFER; cdecl;
  al_destroy_index_buffer: procedure(buffer: PALLEGRO_INDEX_BUFFER); cdecl;
  al_lock_index_buffer: function(buffer: PALLEGRO_INDEX_BUFFER; offset: Integer; length: Integer; flags: Integer): Pointer; cdecl;
  al_unlock_index_buffer: procedure(buffer: PALLEGRO_INDEX_BUFFER); cdecl;
  al_get_index_buffer_size: function(buffer: PALLEGRO_INDEX_BUFFER): Integer; cdecl;
  al_triangulate_polygon: function(const vertices: PSingle; vertex_stride: NativeUInt; const vertex_counts: PInteger; emit_triangle: al_triangulate_polygon_emit_triangle; userdata: Pointer): Boolean; cdecl;
  al_draw_soft_triangle: procedure(v1: PALLEGRO_VERTEX; v2: PALLEGRO_VERTEX; v3: PALLEGRO_VERTEX; state: UIntPtr; init: al_draw_soft_triangle_init; first: al_draw_soft_triangle_first; step: al_draw_soft_triangle_step; draw: al_draw_soft_triangle_draw); cdecl;
  al_draw_soft_line: procedure(v1: PALLEGRO_VERTEX; v2: PALLEGRO_VERTEX; state: UIntPtr; first: al_draw_soft_line_first; step: al_draw_soft_line_step; draw: al_draw_soft_line_draw); cdecl;
  al_draw_line: procedure(x1: Single; y1: Single; x2: Single; y2: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_triangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_rounded_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_calculate_arc: procedure(dest: PSingle; stride: Integer; cx: Single; cy: Single; rx: Single; ry: Single; start_theta: Single; delta_theta: Single; thickness: Single; num_points: Integer); cdecl;
  al_draw_circle: procedure(cx: Single; cy: Single; r: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_ellipse: procedure(cx: Single; cy: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_arc: procedure(cx: Single; cy: Single; r: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_elliptical_arc: procedure(cx: Single; cy: Single; rx: Single; ry: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_draw_pieslice: procedure(cx: Single; cy: Single; r: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_calculate_spline: procedure(dest: PSingle; stride: Integer; points: PSingle; thickness: Single; num_segments: Integer); cdecl;
  al_draw_spline: procedure(points: PSingle; color: ALLEGRO_COLOR; thickness: Single); cdecl;
  al_calculate_ribbon: procedure(dest: PSingle; dest_stride: Integer; const points: PSingle; points_stride: Integer; thickness: Single; num_segments: Integer); cdecl;
  al_draw_ribbon: procedure(const points: PSingle; points_stride: Integer; color: ALLEGRO_COLOR; thickness: Single; num_segments: Integer); cdecl;
  al_draw_filled_triangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_ellipse: procedure(cx: Single; cy: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_circle: procedure(cx: Single; cy: Single; r: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_pieslice: procedure(cx: Single; cy: Single; r: Single; start_theta: Single; delta_theta: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_rounded_rectangle: procedure(x1: Single; y1: Single; x2: Single; y2: Single; rx: Single; ry: Single; color: ALLEGRO_COLOR); cdecl;
  al_draw_polyline: procedure(const vertices: PSingle; vertex_stride: Integer; vertex_count: Integer; join_style: Integer; cap_style: Integer; color: ALLEGRO_COLOR; thickness: Single; miter_limit: Single); cdecl;
  al_draw_polygon: procedure(const vertices: PSingle; vertex_count: Integer; join_style: Integer; color: ALLEGRO_COLOR; thickness: Single; miter_limit: Single); cdecl;
  al_draw_filled_polygon: procedure(const vertices: PSingle; vertex_count: Integer; color: ALLEGRO_COLOR); cdecl;
  al_draw_filled_polygon_with_holes: procedure(const vertices: PSingle; const vertex_counts: PInteger; color: ALLEGRO_COLOR); cdecl;
  al_load_ttf_font: function(const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_ttf_font_f: function(&file: PALLEGRO_FILE; const filename: PUTF8Char; size: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_ttf_font_stretch: function(const filename: PUTF8Char; w: Integer; h: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_load_ttf_font_stretch_f: function(&file: PALLEGRO_FILE; const filename: PUTF8Char; w: Integer; h: Integer; flags: Integer): PALLEGRO_FONT; cdecl;
  al_init_ttf_addon: function(): Boolean; cdecl;
  al_is_ttf_addon_initialized: function(): Boolean; cdecl;
  al_shutdown_ttf_addon: procedure(); cdecl;
  al_get_allegro_ttf_version: function(): UInt32; cdecl;
  al_open_video: function(const filename: PUTF8Char): PALLEGRO_VIDEO; cdecl;
  al_open_video_f: function(fp: PALLEGRO_FILE; const ident: PUTF8Char): PALLEGRO_VIDEO; cdecl;
  al_close_video: procedure(video: PALLEGRO_VIDEO); cdecl;
  al_start_video: procedure(video: PALLEGRO_VIDEO; mixer: PALLEGRO_MIXER); cdecl;
  al_start_video_with_voice: procedure(video: PALLEGRO_VIDEO; voice: PALLEGRO_VOICE); cdecl;
  al_get_video_event_source: function(video: PALLEGRO_VIDEO): PALLEGRO_EVENT_SOURCE; cdecl;
  al_set_video_playing: procedure(video: PALLEGRO_VIDEO; playing: Boolean); cdecl;
  al_is_video_playing: function(video: PALLEGRO_VIDEO): Boolean; cdecl;
  al_get_video_audio_rate: function(video: PALLEGRO_VIDEO): Double; cdecl;
  al_get_video_fps: function(video: PALLEGRO_VIDEO): Double; cdecl;
  al_get_video_scaled_width: function(video: PALLEGRO_VIDEO): Single; cdecl;
  al_get_video_scaled_height: function(video: PALLEGRO_VIDEO): Single; cdecl;
  al_get_video_frame: function(video: PALLEGRO_VIDEO): PALLEGRO_BITMAP; cdecl;
  al_get_video_position: function(video: PALLEGRO_VIDEO; which: ALLEGRO_VIDEO_POSITION_TYPE): Double; cdecl;
  al_seek_video: function(video: PALLEGRO_VIDEO; pos_in_seconds: Double): Boolean; cdecl;
  al_init_video_addon: function(): Boolean; cdecl;
  al_is_video_addon_initialized: function(): Boolean; cdecl;
  al_shutdown_video_addon: procedure(); cdecl;
  al_get_allegro_video_version: function(): UInt32; cdecl;
  al_identify_video_f: function(fp: PALLEGRO_FILE): PUTF8Char; cdecl;
  al_identify_video: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  al_get_win_window_handle: function(display: PALLEGRO_DISPLAY): HWND; cdecl;
  al_win_add_window_callback: function(display: PALLEGRO_DISPLAY; callback: al_win_add_window_callback_callback; userdata: Pointer): Boolean; cdecl;
  al_win_remove_window_callback: function(display: PALLEGRO_DISPLAY; callback: al_win_remove_window_callback_callback; userdata: Pointer): Boolean; cdecl;
  PHYSFS_getLinkedVersion: procedure(ver: PPHYSFS_Version); cdecl;
  PHYSFS_init: function(const argv0: PUTF8Char): Integer; cdecl;
  PHYSFS_deinit: function(): Integer; cdecl;
  PHYSFS_supportedArchiveTypes: function(): PPPHYSFS_ArchiveInfo; cdecl;
  PHYSFS_freeList: procedure(listVar: Pointer); cdecl;
  PHYSFS_getDirSeparator: function(): PUTF8Char; cdecl;
  PHYSFS_permitSymbolicLinks: procedure(allow: Integer); cdecl;
  PHYSFS_getCdRomDirs: function(): PPUTF8Char; cdecl;
  PHYSFS_getBaseDir: function(): PUTF8Char; cdecl;
  PHYSFS_getWriteDir: function(): PUTF8Char; cdecl;
  PHYSFS_setWriteDir: function(const newDir: PUTF8Char): Integer; cdecl;
  PHYSFS_getSearchPath: function(): PPUTF8Char; cdecl;
  PHYSFS_setSaneConfig: function(const organization: PUTF8Char; const appName: PUTF8Char; const archiveExt: PUTF8Char; includeCdRoms: Integer; archivesFirst: Integer): Integer; cdecl;
  PHYSFS_mkdir: function(const dirName: PUTF8Char): Integer; cdecl;
  PHYSFS_delete: function(const filename: PUTF8Char): Integer; cdecl;
  PHYSFS_getRealDir: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_enumerateFiles: function(const dir: PUTF8Char): PPUTF8Char; cdecl;
  PHYSFS_exists: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_openWrite: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openAppend: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openRead: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_close: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_eof: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_tell: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_seek: function(handle: PPHYSFS_File; pos: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_fileLength: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_setBuffer: function(handle: PPHYSFS_File; bufsize: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_flush: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_swapSLE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapULE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapSLE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapULE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapSLE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapULE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_swapSBE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapUBE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapSBE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapUBE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapSBE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapUBE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_readSLE16: function(&file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readULE16: function(&file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readSBE16: function(&file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readUBE16: function(&file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readSLE32: function(&file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readULE32: function(&file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readSBE32: function(&file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readUBE32: function(&file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readSLE64: function(&file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readULE64: function(&file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_readSBE64: function(&file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readUBE64: function(&file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_writeSLE16: function(&file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeULE16: function(&file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeSBE16: function(&file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeUBE16: function(&file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeSLE32: function(&file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeULE32: function(&file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeSBE32: function(&file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeUBE32: function(&file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeSLE64: function(&file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeULE64: function(&file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_writeSBE64: function(&file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeUBE64: function(&file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_isInit: function(): Integer; cdecl;
  PHYSFS_symbolicLinksPermitted: function(): Integer; cdecl;
  PHYSFS_setAllocator: function(const allocator: PPHYSFS_Allocator): Integer; cdecl;
  PHYSFS_mount: function(const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_getMountPoint: function(const dir: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getCdRomDirsCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_getSearchPathCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_utf8FromUcs4: procedure(const src: PPHYSFS_uint32; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUcs4: procedure(const src: PUTF8Char; dst: PPHYSFS_uint32; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUcs2: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUcs2: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromLatin1: procedure(const src: PUTF8Char; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_caseFold: function(const from: PHYSFS_uint32; &to: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_utf8stricmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  PHYSFS_utf16stricmp: function(const str1: PPHYSFS_uint16; const str2: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_ucs4stricmp: function(const str1: PPHYSFS_uint32; const str2: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_enumerate: function(const dir: PUTF8Char; c: PHYSFS_EnumerateCallback; d: Pointer): Integer; cdecl;
  PHYSFS_unmount: function(const oldDir: PUTF8Char): Integer; cdecl;
  PHYSFS_getAllocator: function(): PPHYSFS_Allocator; cdecl;
  PHYSFS_stat_rtn: function(const fname: PUTF8Char; stat: PPHYSFS_Stat): Integer; cdecl;
  PHYSFS_utf8FromUtf16: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUtf16: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_readBytes: function(handle: PPHYSFS_File; buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_writeBytes: function(handle: PPHYSFS_File; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_mountIo: function(io: PPHYSFS_Io; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountMemory: function(const buf: Pointer; len: PHYSFS_uint64; del: PHYSFS_mountMemory_del; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountHandle: function(&file: PPHYSFS_File; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_getLastErrorCode: function(): PHYSFS_ErrorCode; cdecl;
  PHYSFS_getErrorByCode: function(code: PHYSFS_ErrorCode): PUTF8Char; cdecl;
  PHYSFS_setErrorCode: procedure(code: PHYSFS_ErrorCode); cdecl;
  PHYSFS_getPrefDir: function(const org: PUTF8Char; const app: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_registerArchiver: function(const archiver: PPHYSFS_Archiver): Integer; cdecl;
  PHYSFS_deregisterArchiver: function(const ext: PUTF8Char): Integer; cdecl;
  crc32: function(crc: uLong; const buf: PBytef; len: uInt): uLong; cdecl;
  unzOpen64: function(const path: Pointer): unzFile; cdecl;
  unzLocateFile: function(&file: unzFile; const szFileName: PUTF8Char; iCaseSensitivity: Integer): Integer; cdecl;
  unzClose: function(&file: unzFile): Integer; cdecl;
  unzOpenCurrentFilePassword: function(&file: unzFile; const password: PUTF8Char): Integer; cdecl;
  unzGetCurrentFileInfo64: function(&file: unzFile; pfile_info: Punz_file_info64; szFileName: PUTF8Char; fileNameBufferSize: uLong; extraField: Pointer; extraFieldBufferSize: uLong; szComment: PUTF8Char; commentBufferSize: uLong): Integer; cdecl;
  unzReadCurrentFile: function(&file: unzFile; buf: voidp; len: Cardinal): Integer; cdecl;
  unzCloseCurrentFile: function(&file: unzFile): Integer; cdecl;
  unztell64: function(&file: unzFile): UInt64; cdecl;
  zipOpen64: function(const pathname: Pointer; append: Integer): zipFile; cdecl;
  zipOpenNewFileInZip3_64: function(&file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong; zip64: Integer): Integer; cdecl;
  zipWriteInFileInZip: function(&file: zipFile; const buf: Pointer; len: Cardinal): Integer; cdecl;
  zipCloseFileInZip: function(&file: zipFile): Integer; cdecl;
  zipClose: function(&file: zipFile; const global_comment: PUTF8Char): Integer; cdecl;

procedure GetExports(const aDLLHandle: THandle);

implementation

uses
  Dlluminator;

procedure GetExports(const aDLLHandle: THandle);
begin
  if aDllHandle = 0 then Exit;
  al_acknowledge_drawing_halt := GetProcAddress(aDLLHandle, 'al_acknowledge_drawing_halt');
  al_acknowledge_drawing_resume := GetProcAddress(aDLLHandle, 'al_acknowledge_drawing_resume');
  al_acknowledge_resize := GetProcAddress(aDLLHandle, 'al_acknowledge_resize');
  al_add_config_comment := GetProcAddress(aDLLHandle, 'al_add_config_comment');
  al_add_config_section := GetProcAddress(aDLLHandle, 'al_add_config_section');
  al_add_new_bitmap_flag := GetProcAddress(aDLLHandle, 'al_add_new_bitmap_flag');
  al_add_timer_count := GetProcAddress(aDLLHandle, 'al_add_timer_count');
  al_append_menu_item := GetProcAddress(aDLLHandle, 'al_append_menu_item');
  al_append_native_text_log := GetProcAddress(aDLLHandle, 'al_append_native_text_log');
  al_append_path_component := GetProcAddress(aDLLHandle, 'al_append_path_component');
  al_apply_window_constraints := GetProcAddress(aDLLHandle, 'al_apply_window_constraints');
  al_attach_audio_stream_to_mixer := GetProcAddress(aDLLHandle, 'al_attach_audio_stream_to_mixer');
  al_attach_audio_stream_to_voice := GetProcAddress(aDLLHandle, 'al_attach_audio_stream_to_voice');
  al_attach_mixer_to_mixer := GetProcAddress(aDLLHandle, 'al_attach_mixer_to_mixer');
  al_attach_mixer_to_voice := GetProcAddress(aDLLHandle, 'al_attach_mixer_to_voice');
  al_attach_sample_instance_to_mixer := GetProcAddress(aDLLHandle, 'al_attach_sample_instance_to_mixer');
  al_attach_sample_instance_to_voice := GetProcAddress(aDLLHandle, 'al_attach_sample_instance_to_voice');
  al_attach_shader_source := GetProcAddress(aDLLHandle, 'al_attach_shader_source');
  al_attach_shader_source_file := GetProcAddress(aDLLHandle, 'al_attach_shader_source_file');
  al_backup_dirty_bitmap := GetProcAddress(aDLLHandle, 'al_backup_dirty_bitmap');
  al_backup_dirty_bitmaps := GetProcAddress(aDLLHandle, 'al_backup_dirty_bitmaps');
  al_broadcast_cond := GetProcAddress(aDLLHandle, 'al_broadcast_cond');
  al_build_camera_transform := GetProcAddress(aDLLHandle, 'al_build_camera_transform');
  al_build_menu := GetProcAddress(aDLLHandle, 'al_build_menu');
  al_build_shader := GetProcAddress(aDLLHandle, 'al_build_shader');
  al_build_transform := GetProcAddress(aDLLHandle, 'al_build_transform');
  al_calculate_arc := GetProcAddress(aDLLHandle, 'al_calculate_arc');
  al_calculate_ribbon := GetProcAddress(aDLLHandle, 'al_calculate_ribbon');
  al_calculate_spline := GetProcAddress(aDLLHandle, 'al_calculate_spline');
  al_calloc_with_context := GetProcAddress(aDLLHandle, 'al_calloc_with_context');
  al_can_get_mouse_cursor_position := GetProcAddress(aDLLHandle, 'al_can_get_mouse_cursor_position');
  al_can_set_keyboard_leds := GetProcAddress(aDLLHandle, 'al_can_set_keyboard_leds');
  al_change_directory := GetProcAddress(aDLLHandle, 'al_change_directory');
  al_check_inverse := GetProcAddress(aDLLHandle, 'al_check_inverse');
  al_clear_depth_buffer := GetProcAddress(aDLLHandle, 'al_clear_depth_buffer');
  al_clear_keyboard_state := GetProcAddress(aDLLHandle, 'al_clear_keyboard_state');
  al_clear_to_color := GetProcAddress(aDLLHandle, 'al_clear_to_color');
  al_clipboard_has_text := GetProcAddress(aDLLHandle, 'al_clipboard_has_text');
  al_clone_bitmap := GetProcAddress(aDLLHandle, 'al_clone_bitmap');
  al_clone_menu := GetProcAddress(aDLLHandle, 'al_clone_menu');
  al_clone_menu_for_popup := GetProcAddress(aDLLHandle, 'al_clone_menu_for_popup');
  al_clone_path := GetProcAddress(aDLLHandle, 'al_clone_path');
  al_close_directory := GetProcAddress(aDLLHandle, 'al_close_directory');
  al_close_native_text_log := GetProcAddress(aDLLHandle, 'al_close_native_text_log');
  al_close_video := GetProcAddress(aDLLHandle, 'al_close_video');
  al_color_cmyk := GetProcAddress(aDLLHandle, 'al_color_cmyk');
  al_color_cmyk_to_rgb := GetProcAddress(aDLLHandle, 'al_color_cmyk_to_rgb');
  al_color_distance_ciede2000 := GetProcAddress(aDLLHandle, 'al_color_distance_ciede2000');
  al_color_hsl := GetProcAddress(aDLLHandle, 'al_color_hsl');
  al_color_hsl_to_rgb := GetProcAddress(aDLLHandle, 'al_color_hsl_to_rgb');
  al_color_hsv := GetProcAddress(aDLLHandle, 'al_color_hsv');
  al_color_hsv_to_rgb := GetProcAddress(aDLLHandle, 'al_color_hsv_to_rgb');
  al_color_html := GetProcAddress(aDLLHandle, 'al_color_html');
  al_color_html_to_rgb := GetProcAddress(aDLLHandle, 'al_color_html_to_rgb');
  al_color_lab := GetProcAddress(aDLLHandle, 'al_color_lab');
  al_color_lab_to_rgb := GetProcAddress(aDLLHandle, 'al_color_lab_to_rgb');
  al_color_lch := GetProcAddress(aDLLHandle, 'al_color_lch');
  al_color_lch_to_rgb := GetProcAddress(aDLLHandle, 'al_color_lch_to_rgb');
  al_color_linear := GetProcAddress(aDLLHandle, 'al_color_linear');
  al_color_linear_to_rgb := GetProcAddress(aDLLHandle, 'al_color_linear_to_rgb');
  al_color_name := GetProcAddress(aDLLHandle, 'al_color_name');
  al_color_name_to_rgb := GetProcAddress(aDLLHandle, 'al_color_name_to_rgb');
  al_color_oklab := GetProcAddress(aDLLHandle, 'al_color_oklab');
  al_color_oklab_to_rgb := GetProcAddress(aDLLHandle, 'al_color_oklab_to_rgb');
  al_color_rgb_to_cmyk := GetProcAddress(aDLLHandle, 'al_color_rgb_to_cmyk');
  al_color_rgb_to_hsl := GetProcAddress(aDLLHandle, 'al_color_rgb_to_hsl');
  al_color_rgb_to_hsv := GetProcAddress(aDLLHandle, 'al_color_rgb_to_hsv');
  al_color_rgb_to_html := GetProcAddress(aDLLHandle, 'al_color_rgb_to_html');
  al_color_rgb_to_lab := GetProcAddress(aDLLHandle, 'al_color_rgb_to_lab');
  al_color_rgb_to_lch := GetProcAddress(aDLLHandle, 'al_color_rgb_to_lch');
  al_color_rgb_to_linear := GetProcAddress(aDLLHandle, 'al_color_rgb_to_linear');
  al_color_rgb_to_name := GetProcAddress(aDLLHandle, 'al_color_rgb_to_name');
  al_color_rgb_to_oklab := GetProcAddress(aDLLHandle, 'al_color_rgb_to_oklab');
  al_color_rgb_to_xyy := GetProcAddress(aDLLHandle, 'al_color_rgb_to_xyy');
  al_color_rgb_to_xyz := GetProcAddress(aDLLHandle, 'al_color_rgb_to_xyz');
  al_color_rgb_to_yuv := GetProcAddress(aDLLHandle, 'al_color_rgb_to_yuv');
  al_color_xyy := GetProcAddress(aDLLHandle, 'al_color_xyy');
  al_color_xyy_to_rgb := GetProcAddress(aDLLHandle, 'al_color_xyy_to_rgb');
  al_color_xyz := GetProcAddress(aDLLHandle, 'al_color_xyz');
  al_color_xyz_to_rgb := GetProcAddress(aDLLHandle, 'al_color_xyz_to_rgb');
  al_color_yuv := GetProcAddress(aDLLHandle, 'al_color_yuv');
  al_color_yuv_to_rgb := GetProcAddress(aDLLHandle, 'al_color_yuv_to_rgb');
  al_compose_transform := GetProcAddress(aDLLHandle, 'al_compose_transform');
  al_convert_bitmap := GetProcAddress(aDLLHandle, 'al_convert_bitmap');
  al_convert_mask_to_alpha := GetProcAddress(aDLLHandle, 'al_convert_mask_to_alpha');
  al_convert_memory_bitmaps := GetProcAddress(aDLLHandle, 'al_convert_memory_bitmaps');
  al_copy_transform := GetProcAddress(aDLLHandle, 'al_copy_transform');
  al_create_audio_recorder := GetProcAddress(aDLLHandle, 'al_create_audio_recorder');
  al_create_audio_stream := GetProcAddress(aDLLHandle, 'al_create_audio_stream');
  al_create_bitmap := GetProcAddress(aDLLHandle, 'al_create_bitmap');
  al_create_builtin_font := GetProcAddress(aDLLHandle, 'al_create_builtin_font');
  al_create_cond := GetProcAddress(aDLLHandle, 'al_create_cond');
  al_create_config := GetProcAddress(aDLLHandle, 'al_create_config');
  al_create_display := GetProcAddress(aDLLHandle, 'al_create_display');
  al_create_event_queue := GetProcAddress(aDLLHandle, 'al_create_event_queue');
  al_create_file_handle := GetProcAddress(aDLLHandle, 'al_create_file_handle');
  al_create_fs_entry := GetProcAddress(aDLLHandle, 'al_create_fs_entry');
  al_create_index_buffer := GetProcAddress(aDLLHandle, 'al_create_index_buffer');
  al_create_menu := GetProcAddress(aDLLHandle, 'al_create_menu');
  al_create_mixer := GetProcAddress(aDLLHandle, 'al_create_mixer');
  al_create_mouse_cursor := GetProcAddress(aDLLHandle, 'al_create_mouse_cursor');
  al_create_mutex := GetProcAddress(aDLLHandle, 'al_create_mutex');
  al_create_mutex_recursive := GetProcAddress(aDLLHandle, 'al_create_mutex_recursive');
  al_create_native_file_dialog := GetProcAddress(aDLLHandle, 'al_create_native_file_dialog');
  al_create_path := GetProcAddress(aDLLHandle, 'al_create_path');
  al_create_path_for_directory := GetProcAddress(aDLLHandle, 'al_create_path_for_directory');
  al_create_popup_menu := GetProcAddress(aDLLHandle, 'al_create_popup_menu');
  al_create_sample := GetProcAddress(aDLLHandle, 'al_create_sample');
  al_create_sample_instance := GetProcAddress(aDLLHandle, 'al_create_sample_instance');
  al_create_shader := GetProcAddress(aDLLHandle, 'al_create_shader');
  al_create_sub_bitmap := GetProcAddress(aDLLHandle, 'al_create_sub_bitmap');
  al_create_thread := GetProcAddress(aDLLHandle, 'al_create_thread');
  al_create_thread_with_stacksize := GetProcAddress(aDLLHandle, 'al_create_thread_with_stacksize');
  al_create_timer := GetProcAddress(aDLLHandle, 'al_create_timer');
  al_create_vertex_buffer := GetProcAddress(aDLLHandle, 'al_create_vertex_buffer');
  al_create_vertex_decl := GetProcAddress(aDLLHandle, 'al_create_vertex_decl');
  al_create_voice := GetProcAddress(aDLLHandle, 'al_create_voice');
  al_cstr := GetProcAddress(aDLLHandle, 'al_cstr');
  al_cstr_dup := GetProcAddress(aDLLHandle, 'al_cstr_dup');
  al_destroy_audio_recorder := GetProcAddress(aDLLHandle, 'al_destroy_audio_recorder');
  al_destroy_audio_stream := GetProcAddress(aDLLHandle, 'al_destroy_audio_stream');
  al_destroy_bitmap := GetProcAddress(aDLLHandle, 'al_destroy_bitmap');
  al_destroy_cond := GetProcAddress(aDLLHandle, 'al_destroy_cond');
  al_destroy_config := GetProcAddress(aDLLHandle, 'al_destroy_config');
  al_destroy_display := GetProcAddress(aDLLHandle, 'al_destroy_display');
  al_destroy_event_queue := GetProcAddress(aDLLHandle, 'al_destroy_event_queue');
  al_destroy_font := GetProcAddress(aDLLHandle, 'al_destroy_font');
  al_destroy_fs_entry := GetProcAddress(aDLLHandle, 'al_destroy_fs_entry');
  al_destroy_index_buffer := GetProcAddress(aDLLHandle, 'al_destroy_index_buffer');
  al_destroy_menu := GetProcAddress(aDLLHandle, 'al_destroy_menu');
  al_destroy_mixer := GetProcAddress(aDLLHandle, 'al_destroy_mixer');
  al_destroy_mouse_cursor := GetProcAddress(aDLLHandle, 'al_destroy_mouse_cursor');
  al_destroy_mutex := GetProcAddress(aDLLHandle, 'al_destroy_mutex');
  al_destroy_native_file_dialog := GetProcAddress(aDLLHandle, 'al_destroy_native_file_dialog');
  al_destroy_path := GetProcAddress(aDLLHandle, 'al_destroy_path');
  al_destroy_sample := GetProcAddress(aDLLHandle, 'al_destroy_sample');
  al_destroy_sample_instance := GetProcAddress(aDLLHandle, 'al_destroy_sample_instance');
  al_destroy_shader := GetProcAddress(aDLLHandle, 'al_destroy_shader');
  al_destroy_thread := GetProcAddress(aDLLHandle, 'al_destroy_thread');
  al_destroy_timer := GetProcAddress(aDLLHandle, 'al_destroy_timer');
  al_destroy_user_event_source := GetProcAddress(aDLLHandle, 'al_destroy_user_event_source');
  al_destroy_vertex_buffer := GetProcAddress(aDLLHandle, 'al_destroy_vertex_buffer');
  al_destroy_vertex_decl := GetProcAddress(aDLLHandle, 'al_destroy_vertex_decl');
  al_destroy_voice := GetProcAddress(aDLLHandle, 'al_destroy_voice');
  al_detach_audio_stream := GetProcAddress(aDLLHandle, 'al_detach_audio_stream');
  al_detach_mixer := GetProcAddress(aDLLHandle, 'al_detach_mixer');
  al_detach_sample_instance := GetProcAddress(aDLLHandle, 'al_detach_sample_instance');
  al_detach_voice := GetProcAddress(aDLLHandle, 'al_detach_voice');
  al_disable_menu_event_source := GetProcAddress(aDLLHandle, 'al_disable_menu_event_source');
  al_do_multiline_text := GetProcAddress(aDLLHandle, 'al_do_multiline_text');
  al_do_multiline_ustr := GetProcAddress(aDLLHandle, 'al_do_multiline_ustr');
  al_drain_audio_stream := GetProcAddress(aDLLHandle, 'al_drain_audio_stream');
  al_draw_arc := GetProcAddress(aDLLHandle, 'al_draw_arc');
  al_draw_bitmap := GetProcAddress(aDLLHandle, 'al_draw_bitmap');
  al_draw_bitmap_region := GetProcAddress(aDLLHandle, 'al_draw_bitmap_region');
  al_draw_circle := GetProcAddress(aDLLHandle, 'al_draw_circle');
  al_draw_ellipse := GetProcAddress(aDLLHandle, 'al_draw_ellipse');
  al_draw_elliptical_arc := GetProcAddress(aDLLHandle, 'al_draw_elliptical_arc');
  al_draw_filled_circle := GetProcAddress(aDLLHandle, 'al_draw_filled_circle');
  al_draw_filled_ellipse := GetProcAddress(aDLLHandle, 'al_draw_filled_ellipse');
  al_draw_filled_pieslice := GetProcAddress(aDLLHandle, 'al_draw_filled_pieslice');
  al_draw_filled_polygon := GetProcAddress(aDLLHandle, 'al_draw_filled_polygon');
  al_draw_filled_polygon_with_holes := GetProcAddress(aDLLHandle, 'al_draw_filled_polygon_with_holes');
  al_draw_filled_rectangle := GetProcAddress(aDLLHandle, 'al_draw_filled_rectangle');
  al_draw_filled_rounded_rectangle := GetProcAddress(aDLLHandle, 'al_draw_filled_rounded_rectangle');
  al_draw_filled_triangle := GetProcAddress(aDLLHandle, 'al_draw_filled_triangle');
  al_draw_glyph := GetProcAddress(aDLLHandle, 'al_draw_glyph');
  al_draw_indexed_buffer := GetProcAddress(aDLLHandle, 'al_draw_indexed_buffer');
  al_draw_indexed_prim := GetProcAddress(aDLLHandle, 'al_draw_indexed_prim');
  al_draw_justified_text := GetProcAddress(aDLLHandle, 'al_draw_justified_text');
  al_draw_justified_textf := GetProcAddress(aDLLHandle, 'al_draw_justified_textf');
  al_draw_justified_ustr := GetProcAddress(aDLLHandle, 'al_draw_justified_ustr');
  al_draw_line := GetProcAddress(aDLLHandle, 'al_draw_line');
  al_draw_multiline_text := GetProcAddress(aDLLHandle, 'al_draw_multiline_text');
  al_draw_multiline_textf := GetProcAddress(aDLLHandle, 'al_draw_multiline_textf');
  al_draw_multiline_ustr := GetProcAddress(aDLLHandle, 'al_draw_multiline_ustr');
  al_draw_pieslice := GetProcAddress(aDLLHandle, 'al_draw_pieslice');
  al_draw_pixel := GetProcAddress(aDLLHandle, 'al_draw_pixel');
  al_draw_polygon := GetProcAddress(aDLLHandle, 'al_draw_polygon');
  al_draw_polyline := GetProcAddress(aDLLHandle, 'al_draw_polyline');
  al_draw_prim := GetProcAddress(aDLLHandle, 'al_draw_prim');
  al_draw_rectangle := GetProcAddress(aDLLHandle, 'al_draw_rectangle');
  al_draw_ribbon := GetProcAddress(aDLLHandle, 'al_draw_ribbon');
  al_draw_rotated_bitmap := GetProcAddress(aDLLHandle, 'al_draw_rotated_bitmap');
  al_draw_rounded_rectangle := GetProcAddress(aDLLHandle, 'al_draw_rounded_rectangle');
  al_draw_scaled_bitmap := GetProcAddress(aDLLHandle, 'al_draw_scaled_bitmap');
  al_draw_scaled_rotated_bitmap := GetProcAddress(aDLLHandle, 'al_draw_scaled_rotated_bitmap');
  al_draw_soft_line := GetProcAddress(aDLLHandle, 'al_draw_soft_line');
  al_draw_soft_triangle := GetProcAddress(aDLLHandle, 'al_draw_soft_triangle');
  al_draw_spline := GetProcAddress(aDLLHandle, 'al_draw_spline');
  al_draw_text := GetProcAddress(aDLLHandle, 'al_draw_text');
  al_draw_textf := GetProcAddress(aDLLHandle, 'al_draw_textf');
  al_draw_tinted_bitmap := GetProcAddress(aDLLHandle, 'al_draw_tinted_bitmap');
  al_draw_tinted_bitmap_region := GetProcAddress(aDLLHandle, 'al_draw_tinted_bitmap_region');
  al_draw_tinted_rotated_bitmap := GetProcAddress(aDLLHandle, 'al_draw_tinted_rotated_bitmap');
  al_draw_tinted_scaled_bitmap := GetProcAddress(aDLLHandle, 'al_draw_tinted_scaled_bitmap');
  al_draw_tinted_scaled_rotated_bitmap := GetProcAddress(aDLLHandle, 'al_draw_tinted_scaled_rotated_bitmap');
  al_draw_tinted_scaled_rotated_bitmap_region := GetProcAddress(aDLLHandle, 'al_draw_tinted_scaled_rotated_bitmap_region');
  al_draw_triangle := GetProcAddress(aDLLHandle, 'al_draw_triangle');
  al_draw_ustr := GetProcAddress(aDLLHandle, 'al_draw_ustr');
  al_draw_vertex_buffer := GetProcAddress(aDLLHandle, 'al_draw_vertex_buffer');
  al_drop_next_event := GetProcAddress(aDLLHandle, 'al_drop_next_event');
  al_drop_path_tail := GetProcAddress(aDLLHandle, 'al_drop_path_tail');
  al_emit_user_event := GetProcAddress(aDLLHandle, 'al_emit_user_event');
  al_enable_menu_event_source := GetProcAddress(aDLLHandle, 'al_enable_menu_event_source');
  al_fclearerr := GetProcAddress(aDLLHandle, 'al_fclearerr');
  al_fclose := GetProcAddress(aDLLHandle, 'al_fclose');
  al_feof := GetProcAddress(aDLLHandle, 'al_feof');
  al_ferrmsg := GetProcAddress(aDLLHandle, 'al_ferrmsg');
  al_ferror := GetProcAddress(aDLLHandle, 'al_ferror');
  al_fflush := GetProcAddress(aDLLHandle, 'al_fflush');
  al_fget_ustr := GetProcAddress(aDLLHandle, 'al_fget_ustr');
  al_fgetc := GetProcAddress(aDLLHandle, 'al_fgetc');
  al_fgets := GetProcAddress(aDLLHandle, 'al_fgets');
  al_filename_exists := GetProcAddress(aDLLHandle, 'al_filename_exists');
  al_fill_silence := GetProcAddress(aDLLHandle, 'al_fill_silence');
  al_find_menu := GetProcAddress(aDLLHandle, 'al_find_menu');
  al_find_menu_item := GetProcAddress(aDLLHandle, 'al_find_menu_item');
  al_fixatan := GetProcAddress(aDLLHandle, 'al_fixatan');
  al_fixatan2 := GetProcAddress(aDLLHandle, 'al_fixatan2');
  al_fixhypot := GetProcAddress(aDLLHandle, 'al_fixhypot');
  al_fixsqrt := GetProcAddress(aDLLHandle, 'al_fixsqrt');
  al_flip_display := GetProcAddress(aDLLHandle, 'al_flip_display');
  al_flush_event_queue := GetProcAddress(aDLLHandle, 'al_flush_event_queue');
  al_fopen := GetProcAddress(aDLLHandle, 'al_fopen');
  al_fopen_fd := GetProcAddress(aDLLHandle, 'al_fopen_fd');
  al_fopen_interface := GetProcAddress(aDLLHandle, 'al_fopen_interface');
  al_fopen_slice := GetProcAddress(aDLLHandle, 'al_fopen_slice');
  al_for_each_fs_entry := GetProcAddress(aDLLHandle, 'al_for_each_fs_entry');
  al_fprintf := GetProcAddress(aDLLHandle, 'al_fprintf');
  al_fputc := GetProcAddress(aDLLHandle, 'al_fputc');
  al_fputs := GetProcAddress(aDLLHandle, 'al_fputs');
  al_fread := GetProcAddress(aDLLHandle, 'al_fread');
  al_fread16be := GetProcAddress(aDLLHandle, 'al_fread16be');
  al_fread16le := GetProcAddress(aDLLHandle, 'al_fread16le');
  al_fread32be := GetProcAddress(aDLLHandle, 'al_fread32be');
  al_fread32le := GetProcAddress(aDLLHandle, 'al_fread32le');
  al_free_with_context := GetProcAddress(aDLLHandle, 'al_free_with_context');
  al_fs_entry_exists := GetProcAddress(aDLLHandle, 'al_fs_entry_exists');
  al_fseek := GetProcAddress(aDLLHandle, 'al_fseek');
  al_fsize := GetProcAddress(aDLLHandle, 'al_fsize');
  al_ftell := GetProcAddress(aDLLHandle, 'al_ftell');
  al_fungetc := GetProcAddress(aDLLHandle, 'al_fungetc');
  al_fwrite := GetProcAddress(aDLLHandle, 'al_fwrite');
  al_fwrite16be := GetProcAddress(aDLLHandle, 'al_fwrite16be');
  al_fwrite16le := GetProcAddress(aDLLHandle, 'al_fwrite16le');
  al_fwrite32be := GetProcAddress(aDLLHandle, 'al_fwrite32be');
  al_fwrite32le := GetProcAddress(aDLLHandle, 'al_fwrite32le');
  al_get_allegro_acodec_version := GetProcAddress(aDLLHandle, 'al_get_allegro_acodec_version');
  al_get_allegro_audio_version := GetProcAddress(aDLLHandle, 'al_get_allegro_audio_version');
  al_get_allegro_color_version := GetProcAddress(aDLLHandle, 'al_get_allegro_color_version');
  al_get_allegro_font_version := GetProcAddress(aDLLHandle, 'al_get_allegro_font_version');
  al_get_allegro_image_version := GetProcAddress(aDLLHandle, 'al_get_allegro_image_version');
  al_get_allegro_memfile_version := GetProcAddress(aDLLHandle, 'al_get_allegro_memfile_version');
  al_get_allegro_native_dialog_version := GetProcAddress(aDLLHandle, 'al_get_allegro_native_dialog_version');
  al_get_allegro_physfs_version := GetProcAddress(aDLLHandle, 'al_get_allegro_physfs_version');
  al_get_allegro_primitives_version := GetProcAddress(aDLLHandle, 'al_get_allegro_primitives_version');
  al_get_allegro_ttf_version := GetProcAddress(aDLLHandle, 'al_get_allegro_ttf_version');
  al_get_allegro_version := GetProcAddress(aDLLHandle, 'al_get_allegro_version');
  al_get_allegro_video_version := GetProcAddress(aDLLHandle, 'al_get_allegro_video_version');
  al_get_app_name := GetProcAddress(aDLLHandle, 'al_get_app_name');
  al_get_audio_depth_size := GetProcAddress(aDLLHandle, 'al_get_audio_depth_size');
  al_get_audio_device_name := GetProcAddress(aDLLHandle, 'al_get_audio_device_name');
  al_get_audio_output_device := GetProcAddress(aDLLHandle, 'al_get_audio_output_device');
  al_get_audio_recorder_event := GetProcAddress(aDLLHandle, 'al_get_audio_recorder_event');
  al_get_audio_recorder_event_source := GetProcAddress(aDLLHandle, 'al_get_audio_recorder_event_source');
  al_get_audio_stream_attached := GetProcAddress(aDLLHandle, 'al_get_audio_stream_attached');
  al_get_audio_stream_channels := GetProcAddress(aDLLHandle, 'al_get_audio_stream_channels');
  al_get_audio_stream_depth := GetProcAddress(aDLLHandle, 'al_get_audio_stream_depth');
  al_get_audio_stream_event_source := GetProcAddress(aDLLHandle, 'al_get_audio_stream_event_source');
  al_get_audio_stream_fragment := GetProcAddress(aDLLHandle, 'al_get_audio_stream_fragment');
  al_get_audio_stream_fragments := GetProcAddress(aDLLHandle, 'al_get_audio_stream_fragments');
  al_get_audio_stream_frequency := GetProcAddress(aDLLHandle, 'al_get_audio_stream_frequency');
  al_get_audio_stream_gain := GetProcAddress(aDLLHandle, 'al_get_audio_stream_gain');
  al_get_audio_stream_length := GetProcAddress(aDLLHandle, 'al_get_audio_stream_length');
  al_get_audio_stream_length_secs := GetProcAddress(aDLLHandle, 'al_get_audio_stream_length_secs');
  al_get_audio_stream_pan := GetProcAddress(aDLLHandle, 'al_get_audio_stream_pan');
  al_get_audio_stream_played_samples := GetProcAddress(aDLLHandle, 'al_get_audio_stream_played_samples');
  al_get_audio_stream_playing := GetProcAddress(aDLLHandle, 'al_get_audio_stream_playing');
  al_get_audio_stream_playmode := GetProcAddress(aDLLHandle, 'al_get_audio_stream_playmode');
  al_get_audio_stream_position_secs := GetProcAddress(aDLLHandle, 'al_get_audio_stream_position_secs');
  al_get_audio_stream_speed := GetProcAddress(aDLLHandle, 'al_get_audio_stream_speed');
  al_get_available_audio_stream_fragments := GetProcAddress(aDLLHandle, 'al_get_available_audio_stream_fragments');
  al_get_backbuffer := GetProcAddress(aDLLHandle, 'al_get_backbuffer');
  al_get_bitmap_blend_color := GetProcAddress(aDLLHandle, 'al_get_bitmap_blend_color');
  al_get_bitmap_blender := GetProcAddress(aDLLHandle, 'al_get_bitmap_blender');
  al_get_bitmap_depth := GetProcAddress(aDLLHandle, 'al_get_bitmap_depth');
  al_get_bitmap_flags := GetProcAddress(aDLLHandle, 'al_get_bitmap_flags');
  al_get_bitmap_format := GetProcAddress(aDLLHandle, 'al_get_bitmap_format');
  al_get_bitmap_height := GetProcAddress(aDLLHandle, 'al_get_bitmap_height');
  al_get_bitmap_samples := GetProcAddress(aDLLHandle, 'al_get_bitmap_samples');
  al_get_bitmap_width := GetProcAddress(aDLLHandle, 'al_get_bitmap_width');
  al_get_bitmap_x := GetProcAddress(aDLLHandle, 'al_get_bitmap_x');
  al_get_bitmap_y := GetProcAddress(aDLLHandle, 'al_get_bitmap_y');
  al_get_blend_color := GetProcAddress(aDLLHandle, 'al_get_blend_color');
  al_get_blender := GetProcAddress(aDLLHandle, 'al_get_blender');
  al_get_channel_count := GetProcAddress(aDLLHandle, 'al_get_channel_count');
  al_get_clipboard_text := GetProcAddress(aDLLHandle, 'al_get_clipboard_text');
  al_get_clipping_rectangle := GetProcAddress(aDLLHandle, 'al_get_clipping_rectangle');
  al_get_config_value := GetProcAddress(aDLLHandle, 'al_get_config_value');
  al_get_cpu_count := GetProcAddress(aDLLHandle, 'al_get_cpu_count');
  al_get_current_directory := GetProcAddress(aDLLHandle, 'al_get_current_directory');
  al_get_current_display := GetProcAddress(aDLLHandle, 'al_get_current_display');
  al_get_current_inverse_transform := GetProcAddress(aDLLHandle, 'al_get_current_inverse_transform');
  al_get_current_projection_transform := GetProcAddress(aDLLHandle, 'al_get_current_projection_transform');
  al_get_current_shader := GetProcAddress(aDLLHandle, 'al_get_current_shader');
  al_get_current_transform := GetProcAddress(aDLLHandle, 'al_get_current_transform');
  al_get_default_menu_event_source := GetProcAddress(aDLLHandle, 'al_get_default_menu_event_source');
  al_get_default_mixer := GetProcAddress(aDLLHandle, 'al_get_default_mixer');
  al_get_default_shader_source := GetProcAddress(aDLLHandle, 'al_get_default_shader_source');
  al_get_default_voice := GetProcAddress(aDLLHandle, 'al_get_default_voice');
  al_get_display_adapter := GetProcAddress(aDLLHandle, 'al_get_display_adapter');
  al_get_display_event_source := GetProcAddress(aDLLHandle, 'al_get_display_event_source');
  al_get_display_flags := GetProcAddress(aDLLHandle, 'al_get_display_flags');
  al_get_display_format := GetProcAddress(aDLLHandle, 'al_get_display_format');
  al_get_display_height := GetProcAddress(aDLLHandle, 'al_get_display_height');
  al_get_display_menu := GetProcAddress(aDLLHandle, 'al_get_display_menu');
  al_get_display_mode := GetProcAddress(aDLLHandle, 'al_get_display_mode');
  al_get_display_option := GetProcAddress(aDLLHandle, 'al_get_display_option');
  al_get_display_orientation := GetProcAddress(aDLLHandle, 'al_get_display_orientation');
  al_get_display_refresh_rate := GetProcAddress(aDLLHandle, 'al_get_display_refresh_rate');
  al_get_display_width := GetProcAddress(aDLLHandle, 'al_get_display_width');
  al_get_errno := GetProcAddress(aDLLHandle, 'al_get_errno');
  al_get_event_source_data := GetProcAddress(aDLLHandle, 'al_get_event_source_data');
  al_get_fallback_font := GetProcAddress(aDLLHandle, 'al_get_fallback_font');
  al_get_file_userdata := GetProcAddress(aDLLHandle, 'al_get_file_userdata');
  al_get_first_config_entry := GetProcAddress(aDLLHandle, 'al_get_first_config_entry');
  al_get_first_config_section := GetProcAddress(aDLLHandle, 'al_get_first_config_section');
  al_get_font_ascent := GetProcAddress(aDLLHandle, 'al_get_font_ascent');
  al_get_font_descent := GetProcAddress(aDLLHandle, 'al_get_font_descent');
  al_get_font_line_height := GetProcAddress(aDLLHandle, 'al_get_font_line_height');
  al_get_font_ranges := GetProcAddress(aDLLHandle, 'al_get_font_ranges');
  al_get_fs_entry_atime := GetProcAddress(aDLLHandle, 'al_get_fs_entry_atime');
  al_get_fs_entry_ctime := GetProcAddress(aDLLHandle, 'al_get_fs_entry_ctime');
  al_get_fs_entry_mode := GetProcAddress(aDLLHandle, 'al_get_fs_entry_mode');
  al_get_fs_entry_mtime := GetProcAddress(aDLLHandle, 'al_get_fs_entry_mtime');
  al_get_fs_entry_name := GetProcAddress(aDLLHandle, 'al_get_fs_entry_name');
  al_get_fs_entry_size := GetProcAddress(aDLLHandle, 'al_get_fs_entry_size');
  al_get_fs_interface := GetProcAddress(aDLLHandle, 'al_get_fs_interface');
  al_get_glyph := GetProcAddress(aDLLHandle, 'al_get_glyph');
  al_get_glyph_advance := GetProcAddress(aDLLHandle, 'al_get_glyph_advance');
  al_get_glyph_dimensions := GetProcAddress(aDLLHandle, 'al_get_glyph_dimensions');
  al_get_glyph_width := GetProcAddress(aDLLHandle, 'al_get_glyph_width');
  al_get_haptic_autocenter := GetProcAddress(aDLLHandle, 'al_get_haptic_autocenter');
  al_get_haptic_capabilities := GetProcAddress(aDLLHandle, 'al_get_haptic_capabilities');
  al_get_haptic_effect_duration := GetProcAddress(aDLLHandle, 'al_get_haptic_effect_duration');
  al_get_haptic_from_display := GetProcAddress(aDLLHandle, 'al_get_haptic_from_display');
  al_get_haptic_from_joystick := GetProcAddress(aDLLHandle, 'al_get_haptic_from_joystick');
  al_get_haptic_from_keyboard := GetProcAddress(aDLLHandle, 'al_get_haptic_from_keyboard');
  al_get_haptic_from_mouse := GetProcAddress(aDLLHandle, 'al_get_haptic_from_mouse');
  al_get_haptic_from_touch_input := GetProcAddress(aDLLHandle, 'al_get_haptic_from_touch_input');
  al_get_haptic_gain := GetProcAddress(aDLLHandle, 'al_get_haptic_gain');
  al_get_index_buffer_size := GetProcAddress(aDLLHandle, 'al_get_index_buffer_size');
  al_get_joystick := GetProcAddress(aDLLHandle, 'al_get_joystick');
  al_get_joystick_active := GetProcAddress(aDLLHandle, 'al_get_joystick_active');
  al_get_joystick_axis_name := GetProcAddress(aDLLHandle, 'al_get_joystick_axis_name');
  al_get_joystick_button_name := GetProcAddress(aDLLHandle, 'al_get_joystick_button_name');
  al_get_joystick_event_source := GetProcAddress(aDLLHandle, 'al_get_joystick_event_source');
  al_get_joystick_guid := GetProcAddress(aDLLHandle, 'al_get_joystick_guid');
  al_get_joystick_name := GetProcAddress(aDLLHandle, 'al_get_joystick_name');
  al_get_joystick_num_axes := GetProcAddress(aDLLHandle, 'al_get_joystick_num_axes');
  al_get_joystick_num_buttons := GetProcAddress(aDLLHandle, 'al_get_joystick_num_buttons');
  al_get_joystick_num_sticks := GetProcAddress(aDLLHandle, 'al_get_joystick_num_sticks');
  al_get_joystick_state := GetProcAddress(aDLLHandle, 'al_get_joystick_state');
  al_get_joystick_stick_flags := GetProcAddress(aDLLHandle, 'al_get_joystick_stick_flags');
  al_get_joystick_stick_name := GetProcAddress(aDLLHandle, 'al_get_joystick_stick_name');
  al_get_joystick_type := GetProcAddress(aDLLHandle, 'al_get_joystick_type');
  al_get_keyboard_event_source := GetProcAddress(aDLLHandle, 'al_get_keyboard_event_source');
  al_get_keyboard_state := GetProcAddress(aDLLHandle, 'al_get_keyboard_state');
  al_get_max_haptic_effects := GetProcAddress(aDLLHandle, 'al_get_max_haptic_effects');
  al_get_menu_item_caption := GetProcAddress(aDLLHandle, 'al_get_menu_item_caption');
  al_get_menu_item_flags := GetProcAddress(aDLLHandle, 'al_get_menu_item_flags');
  al_get_menu_item_icon := GetProcAddress(aDLLHandle, 'al_get_menu_item_icon');
  al_get_mixer_attached := GetProcAddress(aDLLHandle, 'al_get_mixer_attached');
  al_get_mixer_channels := GetProcAddress(aDLLHandle, 'al_get_mixer_channels');
  al_get_mixer_depth := GetProcAddress(aDLLHandle, 'al_get_mixer_depth');
  al_get_mixer_frequency := GetProcAddress(aDLLHandle, 'al_get_mixer_frequency');
  al_get_mixer_gain := GetProcAddress(aDLLHandle, 'al_get_mixer_gain');
  al_get_mixer_playing := GetProcAddress(aDLLHandle, 'al_get_mixer_playing');
  al_get_mixer_quality := GetProcAddress(aDLLHandle, 'al_get_mixer_quality');
  al_get_monitor_dpi := GetProcAddress(aDLLHandle, 'al_get_monitor_dpi');
  al_get_monitor_info := GetProcAddress(aDLLHandle, 'al_get_monitor_info');
  al_get_monitor_refresh_rate := GetProcAddress(aDLLHandle, 'al_get_monitor_refresh_rate');
  al_get_mouse_cursor_position := GetProcAddress(aDLLHandle, 'al_get_mouse_cursor_position');
  al_get_mouse_emulation_mode := GetProcAddress(aDLLHandle, 'al_get_mouse_emulation_mode');
  al_get_mouse_event_source := GetProcAddress(aDLLHandle, 'al_get_mouse_event_source');
  al_get_mouse_num_axes := GetProcAddress(aDLLHandle, 'al_get_mouse_num_axes');
  al_get_mouse_num_buttons := GetProcAddress(aDLLHandle, 'al_get_mouse_num_buttons');
  al_get_mouse_state := GetProcAddress(aDLLHandle, 'al_get_mouse_state');
  al_get_mouse_state_axis := GetProcAddress(aDLLHandle, 'al_get_mouse_state_axis');
  al_get_mouse_wheel_precision := GetProcAddress(aDLLHandle, 'al_get_mouse_wheel_precision');
  al_get_native_file_dialog_count := GetProcAddress(aDLLHandle, 'al_get_native_file_dialog_count');
  al_get_native_file_dialog_path := GetProcAddress(aDLLHandle, 'al_get_native_file_dialog_path');
  al_get_native_text_log_event_source := GetProcAddress(aDLLHandle, 'al_get_native_text_log_event_source');
  al_get_new_bitmap_depth := GetProcAddress(aDLLHandle, 'al_get_new_bitmap_depth');
  al_get_new_bitmap_flags := GetProcAddress(aDLLHandle, 'al_get_new_bitmap_flags');
  al_get_new_bitmap_format := GetProcAddress(aDLLHandle, 'al_get_new_bitmap_format');
  al_get_new_bitmap_samples := GetProcAddress(aDLLHandle, 'al_get_new_bitmap_samples');
  al_get_new_bitmap_wrap := GetProcAddress(aDLLHandle, 'al_get_new_bitmap_wrap');
  al_get_new_display_adapter := GetProcAddress(aDLLHandle, 'al_get_new_display_adapter');
  al_get_new_display_flags := GetProcAddress(aDLLHandle, 'al_get_new_display_flags');
  al_get_new_display_option := GetProcAddress(aDLLHandle, 'al_get_new_display_option');
  al_get_new_display_refresh_rate := GetProcAddress(aDLLHandle, 'al_get_new_display_refresh_rate');
  al_get_new_file_interface := GetProcAddress(aDLLHandle, 'al_get_new_file_interface');
  al_get_new_window_position := GetProcAddress(aDLLHandle, 'al_get_new_window_position');
  al_get_new_window_title := GetProcAddress(aDLLHandle, 'al_get_new_window_title');
  al_get_next_config_entry := GetProcAddress(aDLLHandle, 'al_get_next_config_entry');
  al_get_next_config_section := GetProcAddress(aDLLHandle, 'al_get_next_config_section');
  al_get_next_event := GetProcAddress(aDLLHandle, 'al_get_next_event');
  al_get_num_audio_output_devices := GetProcAddress(aDLLHandle, 'al_get_num_audio_output_devices');
  al_get_num_display_modes := GetProcAddress(aDLLHandle, 'al_get_num_display_modes');
  al_get_num_joysticks := GetProcAddress(aDLLHandle, 'al_get_num_joysticks');
  al_get_num_video_adapters := GetProcAddress(aDLLHandle, 'al_get_num_video_adapters');
  al_get_org_name := GetProcAddress(aDLLHandle, 'al_get_org_name');
  al_get_parent_bitmap := GetProcAddress(aDLLHandle, 'al_get_parent_bitmap');
  al_get_path_basename := GetProcAddress(aDLLHandle, 'al_get_path_basename');
  al_get_path_component := GetProcAddress(aDLLHandle, 'al_get_path_component');
  al_get_path_drive := GetProcAddress(aDLLHandle, 'al_get_path_drive');
  al_get_path_extension := GetProcAddress(aDLLHandle, 'al_get_path_extension');
  al_get_path_filename := GetProcAddress(aDLLHandle, 'al_get_path_filename');
  al_get_path_num_components := GetProcAddress(aDLLHandle, 'al_get_path_num_components');
  al_get_path_tail := GetProcAddress(aDLLHandle, 'al_get_path_tail');
  al_get_pixel := GetProcAddress(aDLLHandle, 'al_get_pixel');
  al_get_pixel_block_height := GetProcAddress(aDLLHandle, 'al_get_pixel_block_height');
  al_get_pixel_block_size := GetProcAddress(aDLLHandle, 'al_get_pixel_block_size');
  al_get_pixel_block_width := GetProcAddress(aDLLHandle, 'al_get_pixel_block_width');
  al_get_pixel_format_bits := GetProcAddress(aDLLHandle, 'al_get_pixel_format_bits');
  al_get_pixel_size := GetProcAddress(aDLLHandle, 'al_get_pixel_size');
  al_get_ram_size := GetProcAddress(aDLLHandle, 'al_get_ram_size');
  al_get_render_state := GetProcAddress(aDLLHandle, 'al_get_render_state');
  al_get_sample := GetProcAddress(aDLLHandle, 'al_get_sample');
  al_get_sample_channels := GetProcAddress(aDLLHandle, 'al_get_sample_channels');
  al_get_sample_data := GetProcAddress(aDLLHandle, 'al_get_sample_data');
  al_get_sample_depth := GetProcAddress(aDLLHandle, 'al_get_sample_depth');
  al_get_sample_frequency := GetProcAddress(aDLLHandle, 'al_get_sample_frequency');
  al_get_sample_instance_attached := GetProcAddress(aDLLHandle, 'al_get_sample_instance_attached');
  al_get_sample_instance_channels := GetProcAddress(aDLLHandle, 'al_get_sample_instance_channels');
  al_get_sample_instance_depth := GetProcAddress(aDLLHandle, 'al_get_sample_instance_depth');
  al_get_sample_instance_frequency := GetProcAddress(aDLLHandle, 'al_get_sample_instance_frequency');
  al_get_sample_instance_gain := GetProcAddress(aDLLHandle, 'al_get_sample_instance_gain');
  al_get_sample_instance_length := GetProcAddress(aDLLHandle, 'al_get_sample_instance_length');
  al_get_sample_instance_pan := GetProcAddress(aDLLHandle, 'al_get_sample_instance_pan');
  al_get_sample_instance_playing := GetProcAddress(aDLLHandle, 'al_get_sample_instance_playing');
  al_get_sample_instance_playmode := GetProcAddress(aDLLHandle, 'al_get_sample_instance_playmode');
  al_get_sample_instance_position := GetProcAddress(aDLLHandle, 'al_get_sample_instance_position');
  al_get_sample_instance_speed := GetProcAddress(aDLLHandle, 'al_get_sample_instance_speed');
  al_get_sample_instance_time := GetProcAddress(aDLLHandle, 'al_get_sample_instance_time');
  al_get_sample_length := GetProcAddress(aDLLHandle, 'al_get_sample_length');
  al_get_separate_bitmap_blender := GetProcAddress(aDLLHandle, 'al_get_separate_bitmap_blender');
  al_get_separate_blender := GetProcAddress(aDLLHandle, 'al_get_separate_blender');
  al_get_shader_log := GetProcAddress(aDLLHandle, 'al_get_shader_log');
  al_get_shader_platform := GetProcAddress(aDLLHandle, 'al_get_shader_platform');
  al_get_standard_path := GetProcAddress(aDLLHandle, 'al_get_standard_path');
  al_get_system_config := GetProcAddress(aDLLHandle, 'al_get_system_config');
  al_get_system_driver := GetProcAddress(aDLLHandle, 'al_get_system_driver');
  al_get_system_id := GetProcAddress(aDLLHandle, 'al_get_system_id');
  al_get_target_bitmap := GetProcAddress(aDLLHandle, 'al_get_target_bitmap');
  al_get_text_dimensions := GetProcAddress(aDLLHandle, 'al_get_text_dimensions');
  al_get_text_width := GetProcAddress(aDLLHandle, 'al_get_text_width');
  al_get_thread_should_stop := GetProcAddress(aDLLHandle, 'al_get_thread_should_stop');
  al_get_time := GetProcAddress(aDLLHandle, 'al_get_time');
  al_get_timer_count := GetProcAddress(aDLLHandle, 'al_get_timer_count');
  al_get_timer_event_source := GetProcAddress(aDLLHandle, 'al_get_timer_event_source');
  al_get_timer_speed := GetProcAddress(aDLLHandle, 'al_get_timer_speed');
  al_get_timer_started := GetProcAddress(aDLLHandle, 'al_get_timer_started');
  al_get_touch_input_event_source := GetProcAddress(aDLLHandle, 'al_get_touch_input_event_source');
  al_get_touch_input_mouse_emulation_event_source := GetProcAddress(aDLLHandle, 'al_get_touch_input_mouse_emulation_event_source');
  al_get_touch_input_state := GetProcAddress(aDLLHandle, 'al_get_touch_input_state');
  al_get_ustr_dimensions := GetProcAddress(aDLLHandle, 'al_get_ustr_dimensions');
  al_get_ustr_width := GetProcAddress(aDLLHandle, 'al_get_ustr_width');
  al_get_vertex_buffer_size := GetProcAddress(aDLLHandle, 'al_get_vertex_buffer_size');
  al_get_video_audio_rate := GetProcAddress(aDLLHandle, 'al_get_video_audio_rate');
  al_get_video_event_source := GetProcAddress(aDLLHandle, 'al_get_video_event_source');
  al_get_video_fps := GetProcAddress(aDLLHandle, 'al_get_video_fps');
  al_get_video_frame := GetProcAddress(aDLLHandle, 'al_get_video_frame');
  al_get_video_position := GetProcAddress(aDLLHandle, 'al_get_video_position');
  al_get_video_scaled_height := GetProcAddress(aDLLHandle, 'al_get_video_scaled_height');
  al_get_video_scaled_width := GetProcAddress(aDLLHandle, 'al_get_video_scaled_width');
  al_get_voice_channels := GetProcAddress(aDLLHandle, 'al_get_voice_channels');
  al_get_voice_depth := GetProcAddress(aDLLHandle, 'al_get_voice_depth');
  al_get_voice_frequency := GetProcAddress(aDLLHandle, 'al_get_voice_frequency');
  al_get_voice_playing := GetProcAddress(aDLLHandle, 'al_get_voice_playing');
  al_get_voice_position := GetProcAddress(aDLLHandle, 'al_get_voice_position');
  al_get_win_window_handle := GetProcAddress(aDLLHandle, 'al_get_win_window_handle');
  al_get_window_borders := GetProcAddress(aDLLHandle, 'al_get_window_borders');
  al_get_window_constraints := GetProcAddress(aDLLHandle, 'al_get_window_constraints');
  al_get_window_position := GetProcAddress(aDLLHandle, 'al_get_window_position');
  al_grab_font_from_bitmap := GetProcAddress(aDLLHandle, 'al_grab_font_from_bitmap');
  al_grab_mouse := GetProcAddress(aDLLHandle, 'al_grab_mouse');
  al_hide_mouse_cursor := GetProcAddress(aDLLHandle, 'al_hide_mouse_cursor');
  al_hold_bitmap_drawing := GetProcAddress(aDLLHandle, 'al_hold_bitmap_drawing');
  al_horizontal_shear_transform := GetProcAddress(aDLLHandle, 'al_horizontal_shear_transform');
  al_identify_bitmap := GetProcAddress(aDLLHandle, 'al_identify_bitmap');
  al_identify_bitmap_f := GetProcAddress(aDLLHandle, 'al_identify_bitmap_f');
  al_identify_sample := GetProcAddress(aDLLHandle, 'al_identify_sample');
  al_identify_sample_f := GetProcAddress(aDLLHandle, 'al_identify_sample_f');
  al_identify_video := GetProcAddress(aDLLHandle, 'al_identify_video');
  al_identify_video_f := GetProcAddress(aDLLHandle, 'al_identify_video_f');
  al_identity_transform := GetProcAddress(aDLLHandle, 'al_identity_transform');
  al_inhibit_screensaver := GetProcAddress(aDLLHandle, 'al_inhibit_screensaver');
  al_init_acodec_addon := GetProcAddress(aDLLHandle, 'al_init_acodec_addon');
  al_init_font_addon := GetProcAddress(aDLLHandle, 'al_init_font_addon');
  al_init_image_addon := GetProcAddress(aDLLHandle, 'al_init_image_addon');
  al_init_native_dialog_addon := GetProcAddress(aDLLHandle, 'al_init_native_dialog_addon');
  al_init_primitives_addon := GetProcAddress(aDLLHandle, 'al_init_primitives_addon');
  al_init_timeout := GetProcAddress(aDLLHandle, 'al_init_timeout');
  al_init_ttf_addon := GetProcAddress(aDLLHandle, 'al_init_ttf_addon');
  al_init_user_event_source := GetProcAddress(aDLLHandle, 'al_init_user_event_source');
  al_init_video_addon := GetProcAddress(aDLLHandle, 'al_init_video_addon');
  al_insert_menu_item := GetProcAddress(aDLLHandle, 'al_insert_menu_item');
  al_insert_path_component := GetProcAddress(aDLLHandle, 'al_insert_path_component');
  al_install_audio := GetProcAddress(aDLLHandle, 'al_install_audio');
  al_install_haptic := GetProcAddress(aDLLHandle, 'al_install_haptic');
  al_install_joystick := GetProcAddress(aDLLHandle, 'al_install_joystick');
  al_install_keyboard := GetProcAddress(aDLLHandle, 'al_install_keyboard');
  al_install_mouse := GetProcAddress(aDLLHandle, 'al_install_mouse');
  al_install_system := GetProcAddress(aDLLHandle, 'al_install_system');
  al_install_touch_input := GetProcAddress(aDLLHandle, 'al_install_touch_input');
  al_invert_transform := GetProcAddress(aDLLHandle, 'al_invert_transform');
  al_is_acodec_addon_initialized := GetProcAddress(aDLLHandle, 'al_is_acodec_addon_initialized');
  al_is_audio_installed := GetProcAddress(aDLLHandle, 'al_is_audio_installed');
  al_is_audio_recorder_recording := GetProcAddress(aDLLHandle, 'al_is_audio_recorder_recording');
  al_is_bitmap_drawing_held := GetProcAddress(aDLLHandle, 'al_is_bitmap_drawing_held');
  al_is_bitmap_locked := GetProcAddress(aDLLHandle, 'al_is_bitmap_locked');
  al_is_color_valid := GetProcAddress(aDLLHandle, 'al_is_color_valid');
  al_is_compatible_bitmap := GetProcAddress(aDLLHandle, 'al_is_compatible_bitmap');
  al_is_display_haptic := GetProcAddress(aDLLHandle, 'al_is_display_haptic');
  al_is_event_queue_empty := GetProcAddress(aDLLHandle, 'al_is_event_queue_empty');
  al_is_event_queue_paused := GetProcAddress(aDLLHandle, 'al_is_event_queue_paused');
  al_is_event_source_registered := GetProcAddress(aDLLHandle, 'al_is_event_source_registered');
  al_is_font_addon_initialized := GetProcAddress(aDLLHandle, 'al_is_font_addon_initialized');
  al_is_haptic_active := GetProcAddress(aDLLHandle, 'al_is_haptic_active');
  al_is_haptic_capable := GetProcAddress(aDLLHandle, 'al_is_haptic_capable');
  al_is_haptic_effect_ok := GetProcAddress(aDLLHandle, 'al_is_haptic_effect_ok');
  al_is_haptic_effect_playing := GetProcAddress(aDLLHandle, 'al_is_haptic_effect_playing');
  al_is_haptic_installed := GetProcAddress(aDLLHandle, 'al_is_haptic_installed');
  al_is_image_addon_initialized := GetProcAddress(aDLLHandle, 'al_is_image_addon_initialized');
  al_is_joystick_haptic := GetProcAddress(aDLLHandle, 'al_is_joystick_haptic');
  al_is_joystick_installed := GetProcAddress(aDLLHandle, 'al_is_joystick_installed');
  al_is_keyboard_haptic := GetProcAddress(aDLLHandle, 'al_is_keyboard_haptic');
  al_is_keyboard_installed := GetProcAddress(aDLLHandle, 'al_is_keyboard_installed');
  al_is_mouse_haptic := GetProcAddress(aDLLHandle, 'al_is_mouse_haptic');
  al_is_mouse_installed := GetProcAddress(aDLLHandle, 'al_is_mouse_installed');
  al_is_native_dialog_addon_initialized := GetProcAddress(aDLLHandle, 'al_is_native_dialog_addon_initialized');
  al_is_primitives_addon_initialized := GetProcAddress(aDLLHandle, 'al_is_primitives_addon_initialized');
  al_is_sub_bitmap := GetProcAddress(aDLLHandle, 'al_is_sub_bitmap');
  al_is_system_installed := GetProcAddress(aDLLHandle, 'al_is_system_installed');
  al_is_touch_input_haptic := GetProcAddress(aDLLHandle, 'al_is_touch_input_haptic');
  al_is_touch_input_installed := GetProcAddress(aDLLHandle, 'al_is_touch_input_installed');
  al_is_ttf_addon_initialized := GetProcAddress(aDLLHandle, 'al_is_ttf_addon_initialized');
  al_is_video_addon_initialized := GetProcAddress(aDLLHandle, 'al_is_video_addon_initialized');
  al_is_video_playing := GetProcAddress(aDLLHandle, 'al_is_video_playing');
  al_join_paths := GetProcAddress(aDLLHandle, 'al_join_paths');
  al_join_thread := GetProcAddress(aDLLHandle, 'al_join_thread');
  al_key_down := GetProcAddress(aDLLHandle, 'al_key_down');
  al_keycode_to_name := GetProcAddress(aDLLHandle, 'al_keycode_to_name');
  al_load_audio_stream := GetProcAddress(aDLLHandle, 'al_load_audio_stream');
  al_load_audio_stream_f := GetProcAddress(aDLLHandle, 'al_load_audio_stream_f');
  al_load_bitmap := GetProcAddress(aDLLHandle, 'al_load_bitmap');
  al_load_bitmap_f := GetProcAddress(aDLLHandle, 'al_load_bitmap_f');
  al_load_bitmap_flags := GetProcAddress(aDLLHandle, 'al_load_bitmap_flags');
  al_load_bitmap_flags_f := GetProcAddress(aDLLHandle, 'al_load_bitmap_flags_f');
  al_load_bitmap_font := GetProcAddress(aDLLHandle, 'al_load_bitmap_font');
  al_load_bitmap_font_flags := GetProcAddress(aDLLHandle, 'al_load_bitmap_font_flags');
  al_load_config_file := GetProcAddress(aDLLHandle, 'al_load_config_file');
  al_load_config_file_f := GetProcAddress(aDLLHandle, 'al_load_config_file_f');
  al_load_font := GetProcAddress(aDLLHandle, 'al_load_font');
  al_load_sample := GetProcAddress(aDLLHandle, 'al_load_sample');
  al_load_sample_f := GetProcAddress(aDLLHandle, 'al_load_sample_f');
  al_load_ttf_font := GetProcAddress(aDLLHandle, 'al_load_ttf_font');
  al_load_ttf_font_f := GetProcAddress(aDLLHandle, 'al_load_ttf_font_f');
  al_load_ttf_font_stretch := GetProcAddress(aDLLHandle, 'al_load_ttf_font_stretch');
  al_load_ttf_font_stretch_f := GetProcAddress(aDLLHandle, 'al_load_ttf_font_stretch_f');
  al_lock_bitmap := GetProcAddress(aDLLHandle, 'al_lock_bitmap');
  al_lock_bitmap_blocked := GetProcAddress(aDLLHandle, 'al_lock_bitmap_blocked');
  al_lock_bitmap_region := GetProcAddress(aDLLHandle, 'al_lock_bitmap_region');
  al_lock_bitmap_region_blocked := GetProcAddress(aDLLHandle, 'al_lock_bitmap_region_blocked');
  al_lock_index_buffer := GetProcAddress(aDLLHandle, 'al_lock_index_buffer');
  al_lock_mutex := GetProcAddress(aDLLHandle, 'al_lock_mutex');
  al_lock_sample_id := GetProcAddress(aDLLHandle, 'al_lock_sample_id');
  al_lock_vertex_buffer := GetProcAddress(aDLLHandle, 'al_lock_vertex_buffer');
  al_make_directory := GetProcAddress(aDLLHandle, 'al_make_directory');
  al_make_path_canonical := GetProcAddress(aDLLHandle, 'al_make_path_canonical');
  al_make_temp_file := GetProcAddress(aDLLHandle, 'al_make_temp_file');
  al_malloc_with_context := GetProcAddress(aDLLHandle, 'al_malloc_with_context');
  al_map_rgb := GetProcAddress(aDLLHandle, 'al_map_rgb');
  al_map_rgb_f := GetProcAddress(aDLLHandle, 'al_map_rgb_f');
  al_map_rgba := GetProcAddress(aDLLHandle, 'al_map_rgba');
  al_map_rgba_f := GetProcAddress(aDLLHandle, 'al_map_rgba_f');
  al_merge_config := GetProcAddress(aDLLHandle, 'al_merge_config');
  al_merge_config_into := GetProcAddress(aDLLHandle, 'al_merge_config_into');
  al_mixer_has_attachments := GetProcAddress(aDLLHandle, 'al_mixer_has_attachments');
  al_mouse_button_down := GetProcAddress(aDLLHandle, 'al_mouse_button_down');
  al_open_directory := GetProcAddress(aDLLHandle, 'al_open_directory');
  al_open_fs_entry := GetProcAddress(aDLLHandle, 'al_open_fs_entry');
  al_open_memfile := GetProcAddress(aDLLHandle, 'al_open_memfile');
  al_open_native_text_log := GetProcAddress(aDLLHandle, 'al_open_native_text_log');
  al_open_video := GetProcAddress(aDLLHandle, 'al_open_video');
  al_open_video_f := GetProcAddress(aDLLHandle, 'al_open_video_f');
  al_orthographic_transform := GetProcAddress(aDLLHandle, 'al_orthographic_transform');
  al_path_cstr := GetProcAddress(aDLLHandle, 'al_path_cstr');
  al_path_ustr := GetProcAddress(aDLLHandle, 'al_path_ustr');
  al_pause_event_queue := GetProcAddress(aDLLHandle, 'al_pause_event_queue');
  al_peek_next_event := GetProcAddress(aDLLHandle, 'al_peek_next_event');
  al_perspective_transform := GetProcAddress(aDLLHandle, 'al_perspective_transform');
  al_play_audio_stream := GetProcAddress(aDLLHandle, 'al_play_audio_stream');
  al_play_audio_stream_f := GetProcAddress(aDLLHandle, 'al_play_audio_stream_f');
  al_play_haptic_effect := GetProcAddress(aDLLHandle, 'al_play_haptic_effect');
  al_play_sample := GetProcAddress(aDLLHandle, 'al_play_sample');
  al_play_sample_instance := GetProcAddress(aDLLHandle, 'al_play_sample_instance');
  al_popup_menu := GetProcAddress(aDLLHandle, 'al_popup_menu');
  al_premul_rgba := GetProcAddress(aDLLHandle, 'al_premul_rgba');
  al_premul_rgba_f := GetProcAddress(aDLLHandle, 'al_premul_rgba_f');
  al_put_blended_pixel := GetProcAddress(aDLLHandle, 'al_put_blended_pixel');
  al_put_pixel := GetProcAddress(aDLLHandle, 'al_put_pixel');
  al_read_directory := GetProcAddress(aDLLHandle, 'al_read_directory');
  al_realloc_with_context := GetProcAddress(aDLLHandle, 'al_realloc_with_context');
  al_rebase_path := GetProcAddress(aDLLHandle, 'al_rebase_path');
  al_reconfigure_joysticks := GetProcAddress(aDLLHandle, 'al_reconfigure_joysticks');
  al_ref_buffer := GetProcAddress(aDLLHandle, 'al_ref_buffer');
  al_ref_cstr := GetProcAddress(aDLLHandle, 'al_ref_cstr');
  al_ref_info := GetProcAddress(aDLLHandle, 'al_ref_info');
  al_ref_ustr := GetProcAddress(aDLLHandle, 'al_ref_ustr');
  al_register_assert_handler := GetProcAddress(aDLLHandle, 'al_register_assert_handler');
  al_register_audio_stream_loader := GetProcAddress(aDLLHandle, 'al_register_audio_stream_loader');
  al_register_audio_stream_loader_f := GetProcAddress(aDLLHandle, 'al_register_audio_stream_loader_f');
  al_register_bitmap_identifier := GetProcAddress(aDLLHandle, 'al_register_bitmap_identifier');
  al_register_bitmap_loader := GetProcAddress(aDLLHandle, 'al_register_bitmap_loader');
  al_register_bitmap_loader_f := GetProcAddress(aDLLHandle, 'al_register_bitmap_loader_f');
  al_register_bitmap_saver := GetProcAddress(aDLLHandle, 'al_register_bitmap_saver');
  al_register_bitmap_saver_f := GetProcAddress(aDLLHandle, 'al_register_bitmap_saver_f');
  al_register_event_source := GetProcAddress(aDLLHandle, 'al_register_event_source');
  al_register_font_loader := GetProcAddress(aDLLHandle, 'al_register_font_loader');
  al_register_sample_identifier := GetProcAddress(aDLLHandle, 'al_register_sample_identifier');
  al_register_sample_loader := GetProcAddress(aDLLHandle, 'al_register_sample_loader');
  al_register_sample_loader_f := GetProcAddress(aDLLHandle, 'al_register_sample_loader_f');
  al_register_sample_saver := GetProcAddress(aDLLHandle, 'al_register_sample_saver');
  al_register_sample_saver_f := GetProcAddress(aDLLHandle, 'al_register_sample_saver_f');
  al_register_trace_handler := GetProcAddress(aDLLHandle, 'al_register_trace_handler');
  al_release_haptic := GetProcAddress(aDLLHandle, 'al_release_haptic');
  al_release_haptic_effect := GetProcAddress(aDLLHandle, 'al_release_haptic_effect');
  al_release_joystick := GetProcAddress(aDLLHandle, 'al_release_joystick');
  al_remove_config_key := GetProcAddress(aDLLHandle, 'al_remove_config_key');
  al_remove_config_section := GetProcAddress(aDLLHandle, 'al_remove_config_section');
  al_remove_display_menu := GetProcAddress(aDLLHandle, 'al_remove_display_menu');
  al_remove_filename := GetProcAddress(aDLLHandle, 'al_remove_filename');
  al_remove_fs_entry := GetProcAddress(aDLLHandle, 'al_remove_fs_entry');
  al_remove_menu_item := GetProcAddress(aDLLHandle, 'al_remove_menu_item');
  al_remove_path_component := GetProcAddress(aDLLHandle, 'al_remove_path_component');
  al_reparent_bitmap := GetProcAddress(aDLLHandle, 'al_reparent_bitmap');
  al_replace_path_component := GetProcAddress(aDLLHandle, 'al_replace_path_component');
  al_reserve_samples := GetProcAddress(aDLLHandle, 'al_reserve_samples');
  al_reset_bitmap_blender := GetProcAddress(aDLLHandle, 'al_reset_bitmap_blender');
  al_reset_clipping_rectangle := GetProcAddress(aDLLHandle, 'al_reset_clipping_rectangle');
  al_reset_new_display_options := GetProcAddress(aDLLHandle, 'al_reset_new_display_options');
  al_resize_display := GetProcAddress(aDLLHandle, 'al_resize_display');
  al_rest := GetProcAddress(aDLLHandle, 'al_rest');
  al_restore_default_mixer := GetProcAddress(aDLLHandle, 'al_restore_default_mixer');
  al_restore_state := GetProcAddress(aDLLHandle, 'al_restore_state');
  al_resume_timer := GetProcAddress(aDLLHandle, 'al_resume_timer');
  al_rewind_audio_stream := GetProcAddress(aDLLHandle, 'al_rewind_audio_stream');
  al_rotate_transform := GetProcAddress(aDLLHandle, 'al_rotate_transform');
  al_rotate_transform_3d := GetProcAddress(aDLLHandle, 'al_rotate_transform_3d');
  al_rumble_haptic := GetProcAddress(aDLLHandle, 'al_rumble_haptic');
  al_run_detached_thread := GetProcAddress(aDLLHandle, 'al_run_detached_thread');
  al_run_main := GetProcAddress(aDLLHandle, 'al_run_main');
  al_save_bitmap := GetProcAddress(aDLLHandle, 'al_save_bitmap');
  al_save_bitmap_f := GetProcAddress(aDLLHandle, 'al_save_bitmap_f');
  al_save_config_file := GetProcAddress(aDLLHandle, 'al_save_config_file');
  al_save_config_file_f := GetProcAddress(aDLLHandle, 'al_save_config_file_f');
  al_save_sample := GetProcAddress(aDLLHandle, 'al_save_sample');
  al_save_sample_f := GetProcAddress(aDLLHandle, 'al_save_sample_f');
  al_scale_transform := GetProcAddress(aDLLHandle, 'al_scale_transform');
  al_scale_transform_3d := GetProcAddress(aDLLHandle, 'al_scale_transform_3d');
  al_seek_audio_stream_secs := GetProcAddress(aDLLHandle, 'al_seek_audio_stream_secs');
  al_seek_video := GetProcAddress(aDLLHandle, 'al_seek_video');
  al_set_app_name := GetProcAddress(aDLLHandle, 'al_set_app_name');
  al_set_audio_stream_channel_matrix := GetProcAddress(aDLLHandle, 'al_set_audio_stream_channel_matrix');
  al_set_audio_stream_fragment := GetProcAddress(aDLLHandle, 'al_set_audio_stream_fragment');
  al_set_audio_stream_gain := GetProcAddress(aDLLHandle, 'al_set_audio_stream_gain');
  al_set_audio_stream_loop_secs := GetProcAddress(aDLLHandle, 'al_set_audio_stream_loop_secs');
  al_set_audio_stream_pan := GetProcAddress(aDLLHandle, 'al_set_audio_stream_pan');
  al_set_audio_stream_playing := GetProcAddress(aDLLHandle, 'al_set_audio_stream_playing');
  al_set_audio_stream_playmode := GetProcAddress(aDLLHandle, 'al_set_audio_stream_playmode');
  al_set_audio_stream_speed := GetProcAddress(aDLLHandle, 'al_set_audio_stream_speed');
  al_set_bitmap_blend_color := GetProcAddress(aDLLHandle, 'al_set_bitmap_blend_color');
  al_set_bitmap_blender := GetProcAddress(aDLLHandle, 'al_set_bitmap_blender');
  al_set_blend_color := GetProcAddress(aDLLHandle, 'al_set_blend_color');
  al_set_blender := GetProcAddress(aDLLHandle, 'al_set_blender');
  al_set_clipboard_text := GetProcAddress(aDLLHandle, 'al_set_clipboard_text');
  al_set_clipping_rectangle := GetProcAddress(aDLLHandle, 'al_set_clipping_rectangle');
  al_set_config_value := GetProcAddress(aDLLHandle, 'al_set_config_value');
  al_set_default_mixer := GetProcAddress(aDLLHandle, 'al_set_default_mixer');
  al_set_default_voice := GetProcAddress(aDLLHandle, 'al_set_default_voice');
  al_set_display_flag := GetProcAddress(aDLLHandle, 'al_set_display_flag');
  al_set_display_icon := GetProcAddress(aDLLHandle, 'al_set_display_icon');
  al_set_display_icons := GetProcAddress(aDLLHandle, 'al_set_display_icons');
  al_set_display_menu := GetProcAddress(aDLLHandle, 'al_set_display_menu');
  al_set_display_option := GetProcAddress(aDLLHandle, 'al_set_display_option');
  al_set_errno := GetProcAddress(aDLLHandle, 'al_set_errno');
  al_set_event_source_data := GetProcAddress(aDLLHandle, 'al_set_event_source_data');
  al_set_exe_name := GetProcAddress(aDLLHandle, 'al_set_exe_name');
  al_set_fallback_font := GetProcAddress(aDLLHandle, 'al_set_fallback_font');
  al_set_fs_interface := GetProcAddress(aDLLHandle, 'al_set_fs_interface');
  al_set_haptic_autocenter := GetProcAddress(aDLLHandle, 'al_set_haptic_autocenter');
  al_set_haptic_gain := GetProcAddress(aDLLHandle, 'al_set_haptic_gain');
  al_set_joystick_mappings := GetProcAddress(aDLLHandle, 'al_set_joystick_mappings');
  al_set_joystick_mappings_f := GetProcAddress(aDLLHandle, 'al_set_joystick_mappings_f');
  al_set_keyboard_leds := GetProcAddress(aDLLHandle, 'al_set_keyboard_leds');
  al_set_memory_interface := GetProcAddress(aDLLHandle, 'al_set_memory_interface');
  al_set_menu_item_caption := GetProcAddress(aDLLHandle, 'al_set_menu_item_caption');
  al_set_menu_item_flags := GetProcAddress(aDLLHandle, 'al_set_menu_item_flags');
  al_set_menu_item_icon := GetProcAddress(aDLLHandle, 'al_set_menu_item_icon');
  al_set_mixer_frequency := GetProcAddress(aDLLHandle, 'al_set_mixer_frequency');
  al_set_mixer_gain := GetProcAddress(aDLLHandle, 'al_set_mixer_gain');
  al_set_mixer_playing := GetProcAddress(aDLLHandle, 'al_set_mixer_playing');
  al_set_mixer_postprocess_callback := GetProcAddress(aDLLHandle, 'al_set_mixer_postprocess_callback');
  al_set_mixer_quality := GetProcAddress(aDLLHandle, 'al_set_mixer_quality');
  al_set_mouse_axis := GetProcAddress(aDLLHandle, 'al_set_mouse_axis');
  al_set_mouse_cursor := GetProcAddress(aDLLHandle, 'al_set_mouse_cursor');
  al_set_mouse_emulation_mode := GetProcAddress(aDLLHandle, 'al_set_mouse_emulation_mode');
  al_set_mouse_w := GetProcAddress(aDLLHandle, 'al_set_mouse_w');
  al_set_mouse_wheel_precision := GetProcAddress(aDLLHandle, 'al_set_mouse_wheel_precision');
  al_set_mouse_xy := GetProcAddress(aDLLHandle, 'al_set_mouse_xy');
  al_set_mouse_z := GetProcAddress(aDLLHandle, 'al_set_mouse_z');
  al_set_new_bitmap_depth := GetProcAddress(aDLLHandle, 'al_set_new_bitmap_depth');
  al_set_new_bitmap_flags := GetProcAddress(aDLLHandle, 'al_set_new_bitmap_flags');
  al_set_new_bitmap_format := GetProcAddress(aDLLHandle, 'al_set_new_bitmap_format');
  al_set_new_bitmap_samples := GetProcAddress(aDLLHandle, 'al_set_new_bitmap_samples');
  al_set_new_bitmap_wrap := GetProcAddress(aDLLHandle, 'al_set_new_bitmap_wrap');
  al_set_new_display_adapter := GetProcAddress(aDLLHandle, 'al_set_new_display_adapter');
  al_set_new_display_flags := GetProcAddress(aDLLHandle, 'al_set_new_display_flags');
  al_set_new_display_option := GetProcAddress(aDLLHandle, 'al_set_new_display_option');
  al_set_new_display_refresh_rate := GetProcAddress(aDLLHandle, 'al_set_new_display_refresh_rate');
  al_set_new_file_interface := GetProcAddress(aDLLHandle, 'al_set_new_file_interface');
  al_set_new_window_position := GetProcAddress(aDLLHandle, 'al_set_new_window_position');
  al_set_new_window_title := GetProcAddress(aDLLHandle, 'al_set_new_window_title');
  al_set_org_name := GetProcAddress(aDLLHandle, 'al_set_org_name');
  al_set_path_drive := GetProcAddress(aDLLHandle, 'al_set_path_drive');
  al_set_path_extension := GetProcAddress(aDLLHandle, 'al_set_path_extension');
  al_set_path_filename := GetProcAddress(aDLLHandle, 'al_set_path_filename');
  al_set_physfs_file_interface := GetProcAddress(aDLLHandle, 'al_set_physfs_file_interface');
  al_set_render_state := GetProcAddress(aDLLHandle, 'al_set_render_state');
  al_set_sample := GetProcAddress(aDLLHandle, 'al_set_sample');
  al_set_sample_instance_channel_matrix := GetProcAddress(aDLLHandle, 'al_set_sample_instance_channel_matrix');
  al_set_sample_instance_gain := GetProcAddress(aDLLHandle, 'al_set_sample_instance_gain');
  al_set_sample_instance_length := GetProcAddress(aDLLHandle, 'al_set_sample_instance_length');
  al_set_sample_instance_pan := GetProcAddress(aDLLHandle, 'al_set_sample_instance_pan');
  al_set_sample_instance_playing := GetProcAddress(aDLLHandle, 'al_set_sample_instance_playing');
  al_set_sample_instance_playmode := GetProcAddress(aDLLHandle, 'al_set_sample_instance_playmode');
  al_set_sample_instance_position := GetProcAddress(aDLLHandle, 'al_set_sample_instance_position');
  al_set_sample_instance_speed := GetProcAddress(aDLLHandle, 'al_set_sample_instance_speed');
  al_set_separate_bitmap_blender := GetProcAddress(aDLLHandle, 'al_set_separate_bitmap_blender');
  al_set_separate_blender := GetProcAddress(aDLLHandle, 'al_set_separate_blender');
  al_set_shader_bool := GetProcAddress(aDLLHandle, 'al_set_shader_bool');
  al_set_shader_float := GetProcAddress(aDLLHandle, 'al_set_shader_float');
  al_set_shader_float_vector := GetProcAddress(aDLLHandle, 'al_set_shader_float_vector');
  al_set_shader_int := GetProcAddress(aDLLHandle, 'al_set_shader_int');
  al_set_shader_int_vector := GetProcAddress(aDLLHandle, 'al_set_shader_int_vector');
  al_set_shader_matrix := GetProcAddress(aDLLHandle, 'al_set_shader_matrix');
  al_set_shader_sampler := GetProcAddress(aDLLHandle, 'al_set_shader_sampler');
  al_set_standard_file_interface := GetProcAddress(aDLLHandle, 'al_set_standard_file_interface');
  al_set_standard_fs_interface := GetProcAddress(aDLLHandle, 'al_set_standard_fs_interface');
  al_set_system_mouse_cursor := GetProcAddress(aDLLHandle, 'al_set_system_mouse_cursor');
  al_set_target_backbuffer := GetProcAddress(aDLLHandle, 'al_set_target_backbuffer');
  al_set_target_bitmap := GetProcAddress(aDLLHandle, 'al_set_target_bitmap');
  al_set_thread_should_stop := GetProcAddress(aDLLHandle, 'al_set_thread_should_stop');
  al_set_timer_count := GetProcAddress(aDLLHandle, 'al_set_timer_count');
  al_set_timer_speed := GetProcAddress(aDLLHandle, 'al_set_timer_speed');
  al_set_video_playing := GetProcAddress(aDLLHandle, 'al_set_video_playing');
  al_set_voice_playing := GetProcAddress(aDLLHandle, 'al_set_voice_playing');
  al_set_voice_position := GetProcAddress(aDLLHandle, 'al_set_voice_position');
  al_set_window_constraints := GetProcAddress(aDLLHandle, 'al_set_window_constraints');
  al_set_window_position := GetProcAddress(aDLLHandle, 'al_set_window_position');
  al_set_window_title := GetProcAddress(aDLLHandle, 'al_set_window_title');
  al_show_mouse_cursor := GetProcAddress(aDLLHandle, 'al_show_mouse_cursor');
  al_show_native_file_dialog := GetProcAddress(aDLLHandle, 'al_show_native_file_dialog');
  al_show_native_message_box := GetProcAddress(aDLLHandle, 'al_show_native_message_box');
  al_shutdown_font_addon := GetProcAddress(aDLLHandle, 'al_shutdown_font_addon');
  al_shutdown_image_addon := GetProcAddress(aDLLHandle, 'al_shutdown_image_addon');
  al_shutdown_native_dialog_addon := GetProcAddress(aDLLHandle, 'al_shutdown_native_dialog_addon');
  al_shutdown_primitives_addon := GetProcAddress(aDLLHandle, 'al_shutdown_primitives_addon');
  al_shutdown_ttf_addon := GetProcAddress(aDLLHandle, 'al_shutdown_ttf_addon');
  al_shutdown_video_addon := GetProcAddress(aDLLHandle, 'al_shutdown_video_addon');
  al_signal_cond := GetProcAddress(aDLLHandle, 'al_signal_cond');
  al_start_audio_recorder := GetProcAddress(aDLLHandle, 'al_start_audio_recorder');
  al_start_thread := GetProcAddress(aDLLHandle, 'al_start_thread');
  al_start_timer := GetProcAddress(aDLLHandle, 'al_start_timer');
  al_start_video := GetProcAddress(aDLLHandle, 'al_start_video');
  al_start_video_with_voice := GetProcAddress(aDLLHandle, 'al_start_video_with_voice');
  al_stop_audio_recorder := GetProcAddress(aDLLHandle, 'al_stop_audio_recorder');
  al_stop_haptic_effect := GetProcAddress(aDLLHandle, 'al_stop_haptic_effect');
  al_stop_sample := GetProcAddress(aDLLHandle, 'al_stop_sample');
  al_stop_sample_instance := GetProcAddress(aDLLHandle, 'al_stop_sample_instance');
  al_stop_samples := GetProcAddress(aDLLHandle, 'al_stop_samples');
  al_stop_timer := GetProcAddress(aDLLHandle, 'al_stop_timer');
  al_store_state := GetProcAddress(aDLLHandle, 'al_store_state');
  al_toggle_menu_item_flags := GetProcAddress(aDLLHandle, 'al_toggle_menu_item_flags');
  al_transform_coordinates := GetProcAddress(aDLLHandle, 'al_transform_coordinates');
  al_transform_coordinates_3d := GetProcAddress(aDLLHandle, 'al_transform_coordinates_3d');
  al_transform_coordinates_3d_projective := GetProcAddress(aDLLHandle, 'al_transform_coordinates_3d_projective');
  al_transform_coordinates_4d := GetProcAddress(aDLLHandle, 'al_transform_coordinates_4d');
  al_translate_transform := GetProcAddress(aDLLHandle, 'al_translate_transform');
  al_translate_transform_3d := GetProcAddress(aDLLHandle, 'al_translate_transform_3d');
  al_transpose_transform := GetProcAddress(aDLLHandle, 'al_transpose_transform');
  al_triangulate_polygon := GetProcAddress(aDLLHandle, 'al_triangulate_polygon');
  al_ungrab_mouse := GetProcAddress(aDLLHandle, 'al_ungrab_mouse');
  al_uninstall_audio := GetProcAddress(aDLLHandle, 'al_uninstall_audio');
  al_uninstall_haptic := GetProcAddress(aDLLHandle, 'al_uninstall_haptic');
  al_uninstall_joystick := GetProcAddress(aDLLHandle, 'al_uninstall_joystick');
  al_uninstall_keyboard := GetProcAddress(aDLLHandle, 'al_uninstall_keyboard');
  al_uninstall_mouse := GetProcAddress(aDLLHandle, 'al_uninstall_mouse');
  al_uninstall_system := GetProcAddress(aDLLHandle, 'al_uninstall_system');
  al_uninstall_touch_input := GetProcAddress(aDLLHandle, 'al_uninstall_touch_input');
  al_unlock_bitmap := GetProcAddress(aDLLHandle, 'al_unlock_bitmap');
  al_unlock_index_buffer := GetProcAddress(aDLLHandle, 'al_unlock_index_buffer');
  al_unlock_mutex := GetProcAddress(aDLLHandle, 'al_unlock_mutex');
  al_unlock_sample_id := GetProcAddress(aDLLHandle, 'al_unlock_sample_id');
  al_unlock_vertex_buffer := GetProcAddress(aDLLHandle, 'al_unlock_vertex_buffer');
  al_unmap_rgb := GetProcAddress(aDLLHandle, 'al_unmap_rgb');
  al_unmap_rgb_f := GetProcAddress(aDLLHandle, 'al_unmap_rgb_f');
  al_unmap_rgba := GetProcAddress(aDLLHandle, 'al_unmap_rgba');
  al_unmap_rgba_f := GetProcAddress(aDLLHandle, 'al_unmap_rgba_f');
  al_unref_user_event := GetProcAddress(aDLLHandle, 'al_unref_user_event');
  al_unregister_event_source := GetProcAddress(aDLLHandle, 'al_unregister_event_source');
  al_update_display_region := GetProcAddress(aDLLHandle, 'al_update_display_region');
  al_update_fs_entry := GetProcAddress(aDLLHandle, 'al_update_fs_entry');
  al_upload_and_play_haptic_effect := GetProcAddress(aDLLHandle, 'al_upload_and_play_haptic_effect');
  al_upload_haptic_effect := GetProcAddress(aDLLHandle, 'al_upload_haptic_effect');
  al_use_projection_transform := GetProcAddress(aDLLHandle, 'al_use_projection_transform');
  al_use_shader := GetProcAddress(aDLLHandle, 'al_use_shader');
  al_use_transform := GetProcAddress(aDLLHandle, 'al_use_transform');
  al_ustr_append := GetProcAddress(aDLLHandle, 'al_ustr_append');
  al_ustr_append_chr := GetProcAddress(aDLLHandle, 'al_ustr_append_chr');
  al_ustr_append_cstr := GetProcAddress(aDLLHandle, 'al_ustr_append_cstr');
  al_ustr_appendf := GetProcAddress(aDLLHandle, 'al_ustr_appendf');
  al_ustr_assign := GetProcAddress(aDLLHandle, 'al_ustr_assign');
  al_ustr_assign_cstr := GetProcAddress(aDLLHandle, 'al_ustr_assign_cstr');
  al_ustr_assign_substr := GetProcAddress(aDLLHandle, 'al_ustr_assign_substr');
  al_ustr_compare := GetProcAddress(aDLLHandle, 'al_ustr_compare');
  al_ustr_dup := GetProcAddress(aDLLHandle, 'al_ustr_dup');
  al_ustr_dup_substr := GetProcAddress(aDLLHandle, 'al_ustr_dup_substr');
  al_ustr_empty_string := GetProcAddress(aDLLHandle, 'al_ustr_empty_string');
  al_ustr_encode_utf16 := GetProcAddress(aDLLHandle, 'al_ustr_encode_utf16');
  al_ustr_equal := GetProcAddress(aDLLHandle, 'al_ustr_equal');
  al_ustr_find_chr := GetProcAddress(aDLLHandle, 'al_ustr_find_chr');
  al_ustr_find_cset := GetProcAddress(aDLLHandle, 'al_ustr_find_cset');
  al_ustr_find_cset_cstr := GetProcAddress(aDLLHandle, 'al_ustr_find_cset_cstr');
  al_ustr_find_cstr := GetProcAddress(aDLLHandle, 'al_ustr_find_cstr');
  al_ustr_find_replace := GetProcAddress(aDLLHandle, 'al_ustr_find_replace');
  al_ustr_find_replace_cstr := GetProcAddress(aDLLHandle, 'al_ustr_find_replace_cstr');
  al_ustr_find_set := GetProcAddress(aDLLHandle, 'al_ustr_find_set');
  al_ustr_find_set_cstr := GetProcAddress(aDLLHandle, 'al_ustr_find_set_cstr');
  al_ustr_find_str := GetProcAddress(aDLLHandle, 'al_ustr_find_str');
  al_ustr_free := GetProcAddress(aDLLHandle, 'al_ustr_free');
  al_ustr_get := GetProcAddress(aDLLHandle, 'al_ustr_get');
  al_ustr_get_next := GetProcAddress(aDLLHandle, 'al_ustr_get_next');
  al_ustr_has_prefix := GetProcAddress(aDLLHandle, 'al_ustr_has_prefix');
  al_ustr_has_prefix_cstr := GetProcAddress(aDLLHandle, 'al_ustr_has_prefix_cstr');
  al_ustr_has_suffix := GetProcAddress(aDLLHandle, 'al_ustr_has_suffix');
  al_ustr_has_suffix_cstr := GetProcAddress(aDLLHandle, 'al_ustr_has_suffix_cstr');
  al_ustr_insert := GetProcAddress(aDLLHandle, 'al_ustr_insert');
  al_ustr_insert_chr := GetProcAddress(aDLLHandle, 'al_ustr_insert_chr');
  al_ustr_insert_cstr := GetProcAddress(aDLLHandle, 'al_ustr_insert_cstr');
  al_ustr_length := GetProcAddress(aDLLHandle, 'al_ustr_length');
  al_ustr_ltrim_ws := GetProcAddress(aDLLHandle, 'al_ustr_ltrim_ws');
  al_ustr_ncompare := GetProcAddress(aDLLHandle, 'al_ustr_ncompare');
  al_ustr_new := GetProcAddress(aDLLHandle, 'al_ustr_new');
  al_ustr_new_from_buffer := GetProcAddress(aDLLHandle, 'al_ustr_new_from_buffer');
  al_ustr_new_from_utf16 := GetProcAddress(aDLLHandle, 'al_ustr_new_from_utf16');
  al_ustr_newf := GetProcAddress(aDLLHandle, 'al_ustr_newf');
  al_ustr_next := GetProcAddress(aDLLHandle, 'al_ustr_next');
  al_ustr_offset := GetProcAddress(aDLLHandle, 'al_ustr_offset');
  al_ustr_prev := GetProcAddress(aDLLHandle, 'al_ustr_prev');
  al_ustr_prev_get := GetProcAddress(aDLLHandle, 'al_ustr_prev_get');
  al_ustr_remove_chr := GetProcAddress(aDLLHandle, 'al_ustr_remove_chr');
  al_ustr_remove_range := GetProcAddress(aDLLHandle, 'al_ustr_remove_range');
  al_ustr_replace_range := GetProcAddress(aDLLHandle, 'al_ustr_replace_range');
  al_ustr_rfind_chr := GetProcAddress(aDLLHandle, 'al_ustr_rfind_chr');
  al_ustr_rfind_cstr := GetProcAddress(aDLLHandle, 'al_ustr_rfind_cstr');
  al_ustr_rfind_str := GetProcAddress(aDLLHandle, 'al_ustr_rfind_str');
  al_ustr_rtrim_ws := GetProcAddress(aDLLHandle, 'al_ustr_rtrim_ws');
  al_ustr_set_chr := GetProcAddress(aDLLHandle, 'al_ustr_set_chr');
  al_ustr_size := GetProcAddress(aDLLHandle, 'al_ustr_size');
  al_ustr_size_utf16 := GetProcAddress(aDLLHandle, 'al_ustr_size_utf16');
  al_ustr_to_buffer := GetProcAddress(aDLLHandle, 'al_ustr_to_buffer');
  al_ustr_trim_ws := GetProcAddress(aDLLHandle, 'al_ustr_trim_ws');
  al_ustr_truncate := GetProcAddress(aDLLHandle, 'al_ustr_truncate');
  al_ustr_vappendf := GetProcAddress(aDLLHandle, 'al_ustr_vappendf');
  al_utf16_encode := GetProcAddress(aDLLHandle, 'al_utf16_encode');
  al_utf16_width := GetProcAddress(aDLLHandle, 'al_utf16_width');
  al_utf8_encode := GetProcAddress(aDLLHandle, 'al_utf8_encode');
  al_utf8_width := GetProcAddress(aDLLHandle, 'al_utf8_width');
  al_vertical_shear_transform := GetProcAddress(aDLLHandle, 'al_vertical_shear_transform');
  al_vfprintf := GetProcAddress(aDLLHandle, 'al_vfprintf');
  al_voice_has_attachments := GetProcAddress(aDLLHandle, 'al_voice_has_attachments');
  al_wait_cond := GetProcAddress(aDLLHandle, 'al_wait_cond');
  al_wait_cond_until := GetProcAddress(aDLLHandle, 'al_wait_cond_until');
  al_wait_for_event := GetProcAddress(aDLLHandle, 'al_wait_for_event');
  al_wait_for_event_timed := GetProcAddress(aDLLHandle, 'al_wait_for_event_timed');
  al_wait_for_event_until := GetProcAddress(aDLLHandle, 'al_wait_for_event_until');
  al_wait_for_vsync := GetProcAddress(aDLLHandle, 'al_wait_for_vsync');
  al_win_add_window_callback := GetProcAddress(aDLLHandle, 'al_win_add_window_callback');
  al_win_remove_window_callback := GetProcAddress(aDLLHandle, 'al_win_remove_window_callback');
  crc32 := GetProcAddress(aDLLHandle, 'crc32');
  PHYSFS_caseFold := GetProcAddress(aDLLHandle, 'PHYSFS_caseFold');
  PHYSFS_close := GetProcAddress(aDLLHandle, 'PHYSFS_close');
  PHYSFS_deinit := GetProcAddress(aDLLHandle, 'PHYSFS_deinit');
  PHYSFS_delete := GetProcAddress(aDLLHandle, 'PHYSFS_delete');
  PHYSFS_deregisterArchiver := GetProcAddress(aDLLHandle, 'PHYSFS_deregisterArchiver');
  PHYSFS_enumerate := GetProcAddress(aDLLHandle, 'PHYSFS_enumerate');
  PHYSFS_enumerateFiles := GetProcAddress(aDLLHandle, 'PHYSFS_enumerateFiles');
  PHYSFS_eof := GetProcAddress(aDLLHandle, 'PHYSFS_eof');
  PHYSFS_exists := GetProcAddress(aDLLHandle, 'PHYSFS_exists');
  PHYSFS_fileLength := GetProcAddress(aDLLHandle, 'PHYSFS_fileLength');
  PHYSFS_flush := GetProcAddress(aDLLHandle, 'PHYSFS_flush');
  PHYSFS_freeList := GetProcAddress(aDLLHandle, 'PHYSFS_freeList');
  PHYSFS_getAllocator := GetProcAddress(aDLLHandle, 'PHYSFS_getAllocator');
  PHYSFS_getBaseDir := GetProcAddress(aDLLHandle, 'PHYSFS_getBaseDir');
  PHYSFS_getCdRomDirs := GetProcAddress(aDLLHandle, 'PHYSFS_getCdRomDirs');
  PHYSFS_getCdRomDirsCallback := GetProcAddress(aDLLHandle, 'PHYSFS_getCdRomDirsCallback');
  PHYSFS_getDirSeparator := GetProcAddress(aDLLHandle, 'PHYSFS_getDirSeparator');
  PHYSFS_getErrorByCode := GetProcAddress(aDLLHandle, 'PHYSFS_getErrorByCode');
  PHYSFS_getLastErrorCode := GetProcAddress(aDLLHandle, 'PHYSFS_getLastErrorCode');
  PHYSFS_getLinkedVersion := GetProcAddress(aDLLHandle, 'PHYSFS_getLinkedVersion');
  PHYSFS_getMountPoint := GetProcAddress(aDLLHandle, 'PHYSFS_getMountPoint');
  PHYSFS_getPrefDir := GetProcAddress(aDLLHandle, 'PHYSFS_getPrefDir');
  PHYSFS_getRealDir := GetProcAddress(aDLLHandle, 'PHYSFS_getRealDir');
  PHYSFS_getSearchPath := GetProcAddress(aDLLHandle, 'PHYSFS_getSearchPath');
  PHYSFS_getSearchPathCallback := GetProcAddress(aDLLHandle, 'PHYSFS_getSearchPathCallback');
  PHYSFS_getWriteDir := GetProcAddress(aDLLHandle, 'PHYSFS_getWriteDir');
  PHYSFS_init := GetProcAddress(aDLLHandle, 'PHYSFS_init');
  PHYSFS_isInit := GetProcAddress(aDLLHandle, 'PHYSFS_isInit');
  PHYSFS_mkdir := GetProcAddress(aDLLHandle, 'PHYSFS_mkdir');
  PHYSFS_mount := GetProcAddress(aDLLHandle, 'PHYSFS_mount');
  PHYSFS_mountHandle := GetProcAddress(aDLLHandle, 'PHYSFS_mountHandle');
  PHYSFS_mountIo := GetProcAddress(aDLLHandle, 'PHYSFS_mountIo');
  PHYSFS_mountMemory := GetProcAddress(aDLLHandle, 'PHYSFS_mountMemory');
  PHYSFS_openAppend := GetProcAddress(aDLLHandle, 'PHYSFS_openAppend');
  PHYSFS_openRead := GetProcAddress(aDLLHandle, 'PHYSFS_openRead');
  PHYSFS_openWrite := GetProcAddress(aDLLHandle, 'PHYSFS_openWrite');
  PHYSFS_permitSymbolicLinks := GetProcAddress(aDLLHandle, 'PHYSFS_permitSymbolicLinks');
  PHYSFS_readBytes := GetProcAddress(aDLLHandle, 'PHYSFS_readBytes');
  PHYSFS_readSBE16 := GetProcAddress(aDLLHandle, 'PHYSFS_readSBE16');
  PHYSFS_readSBE32 := GetProcAddress(aDLLHandle, 'PHYSFS_readSBE32');
  PHYSFS_readSBE64 := GetProcAddress(aDLLHandle, 'PHYSFS_readSBE64');
  PHYSFS_readSLE16 := GetProcAddress(aDLLHandle, 'PHYSFS_readSLE16');
  PHYSFS_readSLE32 := GetProcAddress(aDLLHandle, 'PHYSFS_readSLE32');
  PHYSFS_readSLE64 := GetProcAddress(aDLLHandle, 'PHYSFS_readSLE64');
  PHYSFS_readUBE16 := GetProcAddress(aDLLHandle, 'PHYSFS_readUBE16');
  PHYSFS_readUBE32 := GetProcAddress(aDLLHandle, 'PHYSFS_readUBE32');
  PHYSFS_readUBE64 := GetProcAddress(aDLLHandle, 'PHYSFS_readUBE64');
  PHYSFS_readULE16 := GetProcAddress(aDLLHandle, 'PHYSFS_readULE16');
  PHYSFS_readULE32 := GetProcAddress(aDLLHandle, 'PHYSFS_readULE32');
  PHYSFS_readULE64 := GetProcAddress(aDLLHandle, 'PHYSFS_readULE64');
  PHYSFS_registerArchiver := GetProcAddress(aDLLHandle, 'PHYSFS_registerArchiver');
  PHYSFS_seek := GetProcAddress(aDLLHandle, 'PHYSFS_seek');
  PHYSFS_setAllocator := GetProcAddress(aDLLHandle, 'PHYSFS_setAllocator');
  PHYSFS_setBuffer := GetProcAddress(aDLLHandle, 'PHYSFS_setBuffer');
  PHYSFS_setErrorCode := GetProcAddress(aDLLHandle, 'PHYSFS_setErrorCode');
  PHYSFS_setSaneConfig := GetProcAddress(aDLLHandle, 'PHYSFS_setSaneConfig');
  PHYSFS_setWriteDir := GetProcAddress(aDLLHandle, 'PHYSFS_setWriteDir');
  PHYSFS_stat_rtn := GetProcAddress(aDLLHandle, 'PHYSFS_stat');
  PHYSFS_supportedArchiveTypes := GetProcAddress(aDLLHandle, 'PHYSFS_supportedArchiveTypes');
  PHYSFS_swapSBE16 := GetProcAddress(aDLLHandle, 'PHYSFS_swapSBE16');
  PHYSFS_swapSBE32 := GetProcAddress(aDLLHandle, 'PHYSFS_swapSBE32');
  PHYSFS_swapSBE64 := GetProcAddress(aDLLHandle, 'PHYSFS_swapSBE64');
  PHYSFS_swapSLE16 := GetProcAddress(aDLLHandle, 'PHYSFS_swapSLE16');
  PHYSFS_swapSLE32 := GetProcAddress(aDLLHandle, 'PHYSFS_swapSLE32');
  PHYSFS_swapSLE64 := GetProcAddress(aDLLHandle, 'PHYSFS_swapSLE64');
  PHYSFS_swapUBE16 := GetProcAddress(aDLLHandle, 'PHYSFS_swapUBE16');
  PHYSFS_swapUBE32 := GetProcAddress(aDLLHandle, 'PHYSFS_swapUBE32');
  PHYSFS_swapUBE64 := GetProcAddress(aDLLHandle, 'PHYSFS_swapUBE64');
  PHYSFS_swapULE16 := GetProcAddress(aDLLHandle, 'PHYSFS_swapULE16');
  PHYSFS_swapULE32 := GetProcAddress(aDLLHandle, 'PHYSFS_swapULE32');
  PHYSFS_swapULE64 := GetProcAddress(aDLLHandle, 'PHYSFS_swapULE64');
  PHYSFS_symbolicLinksPermitted := GetProcAddress(aDLLHandle, 'PHYSFS_symbolicLinksPermitted');
  PHYSFS_tell := GetProcAddress(aDLLHandle, 'PHYSFS_tell');
  PHYSFS_ucs4stricmp := GetProcAddress(aDLLHandle, 'PHYSFS_ucs4stricmp');
  PHYSFS_unmount := GetProcAddress(aDLLHandle, 'PHYSFS_unmount');
  PHYSFS_utf16stricmp := GetProcAddress(aDLLHandle, 'PHYSFS_utf16stricmp');
  PHYSFS_utf8FromLatin1 := GetProcAddress(aDLLHandle, 'PHYSFS_utf8FromLatin1');
  PHYSFS_utf8FromUcs2 := GetProcAddress(aDLLHandle, 'PHYSFS_utf8FromUcs2');
  PHYSFS_utf8FromUcs4 := GetProcAddress(aDLLHandle, 'PHYSFS_utf8FromUcs4');
  PHYSFS_utf8FromUtf16 := GetProcAddress(aDLLHandle, 'PHYSFS_utf8FromUtf16');
  PHYSFS_utf8stricmp := GetProcAddress(aDLLHandle, 'PHYSFS_utf8stricmp');
  PHYSFS_utf8ToUcs2 := GetProcAddress(aDLLHandle, 'PHYSFS_utf8ToUcs2');
  PHYSFS_utf8ToUcs4 := GetProcAddress(aDLLHandle, 'PHYSFS_utf8ToUcs4');
  PHYSFS_utf8ToUtf16 := GetProcAddress(aDLLHandle, 'PHYSFS_utf8ToUtf16');
  PHYSFS_writeBytes := GetProcAddress(aDLLHandle, 'PHYSFS_writeBytes');
  PHYSFS_writeSBE16 := GetProcAddress(aDLLHandle, 'PHYSFS_writeSBE16');
  PHYSFS_writeSBE32 := GetProcAddress(aDLLHandle, 'PHYSFS_writeSBE32');
  PHYSFS_writeSBE64 := GetProcAddress(aDLLHandle, 'PHYSFS_writeSBE64');
  PHYSFS_writeSLE16 := GetProcAddress(aDLLHandle, 'PHYSFS_writeSLE16');
  PHYSFS_writeSLE32 := GetProcAddress(aDLLHandle, 'PHYSFS_writeSLE32');
  PHYSFS_writeSLE64 := GetProcAddress(aDLLHandle, 'PHYSFS_writeSLE64');
  PHYSFS_writeUBE16 := GetProcAddress(aDLLHandle, 'PHYSFS_writeUBE16');
  PHYSFS_writeUBE32 := GetProcAddress(aDLLHandle, 'PHYSFS_writeUBE32');
  PHYSFS_writeUBE64 := GetProcAddress(aDLLHandle, 'PHYSFS_writeUBE64');
  PHYSFS_writeULE16 := GetProcAddress(aDLLHandle, 'PHYSFS_writeULE16');
  PHYSFS_writeULE32 := GetProcAddress(aDLLHandle, 'PHYSFS_writeULE32');
  PHYSFS_writeULE64 := GetProcAddress(aDLLHandle, 'PHYSFS_writeULE64');
  unzClose := GetProcAddress(aDLLHandle, 'unzClose');
  unzCloseCurrentFile := GetProcAddress(aDLLHandle, 'unzCloseCurrentFile');
  unzGetCurrentFileInfo64 := GetProcAddress(aDLLHandle, 'unzGetCurrentFileInfo64');
  unzLocateFile := GetProcAddress(aDLLHandle, 'unzLocateFile');
  unzOpen64 := GetProcAddress(aDLLHandle, 'unzOpen64');
  unzOpenCurrentFilePassword := GetProcAddress(aDLLHandle, 'unzOpenCurrentFilePassword');
  unzReadCurrentFile := GetProcAddress(aDLLHandle, 'unzReadCurrentFile');
  unztell64 := GetProcAddress(aDLLHandle, 'unztell64');
  zipClose := GetProcAddress(aDLLHandle, 'zipClose');
  zipCloseFileInZip := GetProcAddress(aDLLHandle, 'zipCloseFileInZip');
  zipOpen64 := GetProcAddress(aDLLHandle, 'zipOpen64');
  zipOpenNewFileInZip3_64 := GetProcAddress(aDLLHandle, 'zipOpenNewFileInZip3_64');
  zipWriteInFileInZip := GetProcAddress(aDLLHandle, 'zipWriteInFileInZip');
end;

{ =========================================================================== }

{$R PIXELS.Deps.res}

var
  DepsDLLHandle: THandle = 0;

procedure LoadDLL();
var
  LResStream: TResourceStream;

  function c090e513b3cc4faab930fbd1992733e0(): string;
  const
    CValue = '8cb5c6e183004430b1ea97ee2107500a';
  begin
    Result := CValue;
  end;

  procedure AbortDLL(const AText: string; const AArgs: array of const);
  begin
    MessageBox(0, System.PWideChar(Format(AText, AArgs)), 'Critial Error', MB_ICONERROR);
    Halt(1);
  end;

begin
  // load deps DLL
  if DepsDLLHandle <> 0 then Exit;
  if not Boolean((FindResource(HInstance, PChar(c090e513b3cc4faab930fbd1992733e0()), RT_RCDATA) <> 0)) then AbortDLL('Deps DLL was not found in resource', []);
  LResStream := TResourceStream.Create(HInstance, c090e513b3cc4faab930fbd1992733e0(), RT_RCDATA);
  try
    LResStream.Position := 0;
    DepsDLLHandle := Dlluminator.LoadLibrary(LResStream.Memory, LResStream.Size);
    if DepsDLLHandle = 0 then AbortDLL('Was not able to load Deps DLL from memory', []);
  finally
    LResStream.Free();
  end;
  GetExports(DepsDLLHandle);
end;

procedure UnloadDLL();
begin
  // unload deps DLL
  if DepsDLLHandle <> 0 then
  begin
    FreeLibrary(DepsDLLHandle);
    DepsDLLHandle := 0;
  end;
end;

initialization
begin
  // turn on memory leak detection
  ReportMemoryLeaksOnShutdown := True;

  // load allegro DLL
  LoadDLL();
end;

finalization
begin
  // shutdown allegro DLL
  UnloadDLL();
end;

end.
